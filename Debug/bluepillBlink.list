
bluepillBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080099b0  080099b0  0000a9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a14c  0800a14c  0000c1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a14c  0800a14c  0000b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a154  0800a154  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a154  0800a154  0000b154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a158  0800a158  0000b158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800a15c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001f4  0800a350  0000c1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  0800a350  0000c420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dc2  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  00015fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00017b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bc  00000000  00000000  00018450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000257c  00000000  00000000  00018b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6d0  00000000  00000000  0001b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087084  00000000  00000000  00025758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac7dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d68  00000000  00000000  000ac820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b0588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009998 	.word	0x08009998

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009998 	.word	0x08009998

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	2300      	movs	r3, #0
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f7ff fc29 	bl	80009d0 <__aeabi_dcmplt>
 800117e:	b928      	cbnz	r0, 800118c <__aeabi_d2lz+0x1c>
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001188:	f000 b80a 	b.w	80011a0 <__aeabi_d2ulz>
 800118c:	4620      	mov	r0, r4
 800118e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001192:	f000 f805 	bl	80011a0 <__aeabi_d2ulz>
 8001196:	4240      	negs	r0, r0
 8001198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop

080011a0 <__aeabi_d2ulz>:
 80011a0:	b5d0      	push	{r4, r6, r7, lr}
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__aeabi_d2ulz+0x34>)
 80011a6:	4606      	mov	r6, r0
 80011a8:	460f      	mov	r7, r1
 80011aa:	f7ff f99f 	bl	80004ec <__aeabi_dmul>
 80011ae:	f7ff fc75 	bl	8000a9c <__aeabi_d2uiz>
 80011b2:	4604      	mov	r4, r0
 80011b4:	f7ff f920 	bl	80003f8 <__aeabi_ui2d>
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <__aeabi_d2ulz+0x38>)
 80011bc:	f7ff f996 	bl	80004ec <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4630      	mov	r0, r6
 80011c6:	4639      	mov	r1, r7
 80011c8:	f7fe ffd8 	bl	800017c <__aeabi_dsub>
 80011cc:	f7ff fc66 	bl	8000a9c <__aeabi_d2uiz>
 80011d0:	4621      	mov	r1, r4
 80011d2:	bdd0      	pop	{r4, r6, r7, pc}
 80011d4:	3df00000 	.word	0x3df00000
 80011d8:	41f00000 	.word	0x41f00000

080011dc <TX_CAN>:





void TX_CAN(CANMessage *msg, uint16_t std_id){
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b0a0      	sub	sp, #128	@ 0x80
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]


	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	TxHeader.DLC = 8;                // Data length (8 bytes)
 80011e8:	2308      	movs	r3, #8
 80011ea:	677b      	str	r3, [r7, #116]	@ 0x74
	TxHeader.StdId = std_id;         // Standard identifier (can be set dynamically)
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	667b      	str	r3, [r7, #100]	@ 0x64
	TxHeader.RTR = CAN_RTR_DATA;     // Data frame
 80011f0:	2300      	movs	r3, #0
 80011f2:	673b      	str	r3, [r7, #112]	@ 0x70
	TxHeader.IDE = CAN_ID_STD;       // Standard ID
 80011f4:	2300      	movs	r3, #0
 80011f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	TxHeader.TransmitGlobalTime = DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

	// Transmit the message
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, msg->data, &TxMailbox) != HAL_OK) {
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001204:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001208:	4834      	ldr	r0, [pc, #208]	@ (80012dc <TX_CAN+0x100>)
 800120a:	f001 f9b3 	bl	8002574 <HAL_CAN_AddTxMessage>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <TX_CAN+0x3c>
		Error_Handler();  // Handle transmission error
 8001214:	f000 fd20 	bl	8001c58 <Error_Handler>
	}
	char bad_msg[] = "Sent msg, waiting for mailobx to be empty\r\n";
 8001218:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <TX_CAN+0x104>)
 800121a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800121e:	461d      	mov	r5, r3
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, (uint8_t*)bad_msg, strlen(bad_msg), HAL_MAX_DELAY);
 8001230:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ff95 	bl	8000164 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <TX_CAN+0x108>)
 8001248:	f002 fd94 	bl	8003d74 <HAL_UART_Transmit>


	uint32_t timeout = HAL_GetTick() + 100; // 100ms timeout
 800124c:	f000 ff80 	bl	8002150 <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	3364      	adds	r3, #100	@ 0x64
 8001254:	67fb      	str	r3, [r7, #124]	@ 0x7c
	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8001256:	e01c      	b.n	8001292 <TX_CAN+0xb6>
	    if (HAL_GetTick() > timeout) {
 8001258:	f000 ff7a 	bl	8002150 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001260:	4293      	cmp	r3, r2
 8001262:	d216      	bcs.n	8001292 <TX_CAN+0xb6>
	        char errMsg[] = "CAN Tx Timeout!\r\n";
 8001264:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <TX_CAN+0x10c>)
 8001266:	f107 040c 	add.w	r4, r7, #12
 800126a:	461d      	mov	r5, r3
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	8023      	strh	r3, [r4, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ff73 	bl	8000164 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f107 010c 	add.w	r1, r7, #12
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	4816      	ldr	r0, [pc, #88]	@ (80012e4 <TX_CAN+0x108>)
 800128c:	f002 fd72 	bl	8003d74 <HAL_UART_Transmit>
 8001290:	e021      	b.n	80012d6 <TX_CAN+0xfa>
	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8001292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	@ (80012dc <TX_CAN+0x100>)
 8001298:	f001 fa3b 	bl	8002712 <HAL_CAN_IsTxMessagePending>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1da      	bne.n	8001258 <TX_CAN+0x7c>
	        return;
	    }
	}

	char ok_msg[] = "CAN Message Sent\r\n";
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <TX_CAN+0x110>)
 80012a4:	f107 0420 	add.w	r4, r7, #32
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	8022      	strh	r2, [r4, #0]
 80012b4:	3402      	adds	r4, #2
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)ok_msg, strlen(ok_msg), HAL_MAX_DELAY);
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff50 	bl	8000164 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	f107 0120 	add.w	r1, r7, #32
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <TX_CAN+0x108>)
 80012d2:	f002 fd4f 	bl	8003d74 <HAL_UART_Transmit>

}
 80012d6:	3780      	adds	r7, #128	@ 0x80
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdb0      	pop	{r4, r5, r7, pc}
 80012dc:	20000258 	.word	0x20000258
 80012e0:	080099b0 	.word	0x080099b0
 80012e4:	20000210 	.word	0x20000210
 80012e8:	080099dc 	.word	0x080099dc
 80012ec:	080099f0 	.word	0x080099f0

080012f0 <float_to_uint>:

int float_to_uint(float x, float x_min, float x_max, unsigned int bits){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
/// Converts a float to an unsigned int, given range and number of bits ///
	float span = x_max - x_min;
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fc3f 	bl	8000b84 <__aeabi_fsub>
 8001306:	4603      	mov	r3, r0
 8001308:	617b      	str	r3, [r7, #20]
	if(x < x_min) x = x_min;
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff fee1 	bl	80010d4 <__aeabi_fcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <float_to_uint+0x2e>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e008      	b.n	8001330 <float_to_uint+0x40>
	else if(x > x_max) x = x_max;
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff fef5 	bl	8001110 <__aeabi_fcmpgt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <float_to_uint+0x40>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60fb      	str	r3, [r7, #12]
	return (int) ((x- x_min)*((float)((1<<bits)/span)));
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff fc26 	bl	8000b84 <__aeabi_fsub>
 8001338:	4603      	mov	r3, r0
 800133a:	461c      	mov	r4, r3
 800133c:	2201      	movs	r2, #1
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcd3 	bl	8000cf0 <__aeabi_i2f>
 800134a:	4603      	mov	r3, r0
 800134c:	6979      	ldr	r1, [r7, #20]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fdd6 	bl	8000f00 <__aeabi_fdiv>
 8001354:	4603      	mov	r3, r0
 8001356:	4619      	mov	r1, r3
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff fd1d 	bl	8000d98 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fedf 	bl	8001124 <__aeabi_f2iz>
 8001366:	4603      	mov	r3, r0
}
 8001368:	4618      	mov	r0, r3
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <pack_cmd>:
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

}


void pack_cmd(CANMessage * msg, float p_des, float v_des, float kp, float kd, float t_ff){
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
	/// limit data to be within bounds ///

	//// adjust these values above


	p_des = fminf(fmaxf(P_MIN, p_des), P_MAX);
 800137e:	4b54      	ldr	r3, [pc, #336]	@ (80014d0 <pack_cmd+0x160>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f008 fac3 	bl	8009910 <fmaxf>
 800138a:	4602      	mov	r2, r0
 800138c:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <pack_cmd+0x164>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f008 fad1 	bl	800993a <fminf>
 8001398:	60b8      	str	r0, [r7, #8]
	v_des = fminf(fmaxf(V_MIN, v_des), V_MAX);
 800139a:	4b4f      	ldr	r3, [pc, #316]	@ (80014d8 <pack_cmd+0x168>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f008 fab5 	bl	8009910 <fmaxf>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <pack_cmd+0x16c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f008 fac3 	bl	800993a <fminf>
 80013b4:	6078      	str	r0, [r7, #4]
	kp = fminf(fmaxf(Kp_MIN, kp), Kp_MAX);
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <pack_cmd+0x170>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f008 faa7 	bl	8009910 <fmaxf>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <pack_cmd+0x174>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f008 fab5 	bl	800993a <fminf>
 80013d0:	6038      	str	r0, [r7, #0]
	kd = fminf(fmaxf(Kd_MIN, kd), Kd_MAX);
 80013d2:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <pack_cmd+0x178>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013da:	f008 fa99 	bl	8009910 <fmaxf>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <pack_cmd+0x17c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f008 faa7 	bl	800993a <fminf>
 80013ec:	6338      	str	r0, [r7, #48]	@ 0x30
	t_ff = fminf(fmaxf(T_MIN, t_ff), T_MAX);
 80013ee:	4b40      	ldr	r3, [pc, #256]	@ (80014f0 <pack_cmd+0x180>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80013f6:	f008 fa8b 	bl	8009910 <fmaxf>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <pack_cmd+0x184>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f008 fa99 	bl	800993a <fminf>
 8001408:	6378      	str	r0, [r7, #52]	@ 0x34
	/// convert floats to unsigned ints ///
	int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 800140a:	4b31      	ldr	r3, [pc, #196]	@ (80014d0 <pack_cmd+0x160>)
 800140c:	6819      	ldr	r1, [r3, #0]
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <pack_cmd+0x164>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2310      	movs	r3, #16
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff ff6b 	bl	80012f0 <float_to_uint>
 800141a:	6278      	str	r0, [r7, #36]	@ 0x24
	int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <pack_cmd+0x168>)
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <pack_cmd+0x16c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	230c      	movs	r3, #12
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff62 	bl	80012f0 <float_to_uint>
 800142c:	6238      	str	r0, [r7, #32]
	int kp_int = float_to_uint(kp, Kp_MIN, Kp_MAX, 12);
 800142e:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <pack_cmd+0x170>)
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <pack_cmd+0x174>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	230c      	movs	r3, #12
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f7ff ff59 	bl	80012f0 <float_to_uint>
 800143e:	61f8      	str	r0, [r7, #28]
	int kd_int = float_to_uint(kd, Kd_MIN, Kd_MAX, 12);
 8001440:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <pack_cmd+0x178>)
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <pack_cmd+0x17c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	230c      	movs	r3, #12
 800144a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800144c:	f7ff ff50 	bl	80012f0 <float_to_uint>
 8001450:	61b8      	str	r0, [r7, #24]
	int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <pack_cmd+0x180>)
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <pack_cmd+0x184>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	230c      	movs	r3, #12
 800145c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800145e:	f7ff ff47 	bl	80012f0 <float_to_uint>
 8001462:	6178      	str	r0, [r7, #20]
	/// pack ints into the can buffer ///
	msg->data[0] = p_int>>8; // Position High 8
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	121b      	asrs	r3, r3, #8
 8001468:	b2da      	uxtb	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	701a      	strb	r2, [r3, #0]
	msg->data[1] = p_int&0xFF; // Position Low 8
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	705a      	strb	r2, [r3, #1]
	msg->data[2] = v_int>>4; // Speed High 8 bits
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	111b      	asrs	r3, r3, #4
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	709a      	strb	r2, [r3, #2]
	msg->data[3] = ((v_int&0xF)<<4)|(kp_int>>8); // Speed Low 4 bits KP High 4 bits
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	b25a      	sxtb	r2, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	121b      	asrs	r3, r3, #8
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b25b      	sxtb	r3, r3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	70da      	strb	r2, [r3, #3]
	msg->data[4] = kp_int&0xFF; // KP Low 8 bits
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	711a      	strb	r2, [r3, #4]
	msg->data[5] = kd_int>>4; // Kd High 8 bits
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	111b      	asrs	r3, r3, #4
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	715a      	strb	r2, [r3, #5]
	msg->data[6] = ((kd_int&0xF)<<4)|(t_int>>8); // KP Low 4 bits Torque High 4 bits
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	121b      	asrs	r3, r3, #8
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	719a      	strb	r2, [r3, #6]
	msg->data[7] = t_int&0xff; // Torque Low 8 bits
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	71da      	strb	r2, [r3, #7]
}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000008 	.word	0x20000008
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	200002a0 	.word	0x200002a0
 80014e4:	20000018 	.word	0x20000018
 80014e8:	200002a4 	.word	0x200002a4
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000014 	.word	0x20000014

080014f8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2c      	ldr	r2, [pc, #176]	@ (80015b8 <HAL_UART_RxCpltCallback+0xc0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d152      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0xb8>

    	static char command_buffer[32];
		static uint8_t buffer_index = 0;

        // Handle backspace
        if (rx_data == '\b' && buffer_index > 0) {
 800150a:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11a      	bne.n	8001548 <HAL_UART_RxCpltCallback+0x50>
 8001512:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_UART_RxCpltCallback+0x50>
            buffer_index--;
 800151a:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001524:	701a      	strb	r2, [r3, #0]
            char backspace_msg[] = "\b \b";
 8001526:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <HAL_UART_RxCpltCallback+0xcc>)
 8001528:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(&huart1, (uint8_t*)backspace_msg, strlen(backspace_msg), HAL_MAX_DELAY);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe18 	bl	8000164 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	f107 010c 	add.w	r1, r7, #12
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	4821      	ldr	r0, [pc, #132]	@ (80015c8 <HAL_UART_RxCpltCallback+0xd0>)
 8001542:	f002 fc17 	bl	8003d74 <HAL_UART_Transmit>
        if (rx_data == '\b' && buffer_index > 0) {
 8001546:	e02e      	b.n	80015a6 <HAL_UART_RxCpltCallback+0xae>
        }

		// Handle enter
        else if (rx_data == '\r' || rx_data == '\n') {
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b0d      	cmp	r3, #13
 800154e:	d003      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x60>
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d110      	bne.n	800157a <HAL_UART_RxCpltCallback+0x82>
            if (buffer_index > 0) {
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <HAL_UART_RxCpltCallback+0xae>
                command_buffer[buffer_index] = '\0';
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_UART_RxCpltCallback+0xd4>)
 8001568:	2100      	movs	r1, #0
 800156a:	5499      	strb	r1, [r3, r2]
                process_command(command_buffer);
 800156c:	4817      	ldr	r0, [pc, #92]	@ (80015cc <HAL_UART_RxCpltCallback+0xd4>)
 800156e:	f000 f82f 	bl	80015d0 <process_command>
                buffer_index = 0;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
            if (buffer_index > 0) {
 8001578:	e015      	b.n	80015a6 <HAL_UART_RxCpltCallback+0xae>
            }
        }
        // Normal character
        else if (buffer_index < sizeof(command_buffer) - 1) {
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b1e      	cmp	r3, #30
 8001580:	d811      	bhi.n	80015a6 <HAL_UART_RxCpltCallback+0xae>
            command_buffer[buffer_index++] = rx_data;
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	b2d1      	uxtb	r1, r2
 800158a:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_UART_RxCpltCallback+0xc8>)
 800158c:	7011      	strb	r1, [r2, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 8001592:	7819      	ldrb	r1, [r3, #0]
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_UART_RxCpltCallback+0xd4>)
 8001596:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart1, &rx_data, 1, HAL_MAX_DELAY); // Echo character
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2201      	movs	r2, #1
 800159e:	4907      	ldr	r1, [pc, #28]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 80015a0:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <HAL_UART_RxCpltCallback+0xd0>)
 80015a2:	f002 fbe7 	bl	8003d74 <HAL_UART_Transmit>
        }

        // Restart UART receive interrupt
        HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	4904      	ldr	r1, [pc, #16]	@ (80015bc <HAL_UART_RxCpltCallback+0xc4>)
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <HAL_UART_RxCpltCallback+0xd0>)
 80015ac:	f002 fc6d 	bl	8003e8a <HAL_UART_Receive_IT>


    }
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40013800 	.word	0x40013800
 80015bc:	20000280 	.word	0x20000280
 80015c0:	200002a8 	.word	0x200002a8
 80015c4:	00082008 	.word	0x00082008
 80015c8:	20000210 	.word	0x20000210
 80015cc:	200002ac 	.word	0x200002ac

080015d0 <process_command>:


void process_command(char* cmd) {
 80015d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015d4:	b0bb      	sub	sp, #236	@ 0xec
 80015d6:	af08      	add	r7, sp, #32
 80015d8:	6078      	str	r0, [r7, #4]
    char response[160];
    float position;

    if (strcmp(cmd, "m") == 0) { // Enter Motor Mode
 80015da:	4982      	ldr	r1, [pc, #520]	@ (80017e4 <process_command+0x214>)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7fe fdb7 	bl	8000150 <strcmp>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11d      	bne.n	8001624 <process_command+0x54>
        memcpy(can_msg.data, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC}, 8);
 80015e8:	4a7f      	ldr	r2, [pc, #508]	@ (80017e8 <process_command+0x218>)
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80015f6:	4b7d      	ldr	r3, [pc, #500]	@ (80017ec <process_command+0x21c>)
 80015f8:	461a      	mov	r2, r3
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001602:	e882 0003 	stmia.w	r2, {r0, r1}
        TX_CAN(&can_msg, 0x01);
 8001606:	2101      	movs	r1, #1
 8001608:	4878      	ldr	r0, [pc, #480]	@ (80017ec <process_command+0x21c>)
 800160a:	f7ff fde7 	bl	80011dc <TX_CAN>
        motor_mode = 1;
 800160e:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <process_command+0x220>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
        snprintf(response, sizeof(response), "Entered motor mode\r\n");
 8001614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001618:	4a76      	ldr	r2, [pc, #472]	@ (80017f4 <process_command+0x224>)
 800161a:	21a0      	movs	r1, #160	@ 0xa0
 800161c:	4618      	mov	r0, r3
 800161e:	f004 f8f1 	bl	8005804 <sniprintf>
 8001622:	e0cc      	b.n	80017be <process_command+0x1ee>
    }
    else if (strcmp(cmd, "e") == 0) { // Exit Motor Mode
 8001624:	4974      	ldr	r1, [pc, #464]	@ (80017f8 <process_command+0x228>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7fe fd92 	bl	8000150 <strcmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d11d      	bne.n	800166e <process_command+0x9e>
        memcpy(can_msg.data, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD}, 8);
 8001632:	4a72      	ldr	r2, [pc, #456]	@ (80017fc <process_command+0x22c>)
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001640:	4b6a      	ldr	r3, [pc, #424]	@ (80017ec <process_command+0x21c>)
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164c:	e882 0003 	stmia.w	r2, {r0, r1}
        TX_CAN(&can_msg, 0x01);
 8001650:	2101      	movs	r1, #1
 8001652:	4866      	ldr	r0, [pc, #408]	@ (80017ec <process_command+0x21c>)
 8001654:	f7ff fdc2 	bl	80011dc <TX_CAN>
        motor_mode = 0;
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <process_command+0x220>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
        snprintf(response, sizeof(response), "Exited motor mode\r\n");
 800165e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001662:	4a67      	ldr	r2, [pc, #412]	@ (8001800 <process_command+0x230>)
 8001664:	21a0      	movs	r1, #160	@ 0xa0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f8cc 	bl	8005804 <sniprintf>
 800166c:	e0a7      	b.n	80017be <process_command+0x1ee>
    }
    else if (strcmp(cmd, "z") == 0) { // Set Zero Position
 800166e:	4965      	ldr	r1, [pc, #404]	@ (8001804 <process_command+0x234>)
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7fe fd6d 	bl	8000150 <strcmp>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d11a      	bne.n	80016b2 <process_command+0xe2>
        memcpy(can_msg.data, (uint8_t[]){0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE}, 8);
 800167c:	4a62      	ldr	r2, [pc, #392]	@ (8001808 <process_command+0x238>)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001686:	e883 0003 	stmia.w	r3, {r0, r1}
 800168a:	4b58      	ldr	r3, [pc, #352]	@ (80017ec <process_command+0x21c>)
 800168c:	461a      	mov	r2, r3
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001696:	e882 0003 	stmia.w	r2, {r0, r1}
        TX_CAN(&can_msg, 0x01);
 800169a:	2101      	movs	r1, #1
 800169c:	4853      	ldr	r0, [pc, #332]	@ (80017ec <process_command+0x21c>)
 800169e:	f7ff fd9d 	bl	80011dc <TX_CAN>
        snprintf(response, sizeof(response), "Set zero position\r\n");
 80016a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a6:	4a59      	ldr	r2, [pc, #356]	@ (800180c <process_command+0x23c>)
 80016a8:	21a0      	movs	r1, #160	@ 0xa0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f8aa 	bl	8005804 <sniprintf>
 80016b0:	e085      	b.n	80017be <process_command+0x1ee>
    }
    else if (sscanf(cmd, "p %f", &position) == 1) { // Position command
 80016b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b6:	461a      	mov	r2, r3
 80016b8:	4955      	ldr	r1, [pc, #340]	@ (8001810 <process_command+0x240>)
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f004 f8f6 	bl	80058ac <siscanf>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d12b      	bne.n	800171e <process_command+0x14e>
        if (motor_mode) {
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <process_command+0x220>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01f      	beq.n	800170e <process_command+0x13e>
            pack_cmd(&can_msg, position, 0.0f, 50.0f, 1.0f, 0.0f);
 80016ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <process_command+0x244>)
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4842      	ldr	r0, [pc, #264]	@ (80017ec <process_command+0x21c>)
 80016e4:	f7ff fe44 	bl	8001370 <pack_cmd>
            TX_CAN(&can_msg, 0x01);
 80016e8:	2101      	movs	r1, #1
 80016ea:	4840      	ldr	r0, [pc, #256]	@ (80017ec <process_command+0x21c>)
 80016ec:	f7ff fd76 	bl	80011dc <TX_CAN>
            snprintf(response, sizeof(response), "Set position to %.2f\r\n", position);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fea2 	bl	800043c <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001700:	e9cd 2300 	strd	r2, r3, [sp]
 8001704:	4a44      	ldr	r2, [pc, #272]	@ (8001818 <process_command+0x248>)
 8001706:	21a0      	movs	r1, #160	@ 0xa0
 8001708:	f004 f87c 	bl	8005804 <sniprintf>
 800170c:	e057      	b.n	80017be <process_command+0x1ee>
        } else {
            snprintf(response, sizeof(response), "Error: Motor not in control mode (send 'm' first)\r\n");
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	4a42      	ldr	r2, [pc, #264]	@ (800181c <process_command+0x24c>)
 8001714:	21a0      	movs	r1, #160	@ 0xa0
 8001716:	4618      	mov	r0, r3
 8001718:	f004 f874 	bl	8005804 <sniprintf>
 800171c:	e04f      	b.n	80017be <process_command+0x1ee>
        }
    }
    else if (strcmp(cmd, "s") == 0) { // Status request
 800171e:	4940      	ldr	r1, [pc, #256]	@ (8001820 <process_command+0x250>)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7fe fd15 	bl	8000150 <strcmp>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d132      	bne.n	8001792 <process_command+0x1c2>
        snprintf(response, sizeof(response), "Mode: %s, Pos: %.2f, Vel: %.2f, Torque: %.2f, Temp: %.1f°C\r\n",
                motor_mode ? "ON" : "OFF", current_position, current_velocity, current_torque, current_temp);
 800172c:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <process_command+0x220>)
 800172e:	781b      	ldrb	r3, [r3, #0]
        snprintf(response, sizeof(response), "Mode: %s, Pos: %.2f, Vel: %.2f, Torque: %.2f, Temp: %.1f°C\r\n",
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <process_command+0x168>
 8001734:	4e3b      	ldr	r6, [pc, #236]	@ (8001824 <process_command+0x254>)
 8001736:	e000      	b.n	800173a <process_command+0x16a>
 8001738:	4e3b      	ldr	r6, [pc, #236]	@ (8001828 <process_command+0x258>)
 800173a:	4b3c      	ldr	r3, [pc, #240]	@ (800182c <process_command+0x25c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe7c 	bl	800043c <__aeabi_f2d>
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <process_command+0x260>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe75 	bl	800043c <__aeabi_f2d>
 8001752:	4680      	mov	r8, r0
 8001754:	4689      	mov	r9, r1
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <process_command+0x264>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe6e 	bl	800043c <__aeabi_f2d>
 8001760:	4682      	mov	sl, r0
 8001762:	468b      	mov	fp, r1
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <process_command+0x268>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe67 	bl	800043c <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001776:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800177a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800177e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001782:	e9cd 4500 	strd	r4, r5, [sp]
 8001786:	4633      	mov	r3, r6
 8001788:	4a2c      	ldr	r2, [pc, #176]	@ (800183c <process_command+0x26c>)
 800178a:	21a0      	movs	r1, #160	@ 0xa0
 800178c:	f004 f83a 	bl	8005804 <sniprintf>
 8001790:	e015      	b.n	80017be <process_command+0x1ee>
    }
    else if (strcmp(cmd, "help") == 0) {
 8001792:	492b      	ldr	r1, [pc, #172]	@ (8001840 <process_command+0x270>)
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fcdb 	bl	8000150 <strcmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <process_command+0x1e0>
        snprintf(response, sizeof(response),
 80017a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a4:	4a27      	ldr	r2, [pc, #156]	@ (8001844 <process_command+0x274>)
 80017a6:	21a0      	movs	r1, #160	@ 0xa0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 f82b 	bl	8005804 <sniprintf>
 80017ae:	e006      	b.n	80017be <process_command+0x1ee>
                "p [value] - Set position (e.g., 'p 1.5')\r\n"
                "s - Get status\r\n"
                "help - Show this help\r\n");
    }
    else {
        snprintf(response, sizeof(response), "Unknown command. Type 'help' for available commands.\r\n");
 80017b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b4:	4a24      	ldr	r2, [pc, #144]	@ (8001848 <process_command+0x278>)
 80017b6:	21a0      	movs	r1, #160	@ 0xa0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f823 	bl	8005804 <sniprintf>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fcce 	bl	8000164 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	481d      	ldr	r0, [pc, #116]	@ (800184c <process_command+0x27c>)
 80017d6:	f002 facd 	bl	8003d74 <HAL_UART_Transmit>
}
 80017da:	bf00      	nop
 80017dc:	37cc      	adds	r7, #204	@ 0xcc
 80017de:	46bd      	mov	sp, r7
 80017e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e4:	08009a40 	.word	0x08009a40
 80017e8:	08009c0c 	.word	0x08009c0c
 80017ec:	20000284 	.word	0x20000284
 80017f0:	2000029c 	.word	0x2000029c
 80017f4:	08009a44 	.word	0x08009a44
 80017f8:	08009a5c 	.word	0x08009a5c
 80017fc:	08009c14 	.word	0x08009c14
 8001800:	08009a60 	.word	0x08009a60
 8001804:	08009a74 	.word	0x08009a74
 8001808:	08009c1c 	.word	0x08009c1c
 800180c:	08009a78 	.word	0x08009a78
 8001810:	08009a8c 	.word	0x08009a8c
 8001814:	42480000 	.word	0x42480000
 8001818:	08009a94 	.word	0x08009a94
 800181c:	08009aac 	.word	0x08009aac
 8001820:	08009ae0 	.word	0x08009ae0
 8001824:	08009ae4 	.word	0x08009ae4
 8001828:	08009ae8 	.word	0x08009ae8
 800182c:	2000028c 	.word	0x2000028c
 8001830:	20000290 	.word	0x20000290
 8001834:	20000294 	.word	0x20000294
 8001838:	20000298 	.word	0x20000298
 800183c:	08009aec 	.word	0x08009aec
 8001840:	08009b2c 	.word	0x08009b2c
 8001844:	08009b34 	.word	0x08009b34
 8001848:	08009bd4 	.word	0x08009bd4
 800184c:	20000210 	.word	0x20000210

08001850 <main>:



int main(void)
{
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
  HAL_Init();
 8001856:	f000 fc23 	bl	80020a0 <HAL_Init>
  SystemClock_Config();
 800185a:	f000 f8ab 	bl	80019b4 <SystemClock_Config>
  MX_GPIO_Init();
 800185e:	f000 f933 	bl	8001ac8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001862:	f000 f8e9 	bl	8001a38 <MX_USART1_UART_Init>
  CAN_Config();
 8001866:	f000 f945 	bl	8001af4 <CAN_Config>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2015      	movs	r0, #21
 8001870:	f001 fbb3 	bl	8002fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001874:	2015      	movs	r0, #21
 8001876:	f001 fbcc 	bl	8003012 <HAL_NVIC_EnableIRQ>
  // Start the CAN peripheral.

  // Send an initial prompt message via UART.

  // get current time of the system in day(01)/month(jan)/year(1970)
  char welcomeMsg[] = "Welcome to AK80-8 CAN Control \r\n";
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <main+0x58>)
 800187c:	1d3c      	adds	r4, r7, #4
 800187e:	461d      	mov	r5, r3
 8001880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	7023      	strb	r3, [r4, #0]

  HAL_UART_Transmit(&huart1, (uint8_t*)welcomeMsg, strlen(welcomeMsg), HAL_MAX_DELAY);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fc68 	bl	8000164 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	1d39      	adds	r1, r7, #4
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <main+0x5c>)
 80018a0:	f002 fa68 	bl	8003d74 <HAL_UART_Transmit>

  // Main loop: Continuously process incoming UART commands.
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <main+0x54>
 80018a8:	08009c24 	.word	0x08009c24
 80018ac:	20000210 	.word	0x20000210

080018b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  /* USER CODE END 3 */
}


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b0ac      	sub	sp, #176	@ 0xb0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	char errormsg[] = "Entered Callback \r\n";
 80018b8:	4b39      	ldr	r3, [pc, #228]	@ (80019a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 80018ba:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80018be:	461d      	mov	r5, r3
 80018c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)errormsg, strlen(errormsg), HAL_MAX_DELAY);
 80018c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fc49 	bl	8000164 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	4831      	ldr	r0, [pc, #196]	@ (80019a4 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 80018e0:	f002 fa48 	bl	8003d74 <HAL_UART_Transmit>

    CAN_RxHeaderTypeDef RxHeader;
    CANMessage msg;

    // Get the received CAN message from FIFO1
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, msg.data) == HAL_OK)
 80018e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018e8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80018ec:	2101      	movs	r1, #1
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 ff32 	bl	8002758 <HAL_CAN_GetRxMessage>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d14d      	bne.n	8001996 <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
    {
        // Buffer to store the UART message
        char uart_buffer[100];  // Make sure this is large enough for your message

        // Prepare the ID for transmission
        int length = snprintf(uart_buffer, sizeof(uart_buffer), "Received CAN message: ID = 0x%ld, Data = ", RxHeader.StdId);
 80018fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018fc:	f107 000c 	add.w	r0, r7, #12
 8001900:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8001902:	2164      	movs	r1, #100	@ 0x64
 8001904:	f003 ff7e 	bl	8005804 <sniprintf>
 8001908:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

        // Transmit the ID part to UART
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, length, HAL_MAX_DELAY);
 800190c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 010c 	add.w	r1, r7, #12
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	4822      	ldr	r0, [pc, #136]	@ (80019a4 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 800191c:	f002 fa2a 	bl	8003d74 <HAL_UART_Transmit>

        // Transmit the data bytes
        length = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        for (int i = 0; i < RxHeader.DLC; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800192c:	e01c      	b.n	8001968 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
        {
            // Print each byte of data in hexadecimal format
            length += snprintf(&uart_buffer[length], sizeof(uart_buffer) - length, "%02X ", msg.data[i]);
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001936:	18d0      	adds	r0, r2, r3
 8001938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800193c:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8001940:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 800194e:	f003 ff59 	bl	8005804 <sniprintf>
 8001952:	4602      	mov	r2, r0
 8001954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001958:	4413      	add	r3, r2
 800195a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        for (int i = 0; i < RxHeader.DLC; i++)
 800195e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001962:	3301      	adds	r3, #1
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001968:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800196c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001970:	429a      	cmp	r2, r3
 8001972:	d8dc      	bhi.n	800192e <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
        }
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, length, HAL_MAX_DELAY);
 8001974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001978:	b29a      	uxth	r2, r3
 800197a:	f107 010c 	add.w	r1, r7, #12
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001984:	f002 f9f6 	bl	8003d74 <HAL_UART_Transmit>


        // Finish the line with a newline character
        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	2202      	movs	r2, #2
 800198e:	4908      	ldr	r1, [pc, #32]	@ (80019b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x100>)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8001992:	f002 f9ef 	bl	8003d74 <HAL_UART_Transmit>
    }
}
 8001996:	bf00      	nop
 8001998:	37b0      	adds	r7, #176	@ 0xb0
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}
 800199e:	bf00      	nop
 80019a0:	08009c80 	.word	0x08009c80
 80019a4:	20000210 	.word	0x20000210
 80019a8:	08009c48 	.word	0x08009c48
 80019ac:	08009c74 	.word	0x08009c74
 80019b0:	08009c7c 	.word	0x08009c7c

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2228      	movs	r2, #40	@ 0x28
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 ffe1 	bl	800598a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

    // Enable External 8MHz Crystal Oscillator (HSE)
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019de:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9; // 8MHz * 9 = 72MHz
 80019ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fd5d 	bl	80034b4 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x50>
    {
        Error_Handler();
 8001a00:	f000 f92a 	bl	8001c58 <Error_Handler>
    }

    // Configure the System Clock to use PLL
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2; // APB1 max 36MHz
 8001a10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a14:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1; // APB2 max 72MHz
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 ffca 	bl	80039b8 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x7a>
    {
        Error_Handler();
 8001a2a:	f000 f915 	bl	8001c58 <Error_Handler>
    }
}
 8001a2e:	bf00      	nop
 8001a30:	3740      	adds	r7, #64	@ 0x40
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a40:	4a1e      	ldr	r2, [pc, #120]	@ (8001abc <MX_USART1_UART_Init+0x84>)
 8001a42:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a46:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a4a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a58:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a60:	220c      	movs	r2, #12
 8001a62:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a70:	4811      	ldr	r0, [pc, #68]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a72:	f002 f92f 	bl	8003cd4 <HAL_UART_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d014      	beq.n	8001aa6 <MX_USART1_UART_Init+0x6e>
  {
	char errormsg[] = "UART INIT ERROR\r\n";
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_USART1_UART_Init+0x88>)
 8001a7e:	1d3c      	adds	r4, r7, #4
 8001a80:	461d      	mov	r5, r3
 8001a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)errormsg, strlen(errormsg), HAL_MAX_DELAY);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fb69 	bl	8000164 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	1d39      	adds	r1, r7, #4
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001a9e:	f002 f969 	bl	8003d74 <HAL_UART_Transmit>

    Error_Handler();
 8001aa2:	f000 f8d9 	bl	8001c58 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1, &rx_data, 1); // Start listening for data
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4906      	ldr	r1, [pc, #24]	@ (8001ac4 <MX_USART1_UART_Init+0x8c>)
 8001aaa:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_USART1_UART_Init+0x80>)
 8001aac:	f002 f9ed 	bl	8003e8a <HAL_UART_Receive_IT>

  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	20000210 	.word	0x20000210
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	08009c94 	.word	0x08009c94
 8001ac4:	20000280 	.word	0x20000280

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <MX_GPIO_Init+0x28>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a07      	ldr	r2, [pc, #28]	@ (8001af0 <MX_GPIO_Init+0x28>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <MX_GPIO_Init+0x28>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000

08001af4 <CAN_Config>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void CAN_Config(void)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b097      	sub	sp, #92	@ 0x5c
 8001af8:	af00      	add	r7, sp, #0
	__HAL_RCC_CAN1_CLK_ENABLE();
 8001afa:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <CAN_Config+0x148>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a4f      	ldr	r2, [pc, #316]	@ (8001c3c <CAN_Config+0x148>)
 8001b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <CAN_Config+0x148>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b12:	4b4b      	ldr	r3, [pc, #300]	@ (8001c40 <CAN_Config+0x14c>)
 8001b14:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <CAN_Config+0x150>)
 8001b16:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001b18:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <CAN_Config+0x14c>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	605a      	str	r2, [r3, #4]

  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b1e:	4b48      	ldr	r3, [pc, #288]	@ (8001c40 <CAN_Config+0x14c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  //hcan.Init.Mode = CAN_MODE_LOOPBACK;

  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b24:	4b46      	ldr	r3, [pc, #280]	@ (8001c40 <CAN_Config+0x14c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <CAN_Config+0x14c>)
 8001b2c:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001b30:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <CAN_Config+0x14c>)
 8001b34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b38:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <CAN_Config+0x14c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b40:	4b3f      	ldr	r3, [pc, #252]	@ (8001c40 <CAN_Config+0x14c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b46:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <CAN_Config+0x14c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <CAN_Config+0x14c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <CAN_Config+0x14c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <CAN_Config+0x14c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b5e:	4838      	ldr	r0, [pc, #224]	@ (8001c40 <CAN_Config+0x14c>)
 8001b60:	f000 fb00 	bl	8002164 <HAL_CAN_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <CAN_Config+0x7a>
  {
    Error_Handler();
 8001b6a:	f000 f875 	bl	8001c58 <Error_Handler>
  }

  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterBank = 0; // First filter bank
 8001b6e:	2300      	movs	r3, #0
 8001b70:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; // Use ID mask mode
 8001b72:	2300      	movs	r3, #0
 8001b74:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use 32-bit filtering
 8001b76:	2301      	movs	r3, #1
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sFilterConfig.FilterIdHigh = 0x0000;
 8001b82:	2300      	movs	r3, #0
 8001b84:	633b      	str	r3, [r7, #48]	@ 0x30
  sFilterConfig.FilterIdLow = 0x0000;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1; // Store accepted messages in FIFO0
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig.FilterActivation = ENABLE; // Enable the filter
 8001b8e:	2301      	movs	r3, #1
 8001b90:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001b92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b96:	4619      	mov	r1, r3
 8001b98:	4829      	ldr	r0, [pc, #164]	@ (8001c40 <CAN_Config+0x14c>)
 8001b9a:	f000 fbde 	bl	800235a <HAL_CAN_ConfigFilter>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <CAN_Config+0xdc>
  {
      // Error handling
      char welcomeMsg[] = "Failed CAN \r\n";
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <CAN_Config+0x154>)
 8001ba6:	f107 0410 	add.w	r4, r7, #16
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	c407      	stmia	r4!, {r0, r1, r2}
 8001bae:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)welcomeMsg, strlen(welcomeMsg), HAL_MAX_DELAY);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fad5 	bl	8000164 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f107 0110 	add.w	r1, r7, #16
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <CAN_Config+0x158>)
 8001bc8:	f002 f8d4 	bl	8003d74 <HAL_UART_Transmit>
      Error_Handler();
 8001bcc:	f000 f844 	bl	8001c58 <Error_Handler>
  }




  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <CAN_Config+0x14c>)
 8001bd4:	f000 fee1 	bl	800299a <HAL_CAN_ActivateNotification>

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001bd8:	4819      	ldr	r0, [pc, #100]	@ (8001c40 <CAN_Config+0x14c>)
 8001bda:	f000 fc87 	bl	80024ec <HAL_CAN_Start>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d012      	beq.n	8001c0a <CAN_Config+0x116>
        Error_Handler();
 8001be4:	f000 f838 	bl	8001c58 <Error_Handler>
        char errormsg[] = "ERROR \r\n";
 8001be8:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <CAN_Config+0x15c>)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bee:	c303      	stmia	r3!, {r0, r1}
 8001bf0:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)errormsg, strlen(errormsg), HAL_MAX_DELAY);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fab5 	bl	8000164 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	1d39      	adds	r1, r7, #4
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <CAN_Config+0x158>)
 8001c06:	f002 f8b5 	bl	8003d74 <HAL_UART_Transmit>
    }

  char welcomeMsg[] = "OK CAN \r\n";
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <CAN_Config+0x160>)
 8001c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c12:	c303      	stmia	r3!, {r0, r1}
 8001c14:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)welcomeMsg, strlen(welcomeMsg), HAL_MAX_DELAY);
 8001c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe faa2 	bl	8000164 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <CAN_Config+0x158>)
 8001c2e:	f002 f8a1 	bl	8003d74 <HAL_UART_Transmit>

}
 8001c32:	bf00      	nop
 8001c34:	375c      	adds	r7, #92	@ 0x5c
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	20000258 	.word	0x20000258
 8001c44:	40006400 	.word	0x40006400
 8001c48:	08009ca8 	.word	0x08009ca8
 8001c4c:	20000210 	.word	0x20000210
 8001c50:	08009cb8 	.word	0x08009cb8
 8001c54:	08009cc4 	.word	0x08009cc4

08001c58 <Error_Handler>:

void Error_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5e:	b672      	cpsid	i
}
 8001c60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  char errormsg[] = "ERROR \r\n";
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <Error_Handler+0x30>)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c68:	c303      	stmia	r3!, {r0, r1}
 8001c6a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)errormsg, strlen(errormsg), HAL_MAX_DELAY);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fa78 	bl	8000164 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <Error_Handler+0x34>)
 8001c80:	f002 f878 	bl	8003d74 <HAL_UART_Transmit>
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x2c>
 8001c88:	08009cb8 	.word	0x08009cb8
 8001c8c:	20000210 	.word	0x20000210

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <HAL_MspInit+0x5c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_MspInit+0x5c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cec <HAL_MspInit+0x5c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_MspInit+0x60>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_MspInit+0x60>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <HAL_CAN_MspInit+0x9c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d139      	bne.n	8001d88 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	61d3      	str	r3, [r2, #28]
 8001d20:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_CAN_MspInit+0xa0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480f      	ldr	r0, [pc, #60]	@ (8001d98 <HAL_CAN_MspInit+0xa4>)
 8001d5a:	f001 fa27 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <HAL_CAN_MspInit+0xa4>)
 8001d74:	f001 fa1a 	bl	80031ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2015      	movs	r0, #21
 8001d7e:	f001 f92c 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d82:	2015      	movs	r0, #21
 8001d84:	f001 f945 	bl	8003012 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40006400 	.word	0x40006400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a20      	ldr	r2, [pc, #128]	@ (8001e38 <HAL_UART_MspInit+0x9c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d139      	bne.n	8001e30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0xa0>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480f      	ldr	r0, [pc, #60]	@ (8001e40 <HAL_UART_MspInit+0xa4>)
 8001e02:	f001 f9d3 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4809      	ldr	r0, [pc, #36]	@ (8001e40 <HAL_UART_MspInit+0xa4>)
 8001e1c:	f001 f9c6 	bl	80031ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2025      	movs	r0, #37	@ 0x25
 8001e26:	f001 f8d8 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e2a:	2025      	movs	r0, #37	@ 0x25
 8001e2c:	f001 f8f1 	bl	8003012 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e94:	f000 f94a 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <CAN1_RX1_IRQHandler+0x10>)
 8001ea2:	f000 fd9f 	bl	80029e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000258 	.word	0x20000258

08001eb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <USART1_IRQHandler+0x10>)
 8001eb6:	f002 f80d 	bl	8003ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000210 	.word	0x20000210

08001ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <_kill>:

int _kill(int pid, int sig)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001edc:	f003 fda8 	bl	8005a30 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2216      	movs	r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_exit>:

void _exit (int status)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efa:	f04f 31ff 	mov.w	r1, #4294967295
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffe7 	bl	8001ed2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <_exit+0x12>

08001f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e00a      	b.n	8001f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1a:	f3af 8000 	nop.w
 8001f1e:	4601      	mov	r1, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	b2ca      	uxtb	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf0      	blt.n	8001f1a <_read+0x12>
  }

  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e009      	b.n	8001f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf1      	blt.n	8001f54 <_write+0x12>
  }
  return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_close>:

int _close(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <_isatty>:

int _isatty(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800200c:	f003 fd10 	bl	8005a30 <__errno>
 8002010:	4603      	mov	r3, r0
 8002012:	220c      	movs	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20005000 	.word	0x20005000
 800203c:	00000400 	.word	0x00000400
 8002040:	200002cc 	.word	0x200002cc
 8002044:	20000420 	.word	0x20000420

08002048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002054:	f7ff fff8 	bl	8002048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002058:	480b      	ldr	r0, [pc, #44]	@ (8002088 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800205a:	490c      	ldr	r1, [pc, #48]	@ (800208c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800205c:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <LoopFillZerobss+0x16>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002070:	4c09      	ldr	r4, [pc, #36]	@ (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 fcdd 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7ff fbe5 	bl	8001850 <main>
  bx lr
 8002086:	4770      	bx	lr
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002090:	0800a15c 	.word	0x0800a15c
  ldr r2, =_sbss
 8002094:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002098:	20000420 	.word	0x20000420

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_Init+0x28>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_Init+0x28>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 ff87 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	200f      	movs	r0, #15
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fde8 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 ff9f 	bl	800302e <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 ff67 	bl	8002fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	@ (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000020 	.word	0x20000020
 8002124:	20000028 	.word	0x20000028
 8002128:	20000024 	.word	0x20000024

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_IncTick+0x1c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_IncTick+0x20>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a03      	ldr	r2, [pc, #12]	@ (800214c <HAL_IncTick+0x20>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000028 	.word	0x20000028
 800214c:	200002d0 	.word	0x200002d0

08002150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b02      	ldr	r3, [pc, #8]	@ (8002160 <HAL_GetTick+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	200002d0 	.word	0x200002d0

08002164 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0ed      	b.n	8002352 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fdb6 	bl	8001cf4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002198:	f7ff ffda 	bl	8002150 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800219e:	e012      	b.n	80021c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a0:	f7ff ffd6 	bl	8002150 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b0a      	cmp	r3, #10
 80021ac:	d90b      	bls.n	80021c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2205      	movs	r2, #5
 80021be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0c5      	b.n	8002352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0e5      	beq.n	80021a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0202 	bic.w	r2, r2, #2
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7ff ffb4 	bl	8002150 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ea:	e012      	b.n	8002212 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021ec:	f7ff ffb0 	bl	8002150 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b0a      	cmp	r3, #10
 80021f8:	d90b      	bls.n	8002212 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2205      	movs	r2, #5
 800220a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09f      	b.n	8002352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e5      	bne.n	80021ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e1b      	ldrb	r3, [r3, #24]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e007      	b.n	800224a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7e5b      	ldrb	r3, [r3, #25]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d108      	bne.n	8002264 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e007      	b.n	8002274 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e9b      	ldrb	r3, [r3, #26]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e007      	b.n	800229e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0220 	bic.w	r2, r2, #32
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7edb      	ldrb	r3, [r3, #27]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0210 	bic.w	r2, r2, #16
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e007      	b.n	80022c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0210 	orr.w	r2, r2, #16
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7f1b      	ldrb	r3, [r3, #28]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e007      	b.n	80022f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7f5b      	ldrb	r3, [r3, #29]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0204 	orr.w	r2, r2, #4
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e007      	b.n	800231c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800235a:	b480      	push	{r7}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d003      	beq.n	8002380 <HAL_CAN_ConfigFilter+0x26>
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b02      	cmp	r3, #2
 800237c:	f040 80aa 	bne.w	80024d4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2201      	movs	r2, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d123      	bne.n	8002402 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3248      	adds	r2, #72	@ 0x48
 80023e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	3348      	adds	r3, #72	@ 0x48
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d122      	bne.n	8002450 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	431a      	orrs	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800242a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3248      	adds	r2, #72	@ 0x48
 8002430:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002444:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002446:	6979      	ldr	r1, [r7, #20]
 8002448:	3348      	adds	r3, #72	@ 0x48
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800246a:	e007      	b.n	800247c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002496:	e007      	b.n	80024a8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024c6:	f023 0201 	bic.w	r2, r3, #1
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e006      	b.n	80024e2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d12e      	bne.n	800255e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff fe1a 	bl	8002150 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800251e:	e012      	b.n	8002546 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002520:	f7ff fe16 	bl	8002150 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d90b      	bls.n	8002546 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e012      	b.n	800256c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e006      	b.n	800256c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_AddTxMessage+0x2c>
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80ad 	bne.w	80026fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8095 	beq.w	80026ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10d      	bne.n	80025f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	6809      	ldr	r1, [r1, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e00f      	b.n	8002618 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002602:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800260c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3318      	adds	r3, #24
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3318      	adds	r3, #24
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	440b      	add	r3, r1
 8002628:	3304      	adds	r3, #4
 800262a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	7d1b      	ldrb	r3, [r3, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d111      	bne.n	8002658 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3318      	adds	r3, #24
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3318      	adds	r3, #24
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	3304      	adds	r3, #4
 8002656:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3307      	adds	r3, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	061a      	lsls	r2, r3, #24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3306      	adds	r3, #6
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3305      	adds	r3, #5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	3204      	adds	r2, #4
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4610      	mov	r0, r2
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	ea43 0200 	orr.w	r2, r3, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	440b      	add	r3, r1
 800268a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800268e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3303      	adds	r3, #3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	061a      	lsls	r2, r3, #24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3302      	adds	r3, #2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	4313      	orrs	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	4610      	mov	r0, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	ea43 0200 	orr.w	r2, r3, r0
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	440b      	add	r3, r1
 80026c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80026c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3318      	adds	r3, #24
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3318      	adds	r3, #24
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e00e      	b.n	8002708 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e006      	b.n	8002708 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	@ 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002726:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d002      	beq.n	8002734 <HAL_CAN_IsTxMessagePending+0x22>
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d10b      	bne.n	800274c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	069b      	lsls	r3, r3, #26
 800273e:	401a      	ands	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002748:	2301      	movs	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d003      	beq.n	800277c <HAL_CAN_GetRxMessage+0x24>
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b02      	cmp	r3, #2
 8002778:	f040 8103 	bne.w	8002982 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10e      	bne.n	80027a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0f7      	b.n	8002990 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e8      	b.n	8002990 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	331b      	adds	r3, #27
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0204 	and.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10c      	bne.n	80027f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	331b      	adds	r3, #27
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	4413      	add	r3, r2
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0d5b      	lsrs	r3, r3, #21
 80027ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e00b      	b.n	800280e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	331b      	adds	r3, #27
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4413      	add	r3, r2
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	331b      	adds	r3, #27
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0202 	and.w	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	331b      	adds	r3, #27
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2208      	movs	r2, #8
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	e00b      	b.n	800285c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	331b      	adds	r3, #27
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	331b      	adds	r3, #27
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b2da      	uxtb	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	331b      	adds	r3, #27
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	4413      	add	r3, r2
 8002896:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0a1a      	lsrs	r2, r3, #8
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0c1a      	lsrs	r2, r3, #16
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	3302      	adds	r3, #2
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	4413      	add	r3, r2
 80028e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e1a      	lsrs	r2, r3, #24
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3303      	adds	r3, #3
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3304      	adds	r3, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4413      	add	r3, r2
 8002912:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0a1a      	lsrs	r2, r3, #8
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3305      	adds	r3, #5
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	4413      	add	r3, r2
 800292c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0c1a      	lsrs	r2, r3, #16
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3306      	adds	r3, #6
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4413      	add	r3, r2
 8002946:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e1a      	lsrs	r2, r3, #24
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3307      	adds	r3, #7
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	e007      	b.n	800297e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e006      	b.n	8002990 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d002      	beq.n	80029b8 <HAL_CAN_ActivateNotification+0x1e>
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d109      	bne.n	80029cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6959      	ldr	r1, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e006      	b.n	80029da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d07c      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d023      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f983 	bl	8002d52 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a4c:	e016      	b.n	8002a7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	e00c      	b.n	8002a7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a74:	e002      	b.n	8002a7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f986 	bl	8002d88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f962 	bl	8002d64 <HAL_CAN_TxMailbox1CompleteCallback>
 8002aa0:	e016      	b.n	8002ad0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab4:	e00c      	b.n	8002ad0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	e002      	b.n	8002ad0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f965 	bl	8002d9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d024      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ae2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f941 	bl	8002d76 <HAL_CAN_TxMailbox2CompleteCallback>
 8002af4:	e016      	b.n	8002b24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b08:	e00c      	b.n	8002b24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1c:	e002      	b.n	8002b24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f944 	bl	8002dac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f933 	bl	8002dd0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f91b 	bl	8002dbe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f90a 	bl	8002de2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fe62 	bl	80018b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8f3 	bl	8002df4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2208      	movs	r2, #8
 8002c28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8eb 	bl	8002e06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d07b      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d072      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	f043 0302 	orr.w	r3, r3, #2
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d043      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d03e      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb2:	2b60      	cmp	r3, #96	@ 0x60
 8002cb4:	d02b      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x32a>
 8002cb6:	2b60      	cmp	r3, #96	@ 0x60
 8002cb8:	d82e      	bhi.n	8002d18 <HAL_CAN_IRQHandler+0x334>
 8002cba:	2b50      	cmp	r3, #80	@ 0x50
 8002cbc:	d022      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x320>
 8002cbe:	2b50      	cmp	r3, #80	@ 0x50
 8002cc0:	d82a      	bhi.n	8002d18 <HAL_CAN_IRQHandler+0x334>
 8002cc2:	2b40      	cmp	r3, #64	@ 0x40
 8002cc4:	d019      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x316>
 8002cc6:	2b40      	cmp	r3, #64	@ 0x40
 8002cc8:	d826      	bhi.n	8002d18 <HAL_CAN_IRQHandler+0x334>
 8002cca:	2b30      	cmp	r3, #48	@ 0x30
 8002ccc:	d010      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x30c>
 8002cce:	2b30      	cmp	r3, #48	@ 0x30
 8002cd0:	d822      	bhi.n	8002d18 <HAL_CAN_IRQHandler+0x334>
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d002      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x2f8>
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d005      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cda:	e01d      	b.n	8002d18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ce4:	e019      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cee:	e014      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cf8:	e00f      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d02:	e00a      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d0c:	e005      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d16:	e000      	b.n	8002d1a <HAL_CAN_IRQHandler+0x336>
            break;
 8002d18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f867 	bl	8002e18 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	@ 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60d3      	str	r3, [r2, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <__NVIC_GetPriorityGrouping+0x18>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f003 0307 	and.w	r3, r3, #7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	db0b      	blt.n	8002eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	4906      	ldr	r1, [pc, #24]	@ (8002ec4 <__NVIC_EnableIRQ+0x34>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	@ (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	@ (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	@ 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f90:	d301      	bcc.n	8002f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <SysTick_Config+0x40>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f7ff ff90 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <SysTick_Config+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <SysTick_Config+0x40>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff2d 	bl	8002e2c <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fec:	f7ff ff42 	bl	8002e74 <__NVIC_GetPriorityGrouping>
 8002ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff90 	bl	8002f1c <NVIC_EncodePriority>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5f 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff35 	bl	8002e90 <__NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffa2 	bl	8002f80 <SysTick_Config>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d008      	beq.n	8003070 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2204      	movs	r2, #4
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e020      	b.n	80030b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d005      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2204      	movs	r2, #4
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e051      	b.n	8003184 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 020e 	bic.w	r2, r2, #14
 80030ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a22      	ldr	r2, [pc, #136]	@ (8003190 <HAL_DMA_Abort_IT+0xd4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d029      	beq.n	800315e <HAL_DMA_Abort_IT+0xa2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <HAL_DMA_Abort_IT+0xd8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort_IT+0x9e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <HAL_DMA_Abort_IT+0xdc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01a      	beq.n	8003154 <HAL_DMA_Abort_IT+0x98>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_DMA_Abort_IT+0xe0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d012      	beq.n	800314e <HAL_DMA_Abort_IT+0x92>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1c      	ldr	r2, [pc, #112]	@ (80031a0 <HAL_DMA_Abort_IT+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00a      	beq.n	8003148 <HAL_DMA_Abort_IT+0x8c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_DMA_Abort_IT+0xe8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d102      	bne.n	8003142 <HAL_DMA_Abort_IT+0x86>
 800313c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003140:	e00e      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 8003142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003146:	e00b      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 8003148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800314c:	e008      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 800314e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003152:	e005      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 8003154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003158:	e002      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 800315a:	2310      	movs	r3, #16
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort_IT+0xa4>
 800315e:	2301      	movs	r3, #1
 8003160:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <HAL_DMA_Abort_IT+0xec>)
 8003162:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
    } 
  }
  return status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40020008 	.word	0x40020008
 8003194:	4002001c 	.word	0x4002001c
 8003198:	40020030 	.word	0x40020030
 800319c:	40020044 	.word	0x40020044
 80031a0:	40020058 	.word	0x40020058
 80031a4:	4002006c 	.word	0x4002006c
 80031a8:	40020000 	.word	0x40020000

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b08b      	sub	sp, #44	@ 0x2c
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031be:	e169      	b.n	8003494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031c0:	2201      	movs	r2, #1
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f040 8158 	bne.w	800348e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a9a      	ldr	r2, [pc, #616]	@ (800344c <HAL_GPIO_Init+0x2a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d05e      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
 80031e8:	4a98      	ldr	r2, [pc, #608]	@ (800344c <HAL_GPIO_Init+0x2a0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d875      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 80031ee:	4a98      	ldr	r2, [pc, #608]	@ (8003450 <HAL_GPIO_Init+0x2a4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d058      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
 80031f4:	4a96      	ldr	r2, [pc, #600]	@ (8003450 <HAL_GPIO_Init+0x2a4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d86f      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 80031fa:	4a96      	ldr	r2, [pc, #600]	@ (8003454 <HAL_GPIO_Init+0x2a8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d052      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
 8003200:	4a94      	ldr	r2, [pc, #592]	@ (8003454 <HAL_GPIO_Init+0x2a8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d869      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 8003206:	4a94      	ldr	r2, [pc, #592]	@ (8003458 <HAL_GPIO_Init+0x2ac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04c      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
 800320c:	4a92      	ldr	r2, [pc, #584]	@ (8003458 <HAL_GPIO_Init+0x2ac>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d863      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 8003212:	4a92      	ldr	r2, [pc, #584]	@ (800345c <HAL_GPIO_Init+0x2b0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d046      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
 8003218:	4a90      	ldr	r2, [pc, #576]	@ (800345c <HAL_GPIO_Init+0x2b0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d85d      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 800321e:	2b12      	cmp	r3, #18
 8003220:	d82a      	bhi.n	8003278 <HAL_GPIO_Init+0xcc>
 8003222:	2b12      	cmp	r3, #18
 8003224:	d859      	bhi.n	80032da <HAL_GPIO_Init+0x12e>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_GPIO_Init+0x80>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	080032a7 	.word	0x080032a7
 8003230:	08003281 	.word	0x08003281
 8003234:	08003293 	.word	0x08003293
 8003238:	080032d5 	.word	0x080032d5
 800323c:	080032db 	.word	0x080032db
 8003240:	080032db 	.word	0x080032db
 8003244:	080032db 	.word	0x080032db
 8003248:	080032db 	.word	0x080032db
 800324c:	080032db 	.word	0x080032db
 8003250:	080032db 	.word	0x080032db
 8003254:	080032db 	.word	0x080032db
 8003258:	080032db 	.word	0x080032db
 800325c:	080032db 	.word	0x080032db
 8003260:	080032db 	.word	0x080032db
 8003264:	080032db 	.word	0x080032db
 8003268:	080032db 	.word	0x080032db
 800326c:	080032db 	.word	0x080032db
 8003270:	08003289 	.word	0x08003289
 8003274:	0800329d 	.word	0x0800329d
 8003278:	4a79      	ldr	r2, [pc, #484]	@ (8003460 <HAL_GPIO_Init+0x2b4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800327e:	e02c      	b.n	80032da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	623b      	str	r3, [r7, #32]
          break;
 8003286:	e029      	b.n	80032dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	3304      	adds	r3, #4
 800328e:	623b      	str	r3, [r7, #32]
          break;
 8003290:	e024      	b.n	80032dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	3308      	adds	r3, #8
 8003298:	623b      	str	r3, [r7, #32]
          break;
 800329a:	e01f      	b.n	80032dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	330c      	adds	r3, #12
 80032a2:	623b      	str	r3, [r7, #32]
          break;
 80032a4:	e01a      	b.n	80032dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032ae:	2304      	movs	r3, #4
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e013      	b.n	80032dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032bc:	2308      	movs	r3, #8
 80032be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	611a      	str	r2, [r3, #16]
          break;
 80032c6:	e009      	b.n	80032dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032c8:	2308      	movs	r3, #8
 80032ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	615a      	str	r2, [r3, #20]
          break;
 80032d2:	e003      	b.n	80032dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
          break;
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x130>
          break;
 80032da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2bff      	cmp	r3, #255	@ 0xff
 80032e0:	d801      	bhi.n	80032e6 <HAL_GPIO_Init+0x13a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	e001      	b.n	80032ea <HAL_GPIO_Init+0x13e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d802      	bhi.n	80032f8 <HAL_GPIO_Init+0x14c>
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	e002      	b.n	80032fe <HAL_GPIO_Init+0x152>
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	3b08      	subs	r3, #8
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	210f      	movs	r1, #15
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	6a39      	ldr	r1, [r7, #32]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	431a      	orrs	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80b1 	beq.w	800348e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800332c:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_GPIO_Init+0x2b8>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	4a4c      	ldr	r2, [pc, #304]	@ (8003464 <HAL_GPIO_Init+0x2b8>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6193      	str	r3, [r2, #24]
 8003338:	4b4a      	ldr	r3, [pc, #296]	@ (8003464 <HAL_GPIO_Init+0x2b8>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003344:	4a48      	ldr	r2, [pc, #288]	@ (8003468 <HAL_GPIO_Init+0x2bc>)
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a40      	ldr	r2, [pc, #256]	@ (800346c <HAL_GPIO_Init+0x2c0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_GPIO_Init+0x1ec>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3f      	ldr	r2, [pc, #252]	@ (8003470 <HAL_GPIO_Init+0x2c4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00d      	beq.n	8003394 <HAL_GPIO_Init+0x1e8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3e      	ldr	r2, [pc, #248]	@ (8003474 <HAL_GPIO_Init+0x2c8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <HAL_GPIO_Init+0x1e4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3d      	ldr	r2, [pc, #244]	@ (8003478 <HAL_GPIO_Init+0x2cc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_GPIO_Init+0x1e0>
 8003388:	2303      	movs	r3, #3
 800338a:	e006      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 800338c:	2304      	movs	r3, #4
 800338e:	e004      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003390:	2302      	movs	r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_GPIO_Init+0x1ee>
 8003398:	2300      	movs	r3, #0
 800339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339c:	f002 0203 	and.w	r2, r2, #3
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	4093      	lsls	r3, r2
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033aa:	492f      	ldr	r1, [pc, #188]	@ (8003468 <HAL_GPIO_Init+0x2bc>)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033c4:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	492c      	ldr	r1, [pc, #176]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033d2:	4b2a      	ldr	r3, [pc, #168]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	43db      	mvns	r3, r3
 80033da:	4928      	ldr	r1, [pc, #160]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ec:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	4922      	ldr	r1, [pc, #136]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	43db      	mvns	r3, r3
 8003402:	491e      	ldr	r1, [pc, #120]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 8003404:	4013      	ands	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003414:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4918      	ldr	r1, [pc, #96]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003422:	4b16      	ldr	r3, [pc, #88]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	43db      	mvns	r3, r3
 800342a:	4914      	ldr	r1, [pc, #80]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 800342c:	4013      	ands	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	490e      	ldr	r1, [pc, #56]	@ (800347c <HAL_GPIO_Init+0x2d0>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	e021      	b.n	800348e <HAL_GPIO_Init+0x2e2>
 800344a:	bf00      	nop
 800344c:	10320000 	.word	0x10320000
 8003450:	10310000 	.word	0x10310000
 8003454:	10220000 	.word	0x10220000
 8003458:	10210000 	.word	0x10210000
 800345c:	10120000 	.word	0x10120000
 8003460:	10110000 	.word	0x10110000
 8003464:	40021000 	.word	0x40021000
 8003468:	40010000 	.word	0x40010000
 800346c:	40010800 	.word	0x40010800
 8003470:	40010c00 	.word	0x40010c00
 8003474:	40011000 	.word	0x40011000
 8003478:	40011400 	.word	0x40011400
 800347c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_GPIO_Init+0x304>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	43db      	mvns	r3, r3
 8003488:	4909      	ldr	r1, [pc, #36]	@ (80034b0 <HAL_GPIO_Init+0x304>)
 800348a:	4013      	ands	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	3301      	adds	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f ae8e 	bne.w	80031c0 <HAL_GPIO_Init+0x14>
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	372c      	adds	r7, #44	@ 0x2c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e272      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
 80034ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b89      	ldr	r3, [pc, #548]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x12c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e24c      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x76>
 800351c:	4b80      	ldr	r3, [pc, #512]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b7b      	ldr	r3, [pc, #492]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b78      	ldr	r3, [pc, #480]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xbc>
 8003556:	4b72      	ldr	r3, [pc, #456]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a71      	ldr	r2, [pc, #452]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6f      	ldr	r3, [pc, #444]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 8003570:	4b6b      	ldr	r3, [pc, #428]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6a      	ldr	r2, [pc, #424]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b68      	ldr	r3, [pc, #416]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fdde 	bl	8002150 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fdda 	bl	8002150 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	@ 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e200      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe4>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fdca 	bl	8002150 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fe fdc6 	bl	8002150 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	@ 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ec      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x10c>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fa:	4b49      	ldr	r3, [pc, #292]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
 8003606:	4b46      	ldr	r3, [pc, #280]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b43      	ldr	r3, [pc, #268]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c0      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4939      	ldr	r1, [pc, #228]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <HAL_RCC_OscConfig+0x270>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fd7f 	bl	8002150 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fd7b 	bl	8002150 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4927      	ldr	r1, [pc, #156]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b26      	ldr	r3, [pc, #152]	@ (8003724 <HAL_RCC_OscConfig+0x270>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe fd5e 	bl	8002150 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe fd5a 	bl	8002150 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e180      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03a      	beq.n	8003738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b17      	ldr	r3, [pc, #92]	@ (8003728 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fd3e 	bl	8002150 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe fd3a 	bl	8002150 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e160      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 face 	bl	8003c98 <RCC_Delay>
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_OscConfig+0x274>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fd24 	bl	8002150 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe fd20 	bl	8002150 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d908      	bls.n	800372c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e146      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	42420000 	.word	0x42420000
 8003728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b92      	ldr	r3, [pc, #584]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e9      	bne.n	800370c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b8b      	ldr	r3, [pc, #556]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a87      	ldr	r2, [pc, #540]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b85      	ldr	r3, [pc, #532]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b82      	ldr	r3, [pc, #520]	@ (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fe fce1 	bl	8002150 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe fcdd 	bl	8002150 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	@ 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e103      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b75      	ldr	r3, [pc, #468]	@ (800397c <HAL_RCC_OscConfig+0x4c8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x312>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e02d      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a69      	ldr	r2, [pc, #420]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b67      	ldr	r3, [pc, #412]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e01c      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0x356>
 80037f0:	4b61      	ldr	r3, [pc, #388]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a60      	ldr	r2, [pc, #384]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a5d      	ldr	r2, [pc, #372]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a5a      	ldr	r2, [pc, #360]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b58      	ldr	r3, [pc, #352]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a57      	ldr	r2, [pc, #348]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fe fc91 	bl	8002150 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fc8d 	bl	8002150 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0b1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCC_OscConfig+0x37e>
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe fc7b 	bl	8002150 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe fc77 	bl	8002150 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e09b      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	4b40      	ldr	r3, [pc, #256]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a3b      	ldr	r2, [pc, #236]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d061      	beq.n	800396c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d146      	bne.n	800393e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b33      	ldr	r3, [pc, #204]	@ (8003980 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fc4b 	bl	8002150 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fc47 	bl	8002150 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e06d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d0:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e6:	4b24      	ldr	r3, [pc, #144]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4921      	ldr	r1, [pc, #132]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a19      	ldr	r1, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	491b      	ldr	r1, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fc1b 	bl	8002150 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fc17 	bl	8002150 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x46a>
 800393c:	e035      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fc04 	bl	8002150 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fc00 	bl	8002150 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e026      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x498>
 800396a:	e01e      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e019      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <HAL_RCC_OscConfig+0x500>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b67      	ldr	r3, [pc, #412]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4965      	ldr	r1, [pc, #404]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d040      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e073      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3d      	ldr	r3, [pc, #244]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b39      	ldr	r3, [pc, #228]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4936      	ldr	r1, [pc, #216]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fb52 	bl	8002150 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fb4e 	bl	8002150 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d210      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4922      	ldr	r1, [pc, #136]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x1cc>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <HAL_RCC_ClockConfig+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fab0 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08009cdc 	.word	0x08009cdc
 8003b84:	20000020 	.word	0x20000020
 8003b88:	20000024 	.word	0x20000024

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x30>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bba:	e027      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bbe:	613b      	str	r3, [r7, #16]
      break;
 8003bc0:	e027      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0c9b      	lsrs	r3, r3, #18
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bcc:	5cd3      	ldrb	r3, [r2, r3]
 8003bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bda:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	0c5b      	lsrs	r3, r3, #17
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	4a11      	ldr	r2, [pc, #68]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	fb03 f202 	mul.w	r2, r3, r2
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e004      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0e:	613b      	str	r3, [r7, #16]
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	693b      	ldr	r3, [r7, #16]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	007a1200 	.word	0x007a1200
 8003c28:	08009cf4 	.word	0x08009cf4
 8003c2c:	08009d04 	.word	0x08009d04
 8003c30:	003d0900 	.word	0x003d0900

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b02      	ldr	r3, [pc, #8]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000020 	.word	0x20000020

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff2 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08009cec 	.word	0x08009cec

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	@ (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08009cec 	.word	0x08009cec

08003c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <RCC_Delay+0x34>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <RCC_Delay+0x38>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0a5b      	lsrs	r3, r3, #9
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cb4:	bf00      	nop
  }
  while (Delay --);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <RCC_Delay+0x1c>
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000020 	.word	0x20000020
 8003cd0:	10624dd3 	.word	0x10624dd3

08003cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e042      	b.n	8003d6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe f84e 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	@ 0x24
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fdb7 	bl	800488c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d175      	bne.n	8003e80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Transmit+0x2c>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e06e      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2221      	movs	r2, #33	@ 0x21
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db2:	f7fe f9cd 	bl	8002150 <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x6c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003de8:	e02e      	b.n	8003e48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb1c 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e03a      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3302      	adds	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e007      	b.n	8003e3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2140      	movs	r1, #64	@ 0x40
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fae8 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d112      	bne.n	8003eca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Receive_IT+0x26>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e00b      	b.n	8003ecc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fb0f 	bl	80044e4 <UART_Start_Receive_IT>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	e000      	b.n	8003ecc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_UART_IRQHandler+0x66>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fbec 	bl	8004710 <UART_Receive_IT>
      return;
 8003f38:	e25b      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80de 	beq.w	8004100 <HAL_UART_IRQHandler+0x22c>
 8003f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80d1 	beq.w	8004100 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xae>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xd2>
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_UART_IRQHandler+0xf6>
 8003fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_UART_IRQHandler+0x126>
 8003fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 81f2 	beq.w	80043e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_UART_IRQHandler+0x14e>
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb77 	bl	8004710 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <HAL_UART_IRQHandler+0x17a>
 8004046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d04f      	beq.n	80040ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa81 	bl	8004556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d041      	beq.n	80040e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800407c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800408e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800409a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1d9      	bne.n	8004062 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d013      	beq.n	80040de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	4a7e      	ldr	r2, [pc, #504]	@ (80042b4 <HAL_UART_IRQHandler+0x3e0>)
 80040bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fffa 	bl	80030bc <HAL_DMA_Abort_IT>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040d8:	4610      	mov	r0, r2
 80040da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00e      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f993 	bl	800440a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e00a      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f98f 	bl	800440a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e006      	b.n	80040fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f98b 	bl	800440a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040fa:	e175      	b.n	80043e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	bf00      	nop
    return;
 80040fe:	e173      	b.n	80043e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 814f 	bne.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8148 	beq.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8141 	beq.w	80043a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80b6 	beq.w	80042b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004158:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8145 	beq.w	80043ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416a:	429a      	cmp	r2, r3
 800416c:	f080 813e 	bcs.w	80043ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004176:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b20      	cmp	r3, #32
 8004180:	f000 8088 	beq.w	8004294 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800419a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800419e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1d9      	bne.n	8004184 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e1      	bne.n	80041d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3314      	adds	r3, #20
 8004212:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800421c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800421e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004230:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004232:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004236:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800423e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004276:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004278:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800427c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e3      	bne.n	8004252 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fed9 	bl	8003046 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8b6 	bl	800441c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b0:	e09c      	b.n	80043ec <HAL_UART_IRQHandler+0x518>
 80042b2:	bf00      	nop
 80042b4:	0800461b 	.word	0x0800461b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 808e 	beq.w	80043f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8089 	beq.w	80043f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004302:	647a      	str	r2, [r7, #68]	@ 0x44
 8004304:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	623b      	str	r3, [r7, #32]
   return(result);
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800433a:	633a      	str	r2, [r7, #48]	@ 0x30
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60fb      	str	r3, [r7, #12]
   return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	617b      	str	r3, [r7, #20]
   return(result);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f83b 	bl	800441c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a6:	e023      	b.n	80043f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_UART_IRQHandler+0x4f4>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f93e 	bl	8004642 <UART_Transmit_IT>
    return;
 80043c6:	e014      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <HAL_UART_IRQHandler+0x51e>
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f97d 	bl	80046e0 <UART_EndTransmit_IT>
    return;
 80043e6:	e004      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
  }
}
 80043f2:	37e8      	adds	r7, #232	@ 0xe8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	e03b      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d037      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fd fe80 	bl	8002150 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <UART_WaitOnFlagUntilTimeout+0x30>
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e03a      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b80      	cmp	r3, #128	@ 0x80
 8004478:	d020      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d01d      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b08      	cmp	r3, #8
 800448c:	d116      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f856 	bl	8004556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2208      	movs	r2, #8
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e00f      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d0b4      	beq.n	8004444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2222      	movs	r2, #34	@ 0x22
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004528:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0220 	orr.w	r2, r2, #32
 8004548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b095      	sub	sp, #84	@ 0x54
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e5      	bne.n	8004592 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d119      	bne.n	8004602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f023 0310 	bic.w	r3, r3, #16
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ee:	61ba      	str	r2, [r7, #24]
 80045f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6979      	ldr	r1, [r7, #20]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	613b      	str	r3, [r7, #16]
   return(result);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e5      	bne.n	80045ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004610:	bf00      	nop
 8004612:	3754      	adds	r7, #84	@ 0x54
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fee8 	bl	800440a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b21      	cmp	r3, #33	@ 0x21
 8004654:	d13e      	bne.n	80046d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465e:	d114      	bne.n	800468a <UART_Transmit_IT+0x48>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d110      	bne.n	800468a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	621a      	str	r2, [r3, #32]
 8004688:	e008      	b.n	800469c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6211      	str	r1, [r2, #32]
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10f      	bne.n	80046d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff fe79 	bl	80043f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	@ 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b22      	cmp	r3, #34	@ 0x22
 8004722:	f040 80ae 	bne.w	8004882 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472e:	d117      	bne.n	8004760 <UART_Receive_IT+0x50>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d113      	bne.n	8004760 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	b29a      	uxth	r2, r3
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	1c9a      	adds	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	629a      	str	r2, [r3, #40]	@ 0x28
 800475e:	e026      	b.n	80047ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004772:	d007      	beq.n	8004784 <UART_Receive_IT+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <UART_Receive_IT+0x82>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e008      	b.n	80047a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4619      	mov	r1, r3
 80047bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d15d      	bne.n	800487e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0220 	bic.w	r2, r2, #32
 80047d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	2b01      	cmp	r3, #1
 8004806:	d135      	bne.n	8004874 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f023 0310 	bic.w	r3, r3, #16
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482e:	623a      	str	r2, [r7, #32]
 8004830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d10a      	bne.n	8004866 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fdd5 	bl	800441c <HAL_UARTEx_RxEventCallback>
 8004872:	e002      	b.n	800487a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fe3f 	bl	80014f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e002      	b.n	8004884 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3730      	adds	r7, #48	@ 0x30
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048c6:	f023 030c 	bic.w	r3, r3, #12
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	@ (80049a0 <UART_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7ff f9bc 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	e002      	b.n	8004902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048fc:	f7ff f9a4 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8004900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	4a22      	ldr	r2, [pc, #136]	@ (80049a4 <UART_SetConfig+0x118>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	0119      	lsls	r1, r3, #4
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009a      	lsls	r2, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <UART_SetConfig+0x118>)
 800493a:	fba3 0302 	umull	r0, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2064      	movs	r0, #100	@ 0x64
 8004942:	fb00 f303 	mul.w	r3, r0, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	3332      	adds	r3, #50	@ 0x32
 800494c:	4a15      	ldr	r2, [pc, #84]	@ (80049a4 <UART_SetConfig+0x118>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004958:	4419      	add	r1, r3
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <UART_SetConfig+0x118>)
 8004972:	fba3 0302 	umull	r0, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2064      	movs	r0, #100	@ 0x64
 800497a:	fb00 f303 	mul.w	r3, r0, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	@ 0x32
 8004984:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <UART_SetConfig+0x118>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	440a      	add	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40013800 	.word	0x40013800
 80049a4:	51eb851f 	.word	0x51eb851f

080049a8 <__cvt>:
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ae:	461d      	mov	r5, r3
 80049b0:	bfbb      	ittet	lt
 80049b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80049b6:	461d      	movlt	r5, r3
 80049b8:	2300      	movge	r3, #0
 80049ba:	232d      	movlt	r3, #45	@ 0x2d
 80049bc:	b088      	sub	sp, #32
 80049be:	4614      	mov	r4, r2
 80049c0:	bfb8      	it	lt
 80049c2:	4614      	movlt	r4, r2
 80049c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80049c8:	7013      	strb	r3, [r2, #0]
 80049ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80049d0:	f023 0820 	bic.w	r8, r3, #32
 80049d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049d8:	d005      	beq.n	80049e6 <__cvt+0x3e>
 80049da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049de:	d100      	bne.n	80049e2 <__cvt+0x3a>
 80049e0:	3601      	adds	r6, #1
 80049e2:	2302      	movs	r3, #2
 80049e4:	e000      	b.n	80049e8 <__cvt+0x40>
 80049e6:	2303      	movs	r3, #3
 80049e8:	aa07      	add	r2, sp, #28
 80049ea:	9204      	str	r2, [sp, #16]
 80049ec:	aa06      	add	r2, sp, #24
 80049ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049f2:	e9cd 3600 	strd	r3, r6, [sp]
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	f001 f8e1 	bl	8005bc0 <_dtoa_r>
 80049fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a02:	4607      	mov	r7, r0
 8004a04:	d119      	bne.n	8004a3a <__cvt+0x92>
 8004a06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a08:	07db      	lsls	r3, r3, #31
 8004a0a:	d50e      	bpl.n	8004a2a <__cvt+0x82>
 8004a0c:	eb00 0906 	add.w	r9, r0, r6
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb ffd0 	bl	80009bc <__aeabi_dcmpeq>
 8004a1c:	b108      	cbz	r0, 8004a22 <__cvt+0x7a>
 8004a1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a22:	2230      	movs	r2, #48	@ 0x30
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	454b      	cmp	r3, r9
 8004a28:	d31e      	bcc.n	8004a68 <__cvt+0xc0>
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	9b07      	ldr	r3, [sp, #28]
 8004a2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a30:	1bdb      	subs	r3, r3, r7
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	b008      	add	sp, #32
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a3e:	eb00 0906 	add.w	r9, r0, r6
 8004a42:	d1e5      	bne.n	8004a10 <__cvt+0x68>
 8004a44:	7803      	ldrb	r3, [r0, #0]
 8004a46:	2b30      	cmp	r3, #48	@ 0x30
 8004a48:	d10a      	bne.n	8004a60 <__cvt+0xb8>
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb ffb3 	bl	80009bc <__aeabi_dcmpeq>
 8004a56:	b918      	cbnz	r0, 8004a60 <__cvt+0xb8>
 8004a58:	f1c6 0601 	rsb	r6, r6, #1
 8004a5c:	f8ca 6000 	str.w	r6, [sl]
 8004a60:	f8da 3000 	ldr.w	r3, [sl]
 8004a64:	4499      	add	r9, r3
 8004a66:	e7d3      	b.n	8004a10 <__cvt+0x68>
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	9107      	str	r1, [sp, #28]
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e7d9      	b.n	8004a24 <__cvt+0x7c>

08004a70 <__exponent>:
 8004a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a72:	2900      	cmp	r1, #0
 8004a74:	bfb6      	itet	lt
 8004a76:	232d      	movlt	r3, #45	@ 0x2d
 8004a78:	232b      	movge	r3, #43	@ 0x2b
 8004a7a:	4249      	neglt	r1, r1
 8004a7c:	2909      	cmp	r1, #9
 8004a7e:	7002      	strb	r2, [r0, #0]
 8004a80:	7043      	strb	r3, [r0, #1]
 8004a82:	dd29      	ble.n	8004ad8 <__exponent+0x68>
 8004a84:	f10d 0307 	add.w	r3, sp, #7
 8004a88:	461d      	mov	r5, r3
 8004a8a:	270a      	movs	r7, #10
 8004a8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a90:	461a      	mov	r2, r3
 8004a92:	fb07 1416 	mls	r4, r7, r6, r1
 8004a96:	3430      	adds	r4, #48	@ 0x30
 8004a98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	2c63      	cmp	r4, #99	@ 0x63
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aa6:	dcf1      	bgt.n	8004a8c <__exponent+0x1c>
 8004aa8:	3130      	adds	r1, #48	@ 0x30
 8004aaa:	1e94      	subs	r4, r2, #2
 8004aac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	1c41      	adds	r1, r0, #1
 8004ab4:	42ab      	cmp	r3, r5
 8004ab6:	d30a      	bcc.n	8004ace <__exponent+0x5e>
 8004ab8:	f10d 0309 	add.w	r3, sp, #9
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	42ac      	cmp	r4, r5
 8004ac0:	bf88      	it	hi
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	4403      	add	r3, r0
 8004ac8:	1a18      	subs	r0, r3, r0
 8004aca:	b003      	add	sp, #12
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ad2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ad6:	e7ed      	b.n	8004ab4 <__exponent+0x44>
 8004ad8:	2330      	movs	r3, #48	@ 0x30
 8004ada:	3130      	adds	r1, #48	@ 0x30
 8004adc:	7083      	strb	r3, [r0, #2]
 8004ade:	70c1      	strb	r1, [r0, #3]
 8004ae0:	1d03      	adds	r3, r0, #4
 8004ae2:	e7f1      	b.n	8004ac8 <__exponent+0x58>

08004ae4 <_printf_float>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	b091      	sub	sp, #68	@ 0x44
 8004aea:	460c      	mov	r4, r1
 8004aec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004af0:	4616      	mov	r6, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	4605      	mov	r5, r0
 8004af6:	f000 ff51 	bl	800599c <_localeconv_r>
 8004afa:	6803      	ldr	r3, [r0, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	9308      	str	r3, [sp, #32]
 8004b00:	f7fb fb30 	bl	8000164 <strlen>
 8004b04:	2300      	movs	r3, #0
 8004b06:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b08:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b0e:	3307      	adds	r3, #7
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	f103 0208 	add.w	r2, r3, #8
 8004b18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b1c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b20:	f8c8 2000 	str.w	r2, [r8]
 8004b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b2e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295
 8004b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b3e:	4b9c      	ldr	r3, [pc, #624]	@ (8004db0 <_printf_float+0x2cc>)
 8004b40:	f7fb ff6e 	bl	8000a20 <__aeabi_dcmpun>
 8004b44:	bb70      	cbnz	r0, 8004ba4 <_printf_float+0xc0>
 8004b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	4b98      	ldr	r3, [pc, #608]	@ (8004db0 <_printf_float+0x2cc>)
 8004b50:	f7fb ff48 	bl	80009e4 <__aeabi_dcmple>
 8004b54:	bb30      	cbnz	r0, 8004ba4 <_printf_float+0xc0>
 8004b56:	2200      	movs	r2, #0
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	f7fb ff37 	bl	80009d0 <__aeabi_dcmplt>
 8004b62:	b110      	cbz	r0, 8004b6a <_printf_float+0x86>
 8004b64:	232d      	movs	r3, #45	@ 0x2d
 8004b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b6a:	4a92      	ldr	r2, [pc, #584]	@ (8004db4 <_printf_float+0x2d0>)
 8004b6c:	4b92      	ldr	r3, [pc, #584]	@ (8004db8 <_printf_float+0x2d4>)
 8004b6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b72:	bf94      	ite	ls
 8004b74:	4690      	movls	r8, r2
 8004b76:	4698      	movhi	r8, r3
 8004b78:	2303      	movs	r3, #3
 8004b7a:	f04f 0900 	mov.w	r9, #0
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	f02b 0304 	bic.w	r3, fp, #4
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	4633      	mov	r3, r6
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	9700      	str	r7, [sp, #0]
 8004b8e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004b90:	f000 f9d4 	bl	8004f3c <_printf_common>
 8004b94:	3001      	adds	r0, #1
 8004b96:	f040 8090 	bne.w	8004cba <_printf_float+0x1d6>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	b011      	add	sp, #68	@ 0x44
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4649      	mov	r1, r9
 8004bac:	f7fb ff38 	bl	8000a20 <__aeabi_dcmpun>
 8004bb0:	b148      	cbz	r0, 8004bc6 <_printf_float+0xe2>
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bfb8      	it	lt
 8004bb8:	232d      	movlt	r3, #45	@ 0x2d
 8004bba:	4a80      	ldr	r2, [pc, #512]	@ (8004dbc <_printf_float+0x2d8>)
 8004bbc:	bfb8      	it	lt
 8004bbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc0 <_printf_float+0x2dc>)
 8004bc4:	e7d3      	b.n	8004b6e <_printf_float+0x8a>
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	d13f      	bne.n	8004c50 <_printf_float+0x16c>
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	6063      	str	r3, [r4, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	9206      	str	r2, [sp, #24]
 8004bde:	aa0e      	add	r2, sp, #56	@ 0x38
 8004be0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004be4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004be6:	9203      	str	r2, [sp, #12]
 8004be8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004bec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bfc:	f7ff fed4 	bl	80049a8 <__cvt>
 8004c00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c02:	4680      	mov	r8, r0
 8004c04:	2947      	cmp	r1, #71	@ 0x47
 8004c06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c08:	d128      	bne.n	8004c5c <_printf_float+0x178>
 8004c0a:	1cc8      	adds	r0, r1, #3
 8004c0c:	db02      	blt.n	8004c14 <_printf_float+0x130>
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	4299      	cmp	r1, r3
 8004c12:	dd40      	ble.n	8004c96 <_printf_float+0x1b2>
 8004c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c18:	fa5f fa8a 	uxtb.w	sl, sl
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	3901      	subs	r1, #1
 8004c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c24:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c26:	f7ff ff23 	bl	8004a70 <__exponent>
 8004c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c2c:	4681      	mov	r9, r0
 8004c2e:	1813      	adds	r3, r2, r0
 8004c30:	2a01      	cmp	r2, #1
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	dc02      	bgt.n	8004c3c <_printf_float+0x158>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	07d2      	lsls	r2, r2, #31
 8004c3a:	d501      	bpl.n	8004c40 <_printf_float+0x15c>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d09e      	beq.n	8004b86 <_printf_float+0xa2>
 8004c48:	232d      	movs	r3, #45	@ 0x2d
 8004c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c4e:	e79a      	b.n	8004b86 <_printf_float+0xa2>
 8004c50:	2947      	cmp	r1, #71	@ 0x47
 8004c52:	d1bf      	bne.n	8004bd4 <_printf_float+0xf0>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1bd      	bne.n	8004bd4 <_printf_float+0xf0>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e7ba      	b.n	8004bd2 <_printf_float+0xee>
 8004c5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c60:	d9dc      	bls.n	8004c1c <_printf_float+0x138>
 8004c62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c66:	d118      	bne.n	8004c9a <_printf_float+0x1b6>
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	dd0b      	ble.n	8004c86 <_printf_float+0x1a2>
 8004c6e:	6121      	str	r1, [r4, #16]
 8004c70:	b913      	cbnz	r3, 8004c78 <_printf_float+0x194>
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	07d0      	lsls	r0, r2, #31
 8004c76:	d502      	bpl.n	8004c7e <_printf_float+0x19a>
 8004c78:	3301      	adds	r3, #1
 8004c7a:	440b      	add	r3, r1
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	f04f 0900 	mov.w	r9, #0
 8004c82:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c84:	e7dc      	b.n	8004c40 <_printf_float+0x15c>
 8004c86:	b913      	cbnz	r3, 8004c8e <_printf_float+0x1aa>
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	07d2      	lsls	r2, r2, #31
 8004c8c:	d501      	bpl.n	8004c92 <_printf_float+0x1ae>
 8004c8e:	3302      	adds	r3, #2
 8004c90:	e7f4      	b.n	8004c7c <_printf_float+0x198>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7f2      	b.n	8004c7c <_printf_float+0x198>
 8004c96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	db05      	blt.n	8004cac <_printf_float+0x1c8>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	6121      	str	r1, [r4, #16]
 8004ca4:	07d8      	lsls	r0, r3, #31
 8004ca6:	d5ea      	bpl.n	8004c7e <_printf_float+0x19a>
 8004ca8:	1c4b      	adds	r3, r1, #1
 8004caa:	e7e7      	b.n	8004c7c <_printf_float+0x198>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	bfcc      	ite	gt
 8004cb0:	2201      	movgt	r2, #1
 8004cb2:	f1c1 0202 	rsble	r2, r1, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	e7e0      	b.n	8004c7c <_printf_float+0x198>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	055a      	lsls	r2, r3, #21
 8004cbe:	d407      	bmi.n	8004cd0 <_printf_float+0x1ec>
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d12b      	bne.n	8004d26 <_printf_float+0x242>
 8004cce:	e764      	b.n	8004b9a <_printf_float+0xb6>
 8004cd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cd4:	f240 80dc 	bls.w	8004e90 <_printf_float+0x3ac>
 8004cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f7fb fe6c 	bl	80009bc <__aeabi_dcmpeq>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d033      	beq.n	8004d50 <_printf_float+0x26c>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	4a35      	ldr	r2, [pc, #212]	@ (8004dc4 <_printf_float+0x2e0>)
 8004cf0:	47b8      	blx	r7
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f43f af51 	beq.w	8004b9a <_printf_float+0xb6>
 8004cf8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004cfc:	4543      	cmp	r3, r8
 8004cfe:	db02      	blt.n	8004d06 <_printf_float+0x222>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	07d8      	lsls	r0, r3, #31
 8004d04:	d50f      	bpl.n	8004d26 <_printf_float+0x242>
 8004d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f af42 	beq.w	8004b9a <_printf_float+0xb6>
 8004d16:	f04f 0900 	mov.w	r9, #0
 8004d1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d1e:	f104 0a1a 	add.w	sl, r4, #26
 8004d22:	45c8      	cmp	r8, r9
 8004d24:	dc09      	bgt.n	8004d3a <_printf_float+0x256>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	079b      	lsls	r3, r3, #30
 8004d2a:	f100 8102 	bmi.w	8004f32 <_printf_float+0x44e>
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d32:	4298      	cmp	r0, r3
 8004d34:	bfb8      	it	lt
 8004d36:	4618      	movlt	r0, r3
 8004d38:	e731      	b.n	8004b9e <_printf_float+0xba>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4652      	mov	r2, sl
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b8      	blx	r7
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f af28 	beq.w	8004b9a <_printf_float+0xb6>
 8004d4a:	f109 0901 	add.w	r9, r9, #1
 8004d4e:	e7e8      	b.n	8004d22 <_printf_float+0x23e>
 8004d50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dc38      	bgt.n	8004dc8 <_printf_float+0x2e4>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4a19      	ldr	r2, [pc, #100]	@ (8004dc4 <_printf_float+0x2e0>)
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f af1a 	beq.w	8004b9a <_printf_float+0xb6>
 8004d66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004d6a:	ea59 0303 	orrs.w	r3, r9, r3
 8004d6e:	d102      	bne.n	8004d76 <_printf_float+0x292>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07d9      	lsls	r1, r3, #31
 8004d74:	d5d7      	bpl.n	8004d26 <_printf_float+0x242>
 8004d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f af0a 	beq.w	8004b9a <_printf_float+0xb6>
 8004d86:	f04f 0a00 	mov.w	sl, #0
 8004d8a:	f104 0b1a 	add.w	fp, r4, #26
 8004d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d90:	425b      	negs	r3, r3
 8004d92:	4553      	cmp	r3, sl
 8004d94:	dc01      	bgt.n	8004d9a <_printf_float+0x2b6>
 8004d96:	464b      	mov	r3, r9
 8004d98:	e793      	b.n	8004cc2 <_printf_float+0x1de>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	465a      	mov	r2, fp
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f aef8 	beq.w	8004b9a <_printf_float+0xb6>
 8004daa:	f10a 0a01 	add.w	sl, sl, #1
 8004dae:	e7ee      	b.n	8004d8e <_printf_float+0x2aa>
 8004db0:	7fefffff 	.word	0x7fefffff
 8004db4:	08009d06 	.word	0x08009d06
 8004db8:	08009d0a 	.word	0x08009d0a
 8004dbc:	08009d0e 	.word	0x08009d0e
 8004dc0:	08009d12 	.word	0x08009d12
 8004dc4:	0800a0a0 	.word	0x0800a0a0
 8004dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004dce:	4553      	cmp	r3, sl
 8004dd0:	bfa8      	it	ge
 8004dd2:	4653      	movge	r3, sl
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	4699      	mov	r9, r3
 8004dd8:	dc36      	bgt.n	8004e48 <_printf_float+0x364>
 8004dda:	f04f 0b00 	mov.w	fp, #0
 8004dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de2:	f104 021a 	add.w	r2, r4, #26
 8004de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004de8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dea:	eba3 0309 	sub.w	r3, r3, r9
 8004dee:	455b      	cmp	r3, fp
 8004df0:	dc31      	bgt.n	8004e56 <_printf_float+0x372>
 8004df2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004df4:	459a      	cmp	sl, r3
 8004df6:	dc3a      	bgt.n	8004e6e <_printf_float+0x38a>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	07da      	lsls	r2, r3, #31
 8004dfc:	d437      	bmi.n	8004e6e <_printf_float+0x38a>
 8004dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e00:	ebaa 0903 	sub.w	r9, sl, r3
 8004e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e06:	ebaa 0303 	sub.w	r3, sl, r3
 8004e0a:	4599      	cmp	r9, r3
 8004e0c:	bfa8      	it	ge
 8004e0e:	4699      	movge	r9, r3
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	dc33      	bgt.n	8004e7e <_printf_float+0x39a>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e1e:	f104 0b1a 	add.w	fp, r4, #26
 8004e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e24:	ebaa 0303 	sub.w	r3, sl, r3
 8004e28:	eba3 0309 	sub.w	r3, r3, r9
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	f77f af7a 	ble.w	8004d26 <_printf_float+0x242>
 8004e32:	2301      	movs	r3, #1
 8004e34:	465a      	mov	r2, fp
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f aeac 	beq.w	8004b9a <_printf_float+0xb6>
 8004e42:	f108 0801 	add.w	r8, r8, #1
 8004e46:	e7ec      	b.n	8004e22 <_printf_float+0x33e>
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1c2      	bne.n	8004dda <_printf_float+0x2f6>
 8004e54:	e6a1      	b.n	8004b9a <_printf_float+0xb6>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae9a 	beq.w	8004b9a <_printf_float+0xb6>
 8004e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e68:	f10b 0b01 	add.w	fp, fp, #1
 8004e6c:	e7bb      	b.n	8004de6 <_printf_float+0x302>
 8004e6e:	4631      	mov	r1, r6
 8004e70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b8      	blx	r7
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d1c0      	bne.n	8004dfe <_printf_float+0x31a>
 8004e7c:	e68d      	b.n	8004b9a <_printf_float+0xb6>
 8004e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e80:	464b      	mov	r3, r9
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	4442      	add	r2, r8
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d1c3      	bne.n	8004e16 <_printf_float+0x332>
 8004e8e:	e684      	b.n	8004b9a <_printf_float+0xb6>
 8004e90:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e94:	f1ba 0f01 	cmp.w	sl, #1
 8004e98:	dc01      	bgt.n	8004e9e <_printf_float+0x3ba>
 8004e9a:	07db      	lsls	r3, r3, #31
 8004e9c:	d536      	bpl.n	8004f0c <_printf_float+0x428>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae76 	beq.w	8004b9a <_printf_float+0xb6>
 8004eae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f ae6e 	beq.w	8004b9a <_printf_float+0xb6>
 8004ebe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eca:	f7fb fd77 	bl	80009bc <__aeabi_dcmpeq>
 8004ece:	b9c0      	cbnz	r0, 8004f02 <_printf_float+0x41e>
 8004ed0:	4653      	mov	r3, sl
 8004ed2:	f108 0201 	add.w	r2, r8, #1
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	d10c      	bne.n	8004efa <_printf_float+0x416>
 8004ee0:	e65b      	b.n	8004b9a <_printf_float+0xb6>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	465a      	mov	r2, fp
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae54 	beq.w	8004b9a <_printf_float+0xb6>
 8004ef2:	f108 0801 	add.w	r8, r8, #1
 8004ef6:	45d0      	cmp	r8, sl
 8004ef8:	dbf3      	blt.n	8004ee2 <_printf_float+0x3fe>
 8004efa:	464b      	mov	r3, r9
 8004efc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f00:	e6e0      	b.n	8004cc4 <_printf_float+0x1e0>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 0b1a 	add.w	fp, r4, #26
 8004f0a:	e7f4      	b.n	8004ef6 <_printf_float+0x412>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4642      	mov	r2, r8
 8004f10:	e7e1      	b.n	8004ed6 <_printf_float+0x3f2>
 8004f12:	2301      	movs	r3, #1
 8004f14:	464a      	mov	r2, r9
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f43f ae3c 	beq.w	8004b9a <_printf_float+0xb6>
 8004f22:	f108 0801 	add.w	r8, r8, #1
 8004f26:	68e3      	ldr	r3, [r4, #12]
 8004f28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f2a:	1a5b      	subs	r3, r3, r1
 8004f2c:	4543      	cmp	r3, r8
 8004f2e:	dcf0      	bgt.n	8004f12 <_printf_float+0x42e>
 8004f30:	e6fd      	b.n	8004d2e <_printf_float+0x24a>
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	f104 0919 	add.w	r9, r4, #25
 8004f3a:	e7f4      	b.n	8004f26 <_printf_float+0x442>

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4616      	mov	r6, r2
 8004f42:	4698      	mov	r8, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	4607      	mov	r7, r0
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bfb8      	it	lt
 8004f4e:	4613      	movlt	r3, r2
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f56:	460c      	mov	r4, r1
 8004f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f5c:	b10a      	cbz	r2, 8004f62 <_printf_common+0x26>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	0699      	lsls	r1, r3, #26
 8004f66:	bf42      	ittt	mi
 8004f68:	6833      	ldrmi	r3, [r6, #0]
 8004f6a:	3302      	addmi	r3, #2
 8004f6c:	6033      	strmi	r3, [r6, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f015 0506 	ands.w	r5, r5, #6
 8004f74:	d106      	bne.n	8004f84 <_printf_common+0x48>
 8004f76:	f104 0a19 	add.w	sl, r4, #25
 8004f7a:	68e3      	ldr	r3, [r4, #12]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	dc2b      	bgt.n	8004fdc <_printf_common+0xa0>
 8004f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	3b00      	subs	r3, #0
 8004f8c:	bf18      	it	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	0692      	lsls	r2, r2, #26
 8004f92:	d430      	bmi.n	8004ff6 <_printf_common+0xba>
 8004f94:	4641      	mov	r1, r8
 8004f96:	4638      	mov	r0, r7
 8004f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f9c:	47c8      	blx	r9
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d023      	beq.n	8004fea <_printf_common+0xae>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	f003 0306 	and.w	r3, r3, #6
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	bf14      	ite	ne
 8004fae:	2500      	movne	r5, #0
 8004fb0:	6833      	ldreq	r3, [r6, #0]
 8004fb2:	f04f 0600 	mov.w	r6, #0
 8004fb6:	bf08      	it	eq
 8004fb8:	68e5      	ldreq	r5, [r4, #12]
 8004fba:	f104 041a 	add.w	r4, r4, #26
 8004fbe:	bf08      	it	eq
 8004fc0:	1aed      	subeq	r5, r5, r3
 8004fc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fc6:	bf08      	it	eq
 8004fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	bfc4      	itt	gt
 8004fd0:	1a9b      	subgt	r3, r3, r2
 8004fd2:	18ed      	addgt	r5, r5, r3
 8004fd4:	42b5      	cmp	r5, r6
 8004fd6:	d11a      	bne.n	800500e <_printf_common+0xd2>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e008      	b.n	8004fee <_printf_common+0xb2>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4652      	mov	r2, sl
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d103      	bne.n	8004ff2 <_printf_common+0xb6>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
 8004fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff2:	3501      	adds	r5, #1
 8004ff4:	e7c1      	b.n	8004f7a <_printf_common+0x3e>
 8004ff6:	2030      	movs	r0, #48	@ 0x30
 8004ff8:	18e1      	adds	r1, r4, r3
 8004ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005004:	4422      	add	r2, r4
 8005006:	3302      	adds	r3, #2
 8005008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800500c:	e7c2      	b.n	8004f94 <_printf_common+0x58>
 800500e:	2301      	movs	r3, #1
 8005010:	4622      	mov	r2, r4
 8005012:	4641      	mov	r1, r8
 8005014:	4638      	mov	r0, r7
 8005016:	47c8      	blx	r9
 8005018:	3001      	adds	r0, #1
 800501a:	d0e6      	beq.n	8004fea <_printf_common+0xae>
 800501c:	3601      	adds	r6, #1
 800501e:	e7d9      	b.n	8004fd4 <_printf_common+0x98>

08005020 <_printf_i>:
 8005020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	7e0f      	ldrb	r7, [r1, #24]
 8005026:	4691      	mov	r9, r2
 8005028:	2f78      	cmp	r7, #120	@ 0x78
 800502a:	4680      	mov	r8, r0
 800502c:	460c      	mov	r4, r1
 800502e:	469a      	mov	sl, r3
 8005030:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005036:	d807      	bhi.n	8005048 <_printf_i+0x28>
 8005038:	2f62      	cmp	r7, #98	@ 0x62
 800503a:	d80a      	bhi.n	8005052 <_printf_i+0x32>
 800503c:	2f00      	cmp	r7, #0
 800503e:	f000 80d3 	beq.w	80051e8 <_printf_i+0x1c8>
 8005042:	2f58      	cmp	r7, #88	@ 0x58
 8005044:	f000 80ba 	beq.w	80051bc <_printf_i+0x19c>
 8005048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800504c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005050:	e03a      	b.n	80050c8 <_printf_i+0xa8>
 8005052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005056:	2b15      	cmp	r3, #21
 8005058:	d8f6      	bhi.n	8005048 <_printf_i+0x28>
 800505a:	a101      	add	r1, pc, #4	@ (adr r1, 8005060 <_printf_i+0x40>)
 800505c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005060:	080050b9 	.word	0x080050b9
 8005064:	080050cd 	.word	0x080050cd
 8005068:	08005049 	.word	0x08005049
 800506c:	08005049 	.word	0x08005049
 8005070:	08005049 	.word	0x08005049
 8005074:	08005049 	.word	0x08005049
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005049 	.word	0x08005049
 8005080:	08005049 	.word	0x08005049
 8005084:	08005049 	.word	0x08005049
 8005088:	08005049 	.word	0x08005049
 800508c:	080051cf 	.word	0x080051cf
 8005090:	080050f7 	.word	0x080050f7
 8005094:	08005189 	.word	0x08005189
 8005098:	08005049 	.word	0x08005049
 800509c:	08005049 	.word	0x08005049
 80050a0:	080051f1 	.word	0x080051f1
 80050a4:	08005049 	.word	0x08005049
 80050a8:	080050f7 	.word	0x080050f7
 80050ac:	08005049 	.word	0x08005049
 80050b0:	08005049 	.word	0x08005049
 80050b4:	08005191 	.word	0x08005191
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	1d1a      	adds	r2, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6032      	str	r2, [r6, #0]
 80050c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050c8:	2301      	movs	r3, #1
 80050ca:	e09e      	b.n	800520a <_printf_i+0x1ea>
 80050cc:	6833      	ldr	r3, [r6, #0]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1d19      	adds	r1, r3, #4
 80050d2:	6031      	str	r1, [r6, #0]
 80050d4:	0606      	lsls	r6, r0, #24
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0xbc>
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	e003      	b.n	80050e4 <_printf_i+0xc4>
 80050dc:	0645      	lsls	r5, r0, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0xb8>
 80050e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	da03      	bge.n	80050f0 <_printf_i+0xd0>
 80050e8:	232d      	movs	r3, #45	@ 0x2d
 80050ea:	426d      	negs	r5, r5
 80050ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f0:	230a      	movs	r3, #10
 80050f2:	4859      	ldr	r0, [pc, #356]	@ (8005258 <_printf_i+0x238>)
 80050f4:	e011      	b.n	800511a <_printf_i+0xfa>
 80050f6:	6821      	ldr	r1, [r4, #0]
 80050f8:	6833      	ldr	r3, [r6, #0]
 80050fa:	0608      	lsls	r0, r1, #24
 80050fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005100:	d402      	bmi.n	8005108 <_printf_i+0xe8>
 8005102:	0649      	lsls	r1, r1, #25
 8005104:	bf48      	it	mi
 8005106:	b2ad      	uxthmi	r5, r5
 8005108:	2f6f      	cmp	r7, #111	@ 0x6f
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	bf14      	ite	ne
 800510e:	230a      	movne	r3, #10
 8005110:	2308      	moveq	r3, #8
 8005112:	4851      	ldr	r0, [pc, #324]	@ (8005258 <_printf_i+0x238>)
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800511a:	6866      	ldr	r6, [r4, #4]
 800511c:	2e00      	cmp	r6, #0
 800511e:	bfa8      	it	ge
 8005120:	6821      	ldrge	r1, [r4, #0]
 8005122:	60a6      	str	r6, [r4, #8]
 8005124:	bfa4      	itt	ge
 8005126:	f021 0104 	bicge.w	r1, r1, #4
 800512a:	6021      	strge	r1, [r4, #0]
 800512c:	b90d      	cbnz	r5, 8005132 <_printf_i+0x112>
 800512e:	2e00      	cmp	r6, #0
 8005130:	d04b      	beq.n	80051ca <_printf_i+0x1aa>
 8005132:	4616      	mov	r6, r2
 8005134:	fbb5 f1f3 	udiv	r1, r5, r3
 8005138:	fb03 5711 	mls	r7, r3, r1, r5
 800513c:	5dc7      	ldrb	r7, [r0, r7]
 800513e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005142:	462f      	mov	r7, r5
 8005144:	42bb      	cmp	r3, r7
 8005146:	460d      	mov	r5, r1
 8005148:	d9f4      	bls.n	8005134 <_printf_i+0x114>
 800514a:	2b08      	cmp	r3, #8
 800514c:	d10b      	bne.n	8005166 <_printf_i+0x146>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	07df      	lsls	r7, r3, #31
 8005152:	d508      	bpl.n	8005166 <_printf_i+0x146>
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	6861      	ldr	r1, [r4, #4]
 8005158:	4299      	cmp	r1, r3
 800515a:	bfde      	ittt	le
 800515c:	2330      	movle	r3, #48	@ 0x30
 800515e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005162:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005166:	1b92      	subs	r2, r2, r6
 8005168:	6122      	str	r2, [r4, #16]
 800516a:	464b      	mov	r3, r9
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f8cd a000 	str.w	sl, [sp]
 8005174:	aa03      	add	r2, sp, #12
 8005176:	f7ff fee1 	bl	8004f3c <_printf_common>
 800517a:	3001      	adds	r0, #1
 800517c:	d14a      	bne.n	8005214 <_printf_i+0x1f4>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	b004      	add	sp, #16
 8005184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	f043 0320 	orr.w	r3, r3, #32
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	2778      	movs	r7, #120	@ 0x78
 8005192:	4832      	ldr	r0, [pc, #200]	@ (800525c <_printf_i+0x23c>)
 8005194:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	6831      	ldr	r1, [r6, #0]
 800519c:	061f      	lsls	r7, r3, #24
 800519e:	f851 5b04 	ldr.w	r5, [r1], #4
 80051a2:	d402      	bmi.n	80051aa <_printf_i+0x18a>
 80051a4:	065f      	lsls	r7, r3, #25
 80051a6:	bf48      	it	mi
 80051a8:	b2ad      	uxthmi	r5, r5
 80051aa:	6031      	str	r1, [r6, #0]
 80051ac:	07d9      	lsls	r1, r3, #31
 80051ae:	bf44      	itt	mi
 80051b0:	f043 0320 	orrmi.w	r3, r3, #32
 80051b4:	6023      	strmi	r3, [r4, #0]
 80051b6:	b11d      	cbz	r5, 80051c0 <_printf_i+0x1a0>
 80051b8:	2310      	movs	r3, #16
 80051ba:	e7ab      	b.n	8005114 <_printf_i+0xf4>
 80051bc:	4826      	ldr	r0, [pc, #152]	@ (8005258 <_printf_i+0x238>)
 80051be:	e7e9      	b.n	8005194 <_printf_i+0x174>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	e7f6      	b.n	80051b8 <_printf_i+0x198>
 80051ca:	4616      	mov	r6, r2
 80051cc:	e7bd      	b.n	800514a <_printf_i+0x12a>
 80051ce:	6833      	ldr	r3, [r6, #0]
 80051d0:	6825      	ldr	r5, [r4, #0]
 80051d2:	1d18      	adds	r0, r3, #4
 80051d4:	6961      	ldr	r1, [r4, #20]
 80051d6:	6030      	str	r0, [r6, #0]
 80051d8:	062e      	lsls	r6, r5, #24
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	d501      	bpl.n	80051e2 <_printf_i+0x1c2>
 80051de:	6019      	str	r1, [r3, #0]
 80051e0:	e002      	b.n	80051e8 <_printf_i+0x1c8>
 80051e2:	0668      	lsls	r0, r5, #25
 80051e4:	d5fb      	bpl.n	80051de <_printf_i+0x1be>
 80051e6:	8019      	strh	r1, [r3, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	4616      	mov	r6, r2
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	e7bc      	b.n	800516a <_printf_i+0x14a>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	2100      	movs	r1, #0
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	6032      	str	r2, [r6, #0]
 80051f8:	681e      	ldr	r6, [r3, #0]
 80051fa:	6862      	ldr	r2, [r4, #4]
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 fc44 	bl	8005a8a <memchr>
 8005202:	b108      	cbz	r0, 8005208 <_printf_i+0x1e8>
 8005204:	1b80      	subs	r0, r0, r6
 8005206:	6060      	str	r0, [r4, #4]
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	2300      	movs	r3, #0
 800520e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005212:	e7aa      	b.n	800516a <_printf_i+0x14a>
 8005214:	4632      	mov	r2, r6
 8005216:	4649      	mov	r1, r9
 8005218:	4640      	mov	r0, r8
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	47d0      	blx	sl
 800521e:	3001      	adds	r0, #1
 8005220:	d0ad      	beq.n	800517e <_printf_i+0x15e>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	079b      	lsls	r3, r3, #30
 8005226:	d413      	bmi.n	8005250 <_printf_i+0x230>
 8005228:	68e0      	ldr	r0, [r4, #12]
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	4298      	cmp	r0, r3
 800522e:	bfb8      	it	lt
 8005230:	4618      	movlt	r0, r3
 8005232:	e7a6      	b.n	8005182 <_printf_i+0x162>
 8005234:	2301      	movs	r3, #1
 8005236:	4632      	mov	r2, r6
 8005238:	4649      	mov	r1, r9
 800523a:	4640      	mov	r0, r8
 800523c:	47d0      	blx	sl
 800523e:	3001      	adds	r0, #1
 8005240:	d09d      	beq.n	800517e <_printf_i+0x15e>
 8005242:	3501      	adds	r5, #1
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	9903      	ldr	r1, [sp, #12]
 8005248:	1a5b      	subs	r3, r3, r1
 800524a:	42ab      	cmp	r3, r5
 800524c:	dcf2      	bgt.n	8005234 <_printf_i+0x214>
 800524e:	e7eb      	b.n	8005228 <_printf_i+0x208>
 8005250:	2500      	movs	r5, #0
 8005252:	f104 0619 	add.w	r6, r4, #25
 8005256:	e7f5      	b.n	8005244 <_printf_i+0x224>
 8005258:	08009d16 	.word	0x08009d16
 800525c:	08009d27 	.word	0x08009d27

08005260 <_scanf_float>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	b087      	sub	sp, #28
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	688b      	ldr	r3, [r1, #8]
 800526a:	4617      	mov	r7, r2
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005272:	bf82      	ittt	hi
 8005274:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005278:	eb03 0b05 	addhi.w	fp, r3, r5
 800527c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005280:	460a      	mov	r2, r1
 8005282:	f04f 0500 	mov.w	r5, #0
 8005286:	bf88      	it	hi
 8005288:	608b      	strhi	r3, [r1, #8]
 800528a:	680b      	ldr	r3, [r1, #0]
 800528c:	4680      	mov	r8, r0
 800528e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005292:	f842 3b1c 	str.w	r3, [r2], #28
 8005296:	460c      	mov	r4, r1
 8005298:	bf98      	it	ls
 800529a:	f04f 0b00 	movls.w	fp, #0
 800529e:	4616      	mov	r6, r2
 80052a0:	46aa      	mov	sl, r5
 80052a2:	46a9      	mov	r9, r5
 80052a4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052a8:	9201      	str	r2, [sp, #4]
 80052aa:	9502      	str	r5, [sp, #8]
 80052ac:	68a2      	ldr	r2, [r4, #8]
 80052ae:	b152      	cbz	r2, 80052c6 <_scanf_float+0x66>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80052b6:	d865      	bhi.n	8005384 <_scanf_float+0x124>
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d83d      	bhi.n	8005338 <_scanf_float+0xd8>
 80052bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80052c0:	b2c8      	uxtb	r0, r1
 80052c2:	280e      	cmp	r0, #14
 80052c4:	d93b      	bls.n	800533e <_scanf_float+0xde>
 80052c6:	f1b9 0f00 	cmp.w	r9, #0
 80052ca:	d003      	beq.n	80052d4 <_scanf_float+0x74>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052d8:	f1ba 0f01 	cmp.w	sl, #1
 80052dc:	f200 8118 	bhi.w	8005510 <_scanf_float+0x2b0>
 80052e0:	9b01      	ldr	r3, [sp, #4]
 80052e2:	429e      	cmp	r6, r3
 80052e4:	f200 8109 	bhi.w	80054fa <_scanf_float+0x29a>
 80052e8:	2001      	movs	r0, #1
 80052ea:	b007      	add	sp, #28
 80052ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80052f4:	2a0d      	cmp	r2, #13
 80052f6:	d8e6      	bhi.n	80052c6 <_scanf_float+0x66>
 80052f8:	a101      	add	r1, pc, #4	@ (adr r1, 8005300 <_scanf_float+0xa0>)
 80052fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005447 	.word	0x08005447
 8005304:	080052c7 	.word	0x080052c7
 8005308:	080052c7 	.word	0x080052c7
 800530c:	080052c7 	.word	0x080052c7
 8005310:	080054a7 	.word	0x080054a7
 8005314:	0800547f 	.word	0x0800547f
 8005318:	080052c7 	.word	0x080052c7
 800531c:	080052c7 	.word	0x080052c7
 8005320:	08005455 	.word	0x08005455
 8005324:	080052c7 	.word	0x080052c7
 8005328:	080052c7 	.word	0x080052c7
 800532c:	080052c7 	.word	0x080052c7
 8005330:	080052c7 	.word	0x080052c7
 8005334:	0800540d 	.word	0x0800540d
 8005338:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800533c:	e7da      	b.n	80052f4 <_scanf_float+0x94>
 800533e:	290e      	cmp	r1, #14
 8005340:	d8c1      	bhi.n	80052c6 <_scanf_float+0x66>
 8005342:	a001      	add	r0, pc, #4	@ (adr r0, 8005348 <_scanf_float+0xe8>)
 8005344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005348:	080053fd 	.word	0x080053fd
 800534c:	080052c7 	.word	0x080052c7
 8005350:	080053fd 	.word	0x080053fd
 8005354:	08005493 	.word	0x08005493
 8005358:	080052c7 	.word	0x080052c7
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053e3 	.word	0x080053e3
 8005364:	080053e3 	.word	0x080053e3
 8005368:	080053e3 	.word	0x080053e3
 800536c:	080053e3 	.word	0x080053e3
 8005370:	080053e3 	.word	0x080053e3
 8005374:	080053e3 	.word	0x080053e3
 8005378:	080053e3 	.word	0x080053e3
 800537c:	080053e3 	.word	0x080053e3
 8005380:	080053e3 	.word	0x080053e3
 8005384:	2b6e      	cmp	r3, #110	@ 0x6e
 8005386:	d809      	bhi.n	800539c <_scanf_float+0x13c>
 8005388:	2b60      	cmp	r3, #96	@ 0x60
 800538a:	d8b1      	bhi.n	80052f0 <_scanf_float+0x90>
 800538c:	2b54      	cmp	r3, #84	@ 0x54
 800538e:	d07b      	beq.n	8005488 <_scanf_float+0x228>
 8005390:	2b59      	cmp	r3, #89	@ 0x59
 8005392:	d198      	bne.n	80052c6 <_scanf_float+0x66>
 8005394:	2d07      	cmp	r5, #7
 8005396:	d196      	bne.n	80052c6 <_scanf_float+0x66>
 8005398:	2508      	movs	r5, #8
 800539a:	e02c      	b.n	80053f6 <_scanf_float+0x196>
 800539c:	2b74      	cmp	r3, #116	@ 0x74
 800539e:	d073      	beq.n	8005488 <_scanf_float+0x228>
 80053a0:	2b79      	cmp	r3, #121	@ 0x79
 80053a2:	e7f6      	b.n	8005392 <_scanf_float+0x132>
 80053a4:	6821      	ldr	r1, [r4, #0]
 80053a6:	05c8      	lsls	r0, r1, #23
 80053a8:	d51b      	bpl.n	80053e2 <_scanf_float+0x182>
 80053aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80053ae:	6021      	str	r1, [r4, #0]
 80053b0:	f109 0901 	add.w	r9, r9, #1
 80053b4:	f1bb 0f00 	cmp.w	fp, #0
 80053b8:	d003      	beq.n	80053c2 <_scanf_float+0x162>
 80053ba:	3201      	adds	r2, #1
 80053bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053c0:	60a2      	str	r2, [r4, #8]
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60a3      	str	r3, [r4, #8]
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	f340 8087 	ble.w	80054e8 <_scanf_float+0x288>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	e764      	b.n	80052ac <_scanf_float+0x4c>
 80053e2:	eb1a 0105 	adds.w	r1, sl, r5
 80053e6:	f47f af6e 	bne.w	80052c6 <_scanf_float+0x66>
 80053ea:	460d      	mov	r5, r1
 80053ec:	468a      	mov	sl, r1
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80053f4:	6022      	str	r2, [r4, #0]
 80053f6:	f806 3b01 	strb.w	r3, [r6], #1
 80053fa:	e7e2      	b.n	80053c2 <_scanf_float+0x162>
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	0610      	lsls	r0, r2, #24
 8005400:	f57f af61 	bpl.w	80052c6 <_scanf_float+0x66>
 8005404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005408:	6022      	str	r2, [r4, #0]
 800540a:	e7f4      	b.n	80053f6 <_scanf_float+0x196>
 800540c:	f1ba 0f00 	cmp.w	sl, #0
 8005410:	d10e      	bne.n	8005430 <_scanf_float+0x1d0>
 8005412:	f1b9 0f00 	cmp.w	r9, #0
 8005416:	d10e      	bne.n	8005436 <_scanf_float+0x1d6>
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800541e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005422:	d108      	bne.n	8005436 <_scanf_float+0x1d6>
 8005424:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005428:	f04f 0a01 	mov.w	sl, #1
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	e7e2      	b.n	80053f6 <_scanf_float+0x196>
 8005430:	f1ba 0f02 	cmp.w	sl, #2
 8005434:	d055      	beq.n	80054e2 <_scanf_float+0x282>
 8005436:	2d01      	cmp	r5, #1
 8005438:	d002      	beq.n	8005440 <_scanf_float+0x1e0>
 800543a:	2d04      	cmp	r5, #4
 800543c:	f47f af43 	bne.w	80052c6 <_scanf_float+0x66>
 8005440:	3501      	adds	r5, #1
 8005442:	b2ed      	uxtb	r5, r5
 8005444:	e7d7      	b.n	80053f6 <_scanf_float+0x196>
 8005446:	f1ba 0f01 	cmp.w	sl, #1
 800544a:	f47f af3c 	bne.w	80052c6 <_scanf_float+0x66>
 800544e:	f04f 0a02 	mov.w	sl, #2
 8005452:	e7d0      	b.n	80053f6 <_scanf_float+0x196>
 8005454:	b97d      	cbnz	r5, 8005476 <_scanf_float+0x216>
 8005456:	f1b9 0f00 	cmp.w	r9, #0
 800545a:	f47f af37 	bne.w	80052cc <_scanf_float+0x6c>
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005464:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005468:	f040 8103 	bne.w	8005672 <_scanf_float+0x412>
 800546c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005470:	2501      	movs	r5, #1
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	e7bf      	b.n	80053f6 <_scanf_float+0x196>
 8005476:	2d03      	cmp	r5, #3
 8005478:	d0e2      	beq.n	8005440 <_scanf_float+0x1e0>
 800547a:	2d05      	cmp	r5, #5
 800547c:	e7de      	b.n	800543c <_scanf_float+0x1dc>
 800547e:	2d02      	cmp	r5, #2
 8005480:	f47f af21 	bne.w	80052c6 <_scanf_float+0x66>
 8005484:	2503      	movs	r5, #3
 8005486:	e7b6      	b.n	80053f6 <_scanf_float+0x196>
 8005488:	2d06      	cmp	r5, #6
 800548a:	f47f af1c 	bne.w	80052c6 <_scanf_float+0x66>
 800548e:	2507      	movs	r5, #7
 8005490:	e7b1      	b.n	80053f6 <_scanf_float+0x196>
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	0591      	lsls	r1, r2, #22
 8005496:	f57f af16 	bpl.w	80052c6 <_scanf_float+0x66>
 800549a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80054a4:	e7a7      	b.n	80053f6 <_scanf_float+0x196>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80054ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80054b0:	d006      	beq.n	80054c0 <_scanf_float+0x260>
 80054b2:	0550      	lsls	r0, r2, #21
 80054b4:	f57f af07 	bpl.w	80052c6 <_scanf_float+0x66>
 80054b8:	f1b9 0f00 	cmp.w	r9, #0
 80054bc:	f000 80d9 	beq.w	8005672 <_scanf_float+0x412>
 80054c0:	0591      	lsls	r1, r2, #22
 80054c2:	bf58      	it	pl
 80054c4:	9902      	ldrpl	r1, [sp, #8]
 80054c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054ca:	bf58      	it	pl
 80054cc:	eba9 0101 	subpl.w	r1, r9, r1
 80054d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80054d4:	f04f 0900 	mov.w	r9, #0
 80054d8:	bf58      	it	pl
 80054da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	e789      	b.n	80053f6 <_scanf_float+0x196>
 80054e2:	f04f 0a03 	mov.w	sl, #3
 80054e6:	e786      	b.n	80053f6 <_scanf_float+0x196>
 80054e8:	4639      	mov	r1, r7
 80054ea:	4640      	mov	r0, r8
 80054ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80054f0:	4798      	blx	r3
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f43f aeda 	beq.w	80052ac <_scanf_float+0x4c>
 80054f8:	e6e5      	b.n	80052c6 <_scanf_float+0x66>
 80054fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054fe:	463a      	mov	r2, r7
 8005500:	4640      	mov	r0, r8
 8005502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005506:	4798      	blx	r3
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	3b01      	subs	r3, #1
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	e6e7      	b.n	80052e0 <_scanf_float+0x80>
 8005510:	1e6b      	subs	r3, r5, #1
 8005512:	2b06      	cmp	r3, #6
 8005514:	d824      	bhi.n	8005560 <_scanf_float+0x300>
 8005516:	2d02      	cmp	r5, #2
 8005518:	d836      	bhi.n	8005588 <_scanf_float+0x328>
 800551a:	9b01      	ldr	r3, [sp, #4]
 800551c:	429e      	cmp	r6, r3
 800551e:	f67f aee3 	bls.w	80052e8 <_scanf_float+0x88>
 8005522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005526:	463a      	mov	r2, r7
 8005528:	4640      	mov	r0, r8
 800552a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800552e:	4798      	blx	r3
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	3b01      	subs	r3, #1
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	e7f0      	b.n	800551a <_scanf_float+0x2ba>
 8005538:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800553c:	463a      	mov	r2, r7
 800553e:	4640      	mov	r0, r8
 8005540:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005544:	4798      	blx	r3
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	3b01      	subs	r3, #1
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005550:	fa5f fa8a 	uxtb.w	sl, sl
 8005554:	f1ba 0f02 	cmp.w	sl, #2
 8005558:	d1ee      	bne.n	8005538 <_scanf_float+0x2d8>
 800555a:	3d03      	subs	r5, #3
 800555c:	b2ed      	uxtb	r5, r5
 800555e:	1b76      	subs	r6, r6, r5
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	05da      	lsls	r2, r3, #23
 8005564:	d530      	bpl.n	80055c8 <_scanf_float+0x368>
 8005566:	055b      	lsls	r3, r3, #21
 8005568:	d511      	bpl.n	800558e <_scanf_float+0x32e>
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	429e      	cmp	r6, r3
 800556e:	f67f aebb 	bls.w	80052e8 <_scanf_float+0x88>
 8005572:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005576:	463a      	mov	r2, r7
 8005578:	4640      	mov	r0, r8
 800557a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800557e:	4798      	blx	r3
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	3b01      	subs	r3, #1
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	e7f0      	b.n	800556a <_scanf_float+0x30a>
 8005588:	46aa      	mov	sl, r5
 800558a:	46b3      	mov	fp, r6
 800558c:	e7de      	b.n	800554c <_scanf_float+0x2ec>
 800558e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	2965      	cmp	r1, #101	@ 0x65
 8005596:	f103 33ff 	add.w	r3, r3, #4294967295
 800559a:	f106 35ff 	add.w	r5, r6, #4294967295
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	d00c      	beq.n	80055bc <_scanf_float+0x35c>
 80055a2:	2945      	cmp	r1, #69	@ 0x45
 80055a4:	d00a      	beq.n	80055bc <_scanf_float+0x35c>
 80055a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055aa:	463a      	mov	r2, r7
 80055ac:	4640      	mov	r0, r8
 80055ae:	4798      	blx	r3
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	1eb5      	subs	r5, r6, #2
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	463a      	mov	r2, r7
 80055be:	4640      	mov	r0, r8
 80055c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055c4:	4798      	blx	r3
 80055c6:	462e      	mov	r6, r5
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	f012 0210 	ands.w	r2, r2, #16
 80055ce:	d001      	beq.n	80055d4 <_scanf_float+0x374>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e68a      	b.n	80052ea <_scanf_float+0x8a>
 80055d4:	7032      	strb	r2, [r6, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e0:	d11c      	bne.n	800561c <_scanf_float+0x3bc>
 80055e2:	9b02      	ldr	r3, [sp, #8]
 80055e4:	454b      	cmp	r3, r9
 80055e6:	eba3 0209 	sub.w	r2, r3, r9
 80055ea:	d123      	bne.n	8005634 <_scanf_float+0x3d4>
 80055ec:	2200      	movs	r2, #0
 80055ee:	4640      	mov	r0, r8
 80055f0:	9901      	ldr	r1, [sp, #4]
 80055f2:	f002 fc4d 	bl	8007e90 <_strtod_r>
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	6825      	ldr	r5, [r4, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f015 0f02 	tst.w	r5, #2
 8005600:	4606      	mov	r6, r0
 8005602:	460f      	mov	r7, r1
 8005604:	f103 0204 	add.w	r2, r3, #4
 8005608:	d01f      	beq.n	800564a <_scanf_float+0x3ea>
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	600a      	str	r2, [r1, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	e9c3 6700 	strd	r6, r7, [r3]
 8005614:	68e3      	ldr	r3, [r4, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60e3      	str	r3, [r4, #12]
 800561a:	e7d9      	b.n	80055d0 <_scanf_float+0x370>
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0e4      	beq.n	80055ec <_scanf_float+0x38c>
 8005622:	9905      	ldr	r1, [sp, #20]
 8005624:	230a      	movs	r3, #10
 8005626:	4640      	mov	r0, r8
 8005628:	3101      	adds	r1, #1
 800562a:	f002 fcb1 	bl	8007f90 <_strtol_r>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	9e05      	ldr	r6, [sp, #20]
 8005632:	1ac2      	subs	r2, r0, r3
 8005634:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005638:	429e      	cmp	r6, r3
 800563a:	bf28      	it	cs
 800563c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005640:	4630      	mov	r0, r6
 8005642:	490d      	ldr	r1, [pc, #52]	@ (8005678 <_scanf_float+0x418>)
 8005644:	f000 f912 	bl	800586c <siprintf>
 8005648:	e7d0      	b.n	80055ec <_scanf_float+0x38c>
 800564a:	076d      	lsls	r5, r5, #29
 800564c:	d4dd      	bmi.n	800560a <_scanf_float+0x3aa>
 800564e:	9d03      	ldr	r5, [sp, #12]
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	681d      	ldr	r5, [r3, #0]
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	f7fb f9e2 	bl	8000a20 <__aeabi_dcmpun>
 800565c:	b120      	cbz	r0, 8005668 <_scanf_float+0x408>
 800565e:	4807      	ldr	r0, [pc, #28]	@ (800567c <_scanf_float+0x41c>)
 8005660:	f000 fa22 	bl	8005aa8 <nanf>
 8005664:	6028      	str	r0, [r5, #0]
 8005666:	e7d5      	b.n	8005614 <_scanf_float+0x3b4>
 8005668:	4630      	mov	r0, r6
 800566a:	4639      	mov	r1, r7
 800566c:	f7fb fa36 	bl	8000adc <__aeabi_d2f>
 8005670:	e7f8      	b.n	8005664 <_scanf_float+0x404>
 8005672:	f04f 0900 	mov.w	r9, #0
 8005676:	e62d      	b.n	80052d4 <_scanf_float+0x74>
 8005678:	08009d38 	.word	0x08009d38
 800567c:	0800a0e8 	.word	0x0800a0e8

08005680 <std>:
 8005680:	2300      	movs	r3, #0
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	e9c0 3300 	strd	r3, r3, [r0]
 800568a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800568e:	6083      	str	r3, [r0, #8]
 8005690:	8181      	strh	r1, [r0, #12]
 8005692:	6643      	str	r3, [r0, #100]	@ 0x64
 8005694:	81c2      	strh	r2, [r0, #14]
 8005696:	6183      	str	r3, [r0, #24]
 8005698:	4619      	mov	r1, r3
 800569a:	2208      	movs	r2, #8
 800569c:	305c      	adds	r0, #92	@ 0x5c
 800569e:	f000 f974 	bl	800598a <memset>
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <std+0x58>)
 80056a4:	6224      	str	r4, [r4, #32]
 80056a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80056a8:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <std+0x5c>)
 80056aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056ac:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <std+0x60>)
 80056ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <std+0x64>)
 80056b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <std+0x68>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d006      	beq.n	80056c8 <std+0x48>
 80056ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056be:	4294      	cmp	r4, r2
 80056c0:	d002      	beq.n	80056c8 <std+0x48>
 80056c2:	33d0      	adds	r3, #208	@ 0xd0
 80056c4:	429c      	cmp	r4, r3
 80056c6:	d105      	bne.n	80056d4 <std+0x54>
 80056c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d0:	f000 b9d8 	b.w	8005a84 <__retarget_lock_init_recursive>
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	bf00      	nop
 80056d8:	08005901 	.word	0x08005901
 80056dc:	08005927 	.word	0x08005927
 80056e0:	0800595f 	.word	0x0800595f
 80056e4:	08005983 	.word	0x08005983
 80056e8:	200002d4 	.word	0x200002d4

080056ec <stdio_exit_handler>:
 80056ec:	4a02      	ldr	r2, [pc, #8]	@ (80056f8 <stdio_exit_handler+0xc>)
 80056ee:	4903      	ldr	r1, [pc, #12]	@ (80056fc <stdio_exit_handler+0x10>)
 80056f0:	4803      	ldr	r0, [pc, #12]	@ (8005700 <stdio_exit_handler+0x14>)
 80056f2:	f000 b869 	b.w	80057c8 <_fwalk_sglue>
 80056f6:	bf00      	nop
 80056f8:	2000002c 	.word	0x2000002c
 80056fc:	08008971 	.word	0x08008971
 8005700:	2000003c 	.word	0x2000003c

08005704 <cleanup_stdio>:
 8005704:	6841      	ldr	r1, [r0, #4]
 8005706:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <cleanup_stdio+0x34>)
 8005708:	b510      	push	{r4, lr}
 800570a:	4299      	cmp	r1, r3
 800570c:	4604      	mov	r4, r0
 800570e:	d001      	beq.n	8005714 <cleanup_stdio+0x10>
 8005710:	f003 f92e 	bl	8008970 <_fflush_r>
 8005714:	68a1      	ldr	r1, [r4, #8]
 8005716:	4b09      	ldr	r3, [pc, #36]	@ (800573c <cleanup_stdio+0x38>)
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <cleanup_stdio+0x1e>
 800571c:	4620      	mov	r0, r4
 800571e:	f003 f927 	bl	8008970 <_fflush_r>
 8005722:	68e1      	ldr	r1, [r4, #12]
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <cleanup_stdio+0x3c>)
 8005726:	4299      	cmp	r1, r3
 8005728:	d004      	beq.n	8005734 <cleanup_stdio+0x30>
 800572a:	4620      	mov	r0, r4
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	f003 b91e 	b.w	8008970 <_fflush_r>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	200002d4 	.word	0x200002d4
 800573c:	2000033c 	.word	0x2000033c
 8005740:	200003a4 	.word	0x200003a4

08005744 <global_stdio_init.part.0>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <global_stdio_init.part.0+0x30>)
 8005748:	4c0b      	ldr	r4, [pc, #44]	@ (8005778 <global_stdio_init.part.0+0x34>)
 800574a:	4a0c      	ldr	r2, [pc, #48]	@ (800577c <global_stdio_init.part.0+0x38>)
 800574c:	4620      	mov	r0, r4
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	2104      	movs	r1, #4
 8005752:	2200      	movs	r2, #0
 8005754:	f7ff ff94 	bl	8005680 <std>
 8005758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800575c:	2201      	movs	r2, #1
 800575e:	2109      	movs	r1, #9
 8005760:	f7ff ff8e 	bl	8005680 <std>
 8005764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005768:	2202      	movs	r2, #2
 800576a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576e:	2112      	movs	r1, #18
 8005770:	f7ff bf86 	b.w	8005680 <std>
 8005774:	2000040c 	.word	0x2000040c
 8005778:	200002d4 	.word	0x200002d4
 800577c:	080056ed 	.word	0x080056ed

08005780 <__sfp_lock_acquire>:
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <__sfp_lock_acquire+0x8>)
 8005782:	f000 b980 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8005786:	bf00      	nop
 8005788:	20000415 	.word	0x20000415

0800578c <__sfp_lock_release>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__sfp_lock_release+0x8>)
 800578e:	f000 b97b 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005792:	bf00      	nop
 8005794:	20000415 	.word	0x20000415

08005798 <__sinit>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	f7ff fff0 	bl	8005780 <__sfp_lock_acquire>
 80057a0:	6a23      	ldr	r3, [r4, #32]
 80057a2:	b11b      	cbz	r3, 80057ac <__sinit+0x14>
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f7ff bff0 	b.w	800578c <__sfp_lock_release>
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <__sinit+0x28>)
 80057ae:	6223      	str	r3, [r4, #32]
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <__sinit+0x2c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f5      	bne.n	80057a4 <__sinit+0xc>
 80057b8:	f7ff ffc4 	bl	8005744 <global_stdio_init.part.0>
 80057bc:	e7f2      	b.n	80057a4 <__sinit+0xc>
 80057be:	bf00      	nop
 80057c0:	08005705 	.word	0x08005705
 80057c4:	2000040c 	.word	0x2000040c

080057c8 <_fwalk_sglue>:
 80057c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057cc:	4607      	mov	r7, r0
 80057ce:	4688      	mov	r8, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	2600      	movs	r6, #0
 80057d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d8:	f1b9 0901 	subs.w	r9, r9, #1
 80057dc:	d505      	bpl.n	80057ea <_fwalk_sglue+0x22>
 80057de:	6824      	ldr	r4, [r4, #0]
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	d1f7      	bne.n	80057d4 <_fwalk_sglue+0xc>
 80057e4:	4630      	mov	r0, r6
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d907      	bls.n	8005800 <_fwalk_sglue+0x38>
 80057f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f4:	3301      	adds	r3, #1
 80057f6:	d003      	beq.n	8005800 <_fwalk_sglue+0x38>
 80057f8:	4629      	mov	r1, r5
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	4306      	orrs	r6, r0
 8005800:	3568      	adds	r5, #104	@ 0x68
 8005802:	e7e9      	b.n	80057d8 <_fwalk_sglue+0x10>

08005804 <sniprintf>:
 8005804:	b40c      	push	{r2, r3}
 8005806:	b530      	push	{r4, r5, lr}
 8005808:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <sniprintf+0x64>)
 800580a:	1e0c      	subs	r4, r1, #0
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	b09d      	sub	sp, #116	@ 0x74
 8005810:	da08      	bge.n	8005824 <sniprintf+0x20>
 8005812:	238b      	movs	r3, #139	@ 0x8b
 8005814:	f04f 30ff 	mov.w	r0, #4294967295
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	b01d      	add	sp, #116	@ 0x74
 800581c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005820:	b002      	add	sp, #8
 8005822:	4770      	bx	lr
 8005824:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005828:	f8ad 3014 	strh.w	r3, [sp, #20]
 800582c:	bf0c      	ite	eq
 800582e:	4623      	moveq	r3, r4
 8005830:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	9307      	str	r3, [sp, #28]
 8005838:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800583c:	9002      	str	r0, [sp, #8]
 800583e:	9006      	str	r0, [sp, #24]
 8005840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005844:	4628      	mov	r0, r5
 8005846:	ab21      	add	r3, sp, #132	@ 0x84
 8005848:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800584a:	a902      	add	r1, sp, #8
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	f002 fbfd 	bl	800804c <_svfiprintf_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	bfbc      	itt	lt
 8005856:	238b      	movlt	r3, #139	@ 0x8b
 8005858:	602b      	strlt	r3, [r5, #0]
 800585a:	2c00      	cmp	r4, #0
 800585c:	d0dd      	beq.n	800581a <sniprintf+0x16>
 800585e:	2200      	movs	r2, #0
 8005860:	9b02      	ldr	r3, [sp, #8]
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e7d9      	b.n	800581a <sniprintf+0x16>
 8005866:	bf00      	nop
 8005868:	20000038 	.word	0x20000038

0800586c <siprintf>:
 800586c:	b40e      	push	{r1, r2, r3}
 800586e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005872:	b500      	push	{lr}
 8005874:	b09c      	sub	sp, #112	@ 0x70
 8005876:	ab1d      	add	r3, sp, #116	@ 0x74
 8005878:	9002      	str	r0, [sp, #8]
 800587a:	9006      	str	r0, [sp, #24]
 800587c:	9107      	str	r1, [sp, #28]
 800587e:	9104      	str	r1, [sp, #16]
 8005880:	4808      	ldr	r0, [pc, #32]	@ (80058a4 <siprintf+0x38>)
 8005882:	4909      	ldr	r1, [pc, #36]	@ (80058a8 <siprintf+0x3c>)
 8005884:	f853 2b04 	ldr.w	r2, [r3], #4
 8005888:	9105      	str	r1, [sp, #20]
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	a902      	add	r1, sp, #8
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	f002 fbdc 	bl	800804c <_svfiprintf_r>
 8005894:	2200      	movs	r2, #0
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	b01c      	add	sp, #112	@ 0x70
 800589c:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a0:	b003      	add	sp, #12
 80058a2:	4770      	bx	lr
 80058a4:	20000038 	.word	0x20000038
 80058a8:	ffff0208 	.word	0xffff0208

080058ac <siscanf>:
 80058ac:	b40e      	push	{r1, r2, r3}
 80058ae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80058b2:	b530      	push	{r4, r5, lr}
 80058b4:	b09c      	sub	sp, #112	@ 0x70
 80058b6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80058b8:	f854 5b04 	ldr.w	r5, [r4], #4
 80058bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80058c0:	9002      	str	r0, [sp, #8]
 80058c2:	9006      	str	r0, [sp, #24]
 80058c4:	f7fa fc4e 	bl	8000164 <strlen>
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <siscanf+0x4c>)
 80058ca:	9003      	str	r0, [sp, #12]
 80058cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ce:	2300      	movs	r3, #0
 80058d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80058d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058d8:	9007      	str	r0, [sp, #28]
 80058da:	4808      	ldr	r0, [pc, #32]	@ (80058fc <siscanf+0x50>)
 80058dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4623      	mov	r3, r4
 80058e4:	a902      	add	r1, sp, #8
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	9401      	str	r4, [sp, #4]
 80058ea:	f002 fd03 	bl	80082f4 <__ssvfiscanf_r>
 80058ee:	b01c      	add	sp, #112	@ 0x70
 80058f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058f4:	b003      	add	sp, #12
 80058f6:	4770      	bx	lr
 80058f8:	08005923 	.word	0x08005923
 80058fc:	20000038 	.word	0x20000038

08005900 <__sread>:
 8005900:	b510      	push	{r4, lr}
 8005902:	460c      	mov	r4, r1
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	f000 f86e 	bl	80059e8 <_read_r>
 800590c:	2800      	cmp	r0, #0
 800590e:	bfab      	itete	ge
 8005910:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005912:	89a3      	ldrhlt	r3, [r4, #12]
 8005914:	181b      	addge	r3, r3, r0
 8005916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800591a:	bfac      	ite	ge
 800591c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800591e:	81a3      	strhlt	r3, [r4, #12]
 8005920:	bd10      	pop	{r4, pc}

08005922 <__seofread>:
 8005922:	2000      	movs	r0, #0
 8005924:	4770      	bx	lr

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	4605      	mov	r5, r0
 8005930:	05db      	lsls	r3, r3, #23
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	2302      	movs	r3, #2
 800593a:	2200      	movs	r2, #0
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	f000 f840 	bl	80059c4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	4632      	mov	r2, r6
 8005948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	4628      	mov	r0, r5
 8005950:	463b      	mov	r3, r7
 8005952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b857 	b.w	8005a0c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f82d 	bl	80059c4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b80d 	b.w	80059a4 <_close_r>

0800598a <memset>:
 800598a:	4603      	mov	r3, r0
 800598c:	4402      	add	r2, r0
 800598e:	4293      	cmp	r3, r2
 8005990:	d100      	bne.n	8005994 <memset+0xa>
 8005992:	4770      	bx	lr
 8005994:	f803 1b01 	strb.w	r1, [r3], #1
 8005998:	e7f9      	b.n	800598e <memset+0x4>
	...

0800599c <_localeconv_r>:
 800599c:	4800      	ldr	r0, [pc, #0]	@ (80059a0 <_localeconv_r+0x4>)
 800599e:	4770      	bx	lr
 80059a0:	20000178 	.word	0x20000178

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	2300      	movs	r3, #0
 80059a8:	4d05      	ldr	r5, [pc, #20]	@ (80059c0 <_close_r+0x1c>)
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fc fae3 	bl	8001f7a <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000410 	.word	0x20000410

080059c4 <_lseek_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	2200      	movs	r2, #0
 80059ce:	4d05      	ldr	r5, [pc, #20]	@ (80059e4 <_lseek_r+0x20>)
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fc faf5 	bl	8001fc2 <_lseek>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_lseek_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_lseek_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000410 	.word	0x20000410

080059e8 <_read_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	2200      	movs	r2, #0
 80059f2:	4d05      	ldr	r5, [pc, #20]	@ (8005a08 <_read_r+0x20>)
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fc fa86 	bl	8001f08 <_read>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_read_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_read_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000410 	.word	0x20000410

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	2200      	movs	r2, #0
 8005a16:	4d05      	ldr	r5, [pc, #20]	@ (8005a2c <_write_r+0x20>)
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fc fa91 	bl	8001f42 <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000410 	.word	0x20000410

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000038 	.word	0x20000038

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4d0c      	ldr	r5, [pc, #48]	@ (8005a74 <__libc_init_array+0x38>)
 8005a42:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	f003 ffa4 	bl	8009998 <_init>
 8005a50:	2600      	movs	r6, #0
 8005a52:	4d0a      	ldr	r5, [pc, #40]	@ (8005a7c <__libc_init_array+0x40>)
 8005a54:	4c0a      	ldr	r4, [pc, #40]	@ (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	0800a154 	.word	0x0800a154
 8005a78:	0800a154 	.word	0x0800a154
 8005a7c:	0800a154 	.word	0x0800a154
 8005a80:	0800a158 	.word	0x0800a158

08005a84 <__retarget_lock_init_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_acquire_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_release_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <memchr>:
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	b2c9      	uxtb	r1, r1
 8005a90:	4402      	add	r2, r0
 8005a92:	4293      	cmp	r3, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	d101      	bne.n	8005a9c <memchr+0x12>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e003      	b.n	8005aa4 <memchr+0x1a>
 8005a9c:	7804      	ldrb	r4, [r0, #0]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	428c      	cmp	r4, r1
 8005aa2:	d1f6      	bne.n	8005a92 <memchr+0x8>
 8005aa4:	bd10      	pop	{r4, pc}
	...

08005aa8 <nanf>:
 8005aa8:	4800      	ldr	r0, [pc, #0]	@ (8005aac <nanf+0x4>)
 8005aaa:	4770      	bx	lr
 8005aac:	7fc00000 	.word	0x7fc00000

08005ab0 <quorem>:
 8005ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	6903      	ldr	r3, [r0, #16]
 8005ab6:	690c      	ldr	r4, [r1, #16]
 8005ab8:	4607      	mov	r7, r0
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	db7e      	blt.n	8005bbc <quorem+0x10c>
 8005abe:	3c01      	subs	r4, #1
 8005ac0:	00a3      	lsls	r3, r4, #2
 8005ac2:	f100 0514 	add.w	r5, r0, #20
 8005ac6:	f101 0814 	add.w	r8, r1, #20
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ada:	3301      	adds	r3, #1
 8005adc:	429a      	cmp	r2, r3
 8005ade:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ae2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ae6:	d32e      	bcc.n	8005b46 <quorem+0x96>
 8005ae8:	f04f 0a00 	mov.w	sl, #0
 8005aec:	46c4      	mov	ip, r8
 8005aee:	46ae      	mov	lr, r5
 8005af0:	46d3      	mov	fp, sl
 8005af2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005af6:	b298      	uxth	r0, r3
 8005af8:	fb06 a000 	mla	r0, r6, r0, sl
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	0c02      	lsrs	r2, r0, #16
 8005b00:	fb06 2303 	mla	r3, r6, r3, r2
 8005b04:	f8de 2000 	ldr.w	r2, [lr]
 8005b08:	b280      	uxth	r0, r0
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	1a12      	subs	r2, r2, r0
 8005b0e:	445a      	add	r2, fp
 8005b10:	f8de 0000 	ldr.w	r0, [lr]
 8005b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b22:	b292      	uxth	r2, r2
 8005b24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b28:	45e1      	cmp	r9, ip
 8005b2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b2e:	f84e 2b04 	str.w	r2, [lr], #4
 8005b32:	d2de      	bcs.n	8005af2 <quorem+0x42>
 8005b34:	9b00      	ldr	r3, [sp, #0]
 8005b36:	58eb      	ldr	r3, [r5, r3]
 8005b38:	b92b      	cbnz	r3, 8005b46 <quorem+0x96>
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	3b04      	subs	r3, #4
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	d32f      	bcc.n	8005ba4 <quorem+0xf4>
 8005b44:	613c      	str	r4, [r7, #16]
 8005b46:	4638      	mov	r0, r7
 8005b48:	f001 f9c2 	bl	8006ed0 <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	db25      	blt.n	8005b9c <quorem+0xec>
 8005b50:	4629      	mov	r1, r5
 8005b52:	2000      	movs	r0, #0
 8005b54:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b58:	f8d1 c000 	ldr.w	ip, [r1]
 8005b5c:	fa1f fe82 	uxth.w	lr, r2
 8005b60:	fa1f f38c 	uxth.w	r3, ip
 8005b64:	eba3 030e 	sub.w	r3, r3, lr
 8005b68:	4403      	add	r3, r0
 8005b6a:	0c12      	lsrs	r2, r2, #16
 8005b6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b7a:	45c1      	cmp	r9, r8
 8005b7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b80:	f841 3b04 	str.w	r3, [r1], #4
 8005b84:	d2e6      	bcs.n	8005b54 <quorem+0xa4>
 8005b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b8e:	b922      	cbnz	r2, 8005b9a <quorem+0xea>
 8005b90:	3b04      	subs	r3, #4
 8005b92:	429d      	cmp	r5, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	d30b      	bcc.n	8005bb0 <quorem+0x100>
 8005b98:	613c      	str	r4, [r7, #16]
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	b003      	add	sp, #12
 8005ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	3b04      	subs	r3, #4
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d1cb      	bne.n	8005b44 <quorem+0x94>
 8005bac:	3c01      	subs	r4, #1
 8005bae:	e7c6      	b.n	8005b3e <quorem+0x8e>
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d1ef      	bne.n	8005b98 <quorem+0xe8>
 8005bb8:	3c01      	subs	r4, #1
 8005bba:	e7ea      	b.n	8005b92 <quorem+0xe2>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7ee      	b.n	8005b9e <quorem+0xee>

08005bc0 <_dtoa_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	69c7      	ldr	r7, [r0, #28]
 8005bca:	b097      	sub	sp, #92	@ 0x5c
 8005bcc:	4683      	mov	fp, r0
 8005bce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005bd4:	b97f      	cbnz	r7, 8005bf6 <_dtoa_r+0x36>
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	f000 fe02 	bl	80067e0 <malloc>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f8cb 001c 	str.w	r0, [fp, #28]
 8005be2:	b920      	cbnz	r0, 8005bee <_dtoa_r+0x2e>
 8005be4:	21ef      	movs	r1, #239	@ 0xef
 8005be6:	4ba8      	ldr	r3, [pc, #672]	@ (8005e88 <_dtoa_r+0x2c8>)
 8005be8:	48a8      	ldr	r0, [pc, #672]	@ (8005e8c <_dtoa_r+0x2cc>)
 8005bea:	f002 ffab 	bl	8008b44 <__assert_func>
 8005bee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bf2:	6007      	str	r7, [r0, #0]
 8005bf4:	60c7      	str	r7, [r0, #12]
 8005bf6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	b159      	cbz	r1, 8005c16 <_dtoa_r+0x56>
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	2301      	movs	r3, #1
 8005c02:	4093      	lsls	r3, r2
 8005c04:	604a      	str	r2, [r1, #4]
 8005c06:	608b      	str	r3, [r1, #8]
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fedf 	bl	80069cc <_Bfree>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	1e2b      	subs	r3, r5, #0
 8005c18:	bfaf      	iteee	ge
 8005c1a:	2300      	movge	r3, #0
 8005c1c:	2201      	movlt	r2, #1
 8005c1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c22:	9303      	strlt	r3, [sp, #12]
 8005c24:	bfa8      	it	ge
 8005c26:	6033      	strge	r3, [r6, #0]
 8005c28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c2c:	4b98      	ldr	r3, [pc, #608]	@ (8005e90 <_dtoa_r+0x2d0>)
 8005c2e:	bfb8      	it	lt
 8005c30:	6032      	strlt	r2, [r6, #0]
 8005c32:	ea33 0308 	bics.w	r3, r3, r8
 8005c36:	d112      	bne.n	8005c5e <_dtoa_r+0x9e>
 8005c38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c44:	4323      	orrs	r3, r4
 8005c46:	f000 8550 	beq.w	80066ea <_dtoa_r+0xb2a>
 8005c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005e94 <_dtoa_r+0x2d4>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8552 	beq.w	80066fa <_dtoa_r+0xb3a>
 8005c56:	f10a 0303 	add.w	r3, sl, #3
 8005c5a:	f000 bd4c 	b.w	80066f6 <_dtoa_r+0xb36>
 8005c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f7fa fea5 	bl	80009bc <__aeabi_dcmpeq>
 8005c72:	4607      	mov	r7, r0
 8005c74:	b158      	cbz	r0, 8005c8e <_dtoa_r+0xce>
 8005c76:	2301      	movs	r3, #1
 8005c78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c7e:	b113      	cbz	r3, 8005c86 <_dtoa_r+0xc6>
 8005c80:	4b85      	ldr	r3, [pc, #532]	@ (8005e98 <_dtoa_r+0x2d8>)
 8005c82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005e9c <_dtoa_r+0x2dc>
 8005c8a:	f000 bd36 	b.w	80066fa <_dtoa_r+0xb3a>
 8005c8e:	ab14      	add	r3, sp, #80	@ 0x50
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	ab15      	add	r3, sp, #84	@ 0x54
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4658      	mov	r0, fp
 8005c98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c9c:	f001 fa30 	bl	8007100 <__d2b>
 8005ca0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d077      	beq.n	8005d9a <_dtoa_r+0x1da>
 8005caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005cbc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005cc0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4b76      	ldr	r3, [pc, #472]	@ (8005ea0 <_dtoa_r+0x2e0>)
 8005cc8:	f7fa fa58 	bl	800017c <__aeabi_dsub>
 8005ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8005e70 <_dtoa_r+0x2b0>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fc0b 	bl	80004ec <__aeabi_dmul>
 8005cd6:	a368      	add	r3, pc, #416	@ (adr r3, 8005e78 <_dtoa_r+0x2b8>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fa50 	bl	8000180 <__adddf3>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	f7fa fb97 	bl	8000418 <__aeabi_i2d>
 8005cea:	a365      	add	r3, pc, #404	@ (adr r3, 8005e80 <_dtoa_r+0x2c0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fbfc 	bl	80004ec <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fa40 	bl	8000180 <__adddf3>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	f7fa fea2 	bl	8000a4c <__aeabi_d2iz>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fe5d 	bl	80009d0 <__aeabi_dcmplt>
 8005d16:	b140      	cbz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7fa fb7d 	bl	8000418 <__aeabi_i2d>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fe4b 	bl	80009bc <__aeabi_dcmpeq>
 8005d26:	b900      	cbnz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d28:	3f01      	subs	r7, #1
 8005d2a:	2f16      	cmp	r7, #22
 8005d2c:	d853      	bhi.n	8005dd6 <_dtoa_r+0x216>
 8005d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d32:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea4 <_dtoa_r+0x2e4>)
 8005d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fe48 	bl	80009d0 <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d04a      	beq.n	8005dda <_dtoa_r+0x21a>
 8005d44:	2300      	movs	r3, #0
 8005d46:	3f01      	subs	r7, #1
 8005d48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d4c:	1b9b      	subs	r3, r3, r6
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	bf46      	itte	mi
 8005d52:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d56:	2300      	movmi	r3, #0
 8005d58:	f04f 0800 	movpl.w	r8, #0
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	bf48      	it	mi
 8005d60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	db3b      	blt.n	8005dde <_dtoa_r+0x21e>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d6a:	443b      	add	r3, r7
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	2300      	movs	r3, #0
 8005d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d866      	bhi.n	8005e46 <_dtoa_r+0x286>
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	bfc4      	itt	gt
 8005d7c:	3b04      	subgt	r3, #4
 8005d7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005d80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d82:	bfc8      	it	gt
 8005d84:	2400      	movgt	r4, #0
 8005d86:	f1a3 0302 	sub.w	r3, r3, #2
 8005d8a:	bfd8      	it	le
 8005d8c:	2401      	movle	r4, #1
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d864      	bhi.n	8005e5c <_dtoa_r+0x29c>
 8005d92:	e8df f003 	tbb	[pc, r3]
 8005d96:	382b      	.short	0x382b
 8005d98:	5636      	.short	0x5636
 8005d9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d9e:	441e      	add	r6, r3
 8005da0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	bfc1      	itttt	gt
 8005da8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005db0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005db4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005db8:	bfd6      	itet	le
 8005dba:	f1c3 0320 	rsble	r3, r3, #32
 8005dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005dc2:	fa04 f003 	lslle.w	r0, r4, r3
 8005dc6:	f7fa fb17 	bl	80003f8 <__aeabi_ui2d>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005dd0:	3e01      	subs	r6, #1
 8005dd2:	9212      	str	r2, [sp, #72]	@ 0x48
 8005dd4:	e775      	b.n	8005cc2 <_dtoa_r+0x102>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7b6      	b.n	8005d48 <_dtoa_r+0x188>
 8005dda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ddc:	e7b5      	b.n	8005d4a <_dtoa_r+0x18a>
 8005dde:	427b      	negs	r3, r7
 8005de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de2:	2300      	movs	r3, #0
 8005de4:	eba8 0807 	sub.w	r8, r8, r7
 8005de8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dea:	e7c2      	b.n	8005d72 <_dtoa_r+0x1b2>
 8005dec:	2300      	movs	r3, #0
 8005dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc35      	bgt.n	8005e62 <_dtoa_r+0x2a2>
 8005df6:	2301      	movs	r3, #1
 8005df8:	461a      	mov	r2, r3
 8005dfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dfe:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e00:	e00b      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e7f3      	b.n	8005dee <_dtoa_r+0x22e>
 8005e06:	2300      	movs	r3, #0
 8005e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	3301      	adds	r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	9307      	str	r3, [sp, #28]
 8005e16:	bfb8      	it	lt
 8005e18:	2301      	movlt	r3, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e22:	f102 0514 	add.w	r5, r2, #20
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d91f      	bls.n	8005e6a <_dtoa_r+0x2aa>
 8005e2a:	6041      	str	r1, [r0, #4]
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fd8d 	bl	800694c <_Balloc>
 8005e32:	4682      	mov	sl, r0
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d139      	bne.n	8005eac <_dtoa_r+0x2ec>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <_dtoa_r+0x2e8>)
 8005e40:	e6d2      	b.n	8005be8 <_dtoa_r+0x28>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7e0      	b.n	8005e08 <_dtoa_r+0x248>
 8005e46:	2401      	movs	r4, #1
 8005e48:	2300      	movs	r3, #0
 8005e4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	2200      	movs	r2, #0
 8005e54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e58:	2312      	movs	r3, #18
 8005e5a:	e7d0      	b.n	8005dfe <_dtoa_r+0x23e>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e60:	e7f5      	b.n	8005e4e <_dtoa_r+0x28e>
 8005e62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e68:	e7d7      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	e7d8      	b.n	8005e22 <_dtoa_r+0x262>
 8005e70:	636f4361 	.word	0x636f4361
 8005e74:	3fd287a7 	.word	0x3fd287a7
 8005e78:	8b60c8b3 	.word	0x8b60c8b3
 8005e7c:	3fc68a28 	.word	0x3fc68a28
 8005e80:	509f79fb 	.word	0x509f79fb
 8005e84:	3fd34413 	.word	0x3fd34413
 8005e88:	08009d4a 	.word	0x08009d4a
 8005e8c:	08009d61 	.word	0x08009d61
 8005e90:	7ff00000 	.word	0x7ff00000
 8005e94:	08009d46 	.word	0x08009d46
 8005e98:	0800a0a1 	.word	0x0800a0a1
 8005e9c:	0800a0a0 	.word	0x0800a0a0
 8005ea0:	3ff80000 	.word	0x3ff80000
 8005ea4:	08009e58 	.word	0x08009e58
 8005ea8:	08009db9 	.word	0x08009db9
 8005eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eb0:	6018      	str	r0, [r3, #0]
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	f200 80a4 	bhi.w	8006002 <_dtoa_r+0x442>
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	f000 80a1 	beq.w	8006002 <_dtoa_r+0x442>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	dd33      	ble.n	8005f2c <_dtoa_r+0x36c>
 8005ec4:	4b86      	ldr	r3, [pc, #536]	@ (80060e0 <_dtoa_r+0x520>)
 8005ec6:	f007 020f 	and.w	r2, r7, #15
 8005eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ece:	05f8      	lsls	r0, r7, #23
 8005ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ed8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005edc:	d516      	bpl.n	8005f0c <_dtoa_r+0x34c>
 8005ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ee2:	4b80      	ldr	r3, [pc, #512]	@ (80060e4 <_dtoa_r+0x524>)
 8005ee4:	2603      	movs	r6, #3
 8005ee6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eea:	f7fa fc29 	bl	8000740 <__aeabi_ddiv>
 8005eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef2:	f004 040f 	and.w	r4, r4, #15
 8005ef6:	4d7b      	ldr	r5, [pc, #492]	@ (80060e4 <_dtoa_r+0x524>)
 8005ef8:	b954      	cbnz	r4, 8005f10 <_dtoa_r+0x350>
 8005efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f02:	f7fa fc1d 	bl	8000740 <__aeabi_ddiv>
 8005f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0a:	e028      	b.n	8005f5e <_dtoa_r+0x39e>
 8005f0c:	2602      	movs	r6, #2
 8005f0e:	e7f2      	b.n	8005ef6 <_dtoa_r+0x336>
 8005f10:	07e1      	lsls	r1, r4, #31
 8005f12:	d508      	bpl.n	8005f26 <_dtoa_r+0x366>
 8005f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f1c:	f7fa fae6 	bl	80004ec <__aeabi_dmul>
 8005f20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f24:	3601      	adds	r6, #1
 8005f26:	1064      	asrs	r4, r4, #1
 8005f28:	3508      	adds	r5, #8
 8005f2a:	e7e5      	b.n	8005ef8 <_dtoa_r+0x338>
 8005f2c:	f000 80d2 	beq.w	80060d4 <_dtoa_r+0x514>
 8005f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f34:	427c      	negs	r4, r7
 8005f36:	4b6a      	ldr	r3, [pc, #424]	@ (80060e0 <_dtoa_r+0x520>)
 8005f38:	f004 020f 	and.w	r2, r4, #15
 8005f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fad2 	bl	80004ec <__aeabi_dmul>
 8005f48:	2602      	movs	r6, #2
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f50:	4d64      	ldr	r5, [pc, #400]	@ (80060e4 <_dtoa_r+0x524>)
 8005f52:	1124      	asrs	r4, r4, #4
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f040 80b2 	bne.w	80060be <_dtoa_r+0x4fe>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1d3      	bne.n	8005f06 <_dtoa_r+0x346>
 8005f5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80b7 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4b5d      	ldr	r3, [pc, #372]	@ (80060e8 <_dtoa_r+0x528>)
 8005f72:	f7fa fd2d 	bl	80009d0 <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f000 80ae 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80aa 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f84:	9b08      	ldr	r3, [sp, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd37      	ble.n	8005ffa <_dtoa_r+0x43a>
 8005f8a:	1e7b      	subs	r3, r7, #1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	2200      	movs	r2, #0
 8005f92:	4629      	mov	r1, r5
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <_dtoa_r+0x52c>)
 8005f96:	f7fa faa9 	bl	80004ec <__aeabi_dmul>
 8005f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9e:	9c08      	ldr	r4, [sp, #32]
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7fa fa38 	bl	8000418 <__aeabi_i2d>
 8005fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fac:	f7fa fa9e 	bl	80004ec <__aeabi_dmul>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80060f0 <_dtoa_r+0x530>)
 8005fb4:	f7fa f8e4 	bl	8000180 <__adddf3>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	f040 809a 	bne.w	80060f8 <_dtoa_r+0x538>
 8005fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4b4a      	ldr	r3, [pc, #296]	@ (80060f4 <_dtoa_r+0x534>)
 8005fcc:	f7fa f8d6 	bl	800017c <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4633      	mov	r3, r6
 8005fdc:	f7fa fd16 	bl	8000a0c <__aeabi_dcmpgt>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f040 828e 	bne.w	8006502 <_dtoa_r+0x942>
 8005fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fea:	462a      	mov	r2, r5
 8005fec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ff0:	f7fa fcee 	bl	80009d0 <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 8127 	bne.w	8006248 <_dtoa_r+0x688>
 8005ffa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006002:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006004:	2b00      	cmp	r3, #0
 8006006:	f2c0 8163 	blt.w	80062d0 <_dtoa_r+0x710>
 800600a:	2f0e      	cmp	r7, #14
 800600c:	f300 8160 	bgt.w	80062d0 <_dtoa_r+0x710>
 8006010:	4b33      	ldr	r3, [pc, #204]	@ (80060e0 <_dtoa_r+0x520>)
 8006012:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800601a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800601e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006020:	2b00      	cmp	r3, #0
 8006022:	da03      	bge.n	800602c <_dtoa_r+0x46c>
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f340 8100 	ble.w	800622c <_dtoa_r+0x66c>
 800602c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006030:	4656      	mov	r6, sl
 8006032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa fb81 	bl	8000740 <__aeabi_ddiv>
 800603e:	f7fa fd05 	bl	8000a4c <__aeabi_d2iz>
 8006042:	4680      	mov	r8, r0
 8006044:	f7fa f9e8 	bl	8000418 <__aeabi_i2d>
 8006048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604c:	f7fa fa4e 	bl	80004ec <__aeabi_dmul>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa f890 	bl	800017c <__aeabi_dsub>
 800605c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006060:	9d07      	ldr	r5, [sp, #28]
 8006062:	f806 4b01 	strb.w	r4, [r6], #1
 8006066:	eba6 040a 	sub.w	r4, r6, sl
 800606a:	42a5      	cmp	r5, r4
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	f040 8116 	bne.w	80062a0 <_dtoa_r+0x6e0>
 8006074:	f7fa f884 	bl	8000180 <__adddf3>
 8006078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607c:	4604      	mov	r4, r0
 800607e:	460d      	mov	r5, r1
 8006080:	f7fa fcc4 	bl	8000a0c <__aeabi_dcmpgt>
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 80f8 	bne.w	800627a <_dtoa_r+0x6ba>
 800608a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fc93 	bl	80009bc <__aeabi_dcmpeq>
 8006096:	b118      	cbz	r0, 80060a0 <_dtoa_r+0x4e0>
 8006098:	f018 0f01 	tst.w	r8, #1
 800609c:	f040 80ed 	bne.w	800627a <_dtoa_r+0x6ba>
 80060a0:	4649      	mov	r1, r9
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 fc92 	bl	80069cc <_Bfree>
 80060a8:	2300      	movs	r3, #0
 80060aa:	7033      	strb	r3, [r6, #0]
 80060ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060ae:	3701      	adds	r7, #1
 80060b0:	601f      	str	r7, [r3, #0]
 80060b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8320 	beq.w	80066fa <_dtoa_r+0xb3a>
 80060ba:	601e      	str	r6, [r3, #0]
 80060bc:	e31d      	b.n	80066fa <_dtoa_r+0xb3a>
 80060be:	07e2      	lsls	r2, r4, #31
 80060c0:	d505      	bpl.n	80060ce <_dtoa_r+0x50e>
 80060c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060c6:	f7fa fa11 	bl	80004ec <__aeabi_dmul>
 80060ca:	2301      	movs	r3, #1
 80060cc:	3601      	adds	r6, #1
 80060ce:	1064      	asrs	r4, r4, #1
 80060d0:	3508      	adds	r5, #8
 80060d2:	e73f      	b.n	8005f54 <_dtoa_r+0x394>
 80060d4:	2602      	movs	r6, #2
 80060d6:	e742      	b.n	8005f5e <_dtoa_r+0x39e>
 80060d8:	9c07      	ldr	r4, [sp, #28]
 80060da:	9704      	str	r7, [sp, #16]
 80060dc:	e761      	b.n	8005fa2 <_dtoa_r+0x3e2>
 80060de:	bf00      	nop
 80060e0:	08009e58 	.word	0x08009e58
 80060e4:	08009e30 	.word	0x08009e30
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	40240000 	.word	0x40240000
 80060f0:	401c0000 	.word	0x401c0000
 80060f4:	40140000 	.word	0x40140000
 80060f8:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <_dtoa_r+0x6fc>)
 80060fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006104:	4454      	add	r4, sl
 8006106:	2900      	cmp	r1, #0
 8006108:	d045      	beq.n	8006196 <_dtoa_r+0x5d6>
 800610a:	2000      	movs	r0, #0
 800610c:	496c      	ldr	r1, [pc, #432]	@ (80062c0 <_dtoa_r+0x700>)
 800610e:	f7fa fb17 	bl	8000740 <__aeabi_ddiv>
 8006112:	4633      	mov	r3, r6
 8006114:	462a      	mov	r2, r5
 8006116:	f7fa f831 	bl	800017c <__aeabi_dsub>
 800611a:	4656      	mov	r6, sl
 800611c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006124:	f7fa fc92 	bl	8000a4c <__aeabi_d2iz>
 8006128:	4605      	mov	r5, r0
 800612a:	f7fa f975 	bl	8000418 <__aeabi_i2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006136:	f7fa f821 	bl	800017c <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	3530      	adds	r5, #48	@ 0x30
 8006140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006148:	f806 5b01 	strb.w	r5, [r6], #1
 800614c:	f7fa fc40 	bl	80009d0 <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d163      	bne.n	800621c <_dtoa_r+0x65c>
 8006154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006158:	2000      	movs	r0, #0
 800615a:	495a      	ldr	r1, [pc, #360]	@ (80062c4 <_dtoa_r+0x704>)
 800615c:	f7fa f80e 	bl	800017c <__aeabi_dsub>
 8006160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006164:	f7fa fc34 	bl	80009d0 <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 8087 	bne.w	800627c <_dtoa_r+0x6bc>
 800616e:	42a6      	cmp	r6, r4
 8006170:	f43f af43 	beq.w	8005ffa <_dtoa_r+0x43a>
 8006174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006178:	2200      	movs	r2, #0
 800617a:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <_dtoa_r+0x708>)
 800617c:	f7fa f9b6 	bl	80004ec <__aeabi_dmul>
 8006180:	2200      	movs	r2, #0
 8006182:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	4b4f      	ldr	r3, [pc, #316]	@ (80062c8 <_dtoa_r+0x708>)
 800618c:	f7fa f9ae 	bl	80004ec <__aeabi_dmul>
 8006190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006194:	e7c4      	b.n	8006120 <_dtoa_r+0x560>
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	f7fa f9a7 	bl	80004ec <__aeabi_dmul>
 800619e:	4656      	mov	r6, sl
 80061a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061aa:	f7fa fc4f 	bl	8000a4c <__aeabi_d2iz>
 80061ae:	4605      	mov	r5, r0
 80061b0:	f7fa f932 	bl	8000418 <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061bc:	f7f9 ffde 	bl	800017c <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	3530      	adds	r5, #48	@ 0x30
 80061c6:	f806 5b01 	strb.w	r5, [r6], #1
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	d124      	bne.n	8006220 <_dtoa_r+0x660>
 80061d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <_dtoa_r+0x700>)
 80061dc:	f7f9 ffd0 	bl	8000180 <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e8:	f7fa fc10 	bl	8000a0c <__aeabi_dcmpgt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d145      	bne.n	800627c <_dtoa_r+0x6bc>
 80061f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061f4:	2000      	movs	r0, #0
 80061f6:	4932      	ldr	r1, [pc, #200]	@ (80062c0 <_dtoa_r+0x700>)
 80061f8:	f7f9 ffc0 	bl	800017c <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006204:	f7fa fbe4 	bl	80009d0 <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f aef6 	beq.w	8005ffa <_dtoa_r+0x43a>
 800620e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006210:	1e73      	subs	r3, r6, #1
 8006212:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006218:	2b30      	cmp	r3, #48	@ 0x30
 800621a:	d0f8      	beq.n	800620e <_dtoa_r+0x64e>
 800621c:	9f04      	ldr	r7, [sp, #16]
 800621e:	e73f      	b.n	80060a0 <_dtoa_r+0x4e0>
 8006220:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <_dtoa_r+0x708>)
 8006222:	f7fa f963 	bl	80004ec <__aeabi_dmul>
 8006226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622a:	e7bc      	b.n	80061a6 <_dtoa_r+0x5e6>
 800622c:	d10c      	bne.n	8006248 <_dtoa_r+0x688>
 800622e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006232:	2200      	movs	r2, #0
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <_dtoa_r+0x70c>)
 8006236:	f7fa f959 	bl	80004ec <__aeabi_dmul>
 800623a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623e:	f7fa fbdb 	bl	80009f8 <__aeabi_dcmpge>
 8006242:	2800      	cmp	r0, #0
 8006244:	f000 815b 	beq.w	80064fe <_dtoa_r+0x93e>
 8006248:	2400      	movs	r4, #0
 800624a:	4625      	mov	r5, r4
 800624c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800624e:	4656      	mov	r6, sl
 8006250:	43db      	mvns	r3, r3
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	2700      	movs	r7, #0
 8006256:	4621      	mov	r1, r4
 8006258:	4658      	mov	r0, fp
 800625a:	f000 fbb7 	bl	80069cc <_Bfree>
 800625e:	2d00      	cmp	r5, #0
 8006260:	d0dc      	beq.n	800621c <_dtoa_r+0x65c>
 8006262:	b12f      	cbz	r7, 8006270 <_dtoa_r+0x6b0>
 8006264:	42af      	cmp	r7, r5
 8006266:	d003      	beq.n	8006270 <_dtoa_r+0x6b0>
 8006268:	4639      	mov	r1, r7
 800626a:	4658      	mov	r0, fp
 800626c:	f000 fbae 	bl	80069cc <_Bfree>
 8006270:	4629      	mov	r1, r5
 8006272:	4658      	mov	r0, fp
 8006274:	f000 fbaa 	bl	80069cc <_Bfree>
 8006278:	e7d0      	b.n	800621c <_dtoa_r+0x65c>
 800627a:	9704      	str	r7, [sp, #16]
 800627c:	4633      	mov	r3, r6
 800627e:	461e      	mov	r6, r3
 8006280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006284:	2a39      	cmp	r2, #57	@ 0x39
 8006286:	d107      	bne.n	8006298 <_dtoa_r+0x6d8>
 8006288:	459a      	cmp	sl, r3
 800628a:	d1f8      	bne.n	800627e <_dtoa_r+0x6be>
 800628c:	9a04      	ldr	r2, [sp, #16]
 800628e:	3201      	adds	r2, #1
 8006290:	9204      	str	r2, [sp, #16]
 8006292:	2230      	movs	r2, #48	@ 0x30
 8006294:	f88a 2000 	strb.w	r2, [sl]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	3201      	adds	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e7bd      	b.n	800621c <_dtoa_r+0x65c>
 80062a0:	2200      	movs	r2, #0
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <_dtoa_r+0x708>)
 80062a4:	f7fa f922 	bl	80004ec <__aeabi_dmul>
 80062a8:	2200      	movs	r2, #0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	f7fa fb84 	bl	80009bc <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f43f aebc 	beq.w	8006032 <_dtoa_r+0x472>
 80062ba:	e6f1      	b.n	80060a0 <_dtoa_r+0x4e0>
 80062bc:	08009e58 	.word	0x08009e58
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	3ff00000 	.word	0x3ff00000
 80062c8:	40240000 	.word	0x40240000
 80062cc:	40140000 	.word	0x40140000
 80062d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	f000 80db 	beq.w	800648e <_dtoa_r+0x8ce>
 80062d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062da:	2a01      	cmp	r2, #1
 80062dc:	f300 80bf 	bgt.w	800645e <_dtoa_r+0x89e>
 80062e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	f000 80b7 	beq.w	8006456 <_dtoa_r+0x896>
 80062e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ec:	4646      	mov	r6, r8
 80062ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f2:	2101      	movs	r1, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	4658      	mov	r0, fp
 80062f8:	4498      	add	r8, r3
 80062fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fc:	f000 fc64 	bl	8006bc8 <__i2b>
 8006300:	4605      	mov	r5, r0
 8006302:	b15e      	cbz	r6, 800631c <_dtoa_r+0x75c>
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd08      	ble.n	800631c <_dtoa_r+0x75c>
 800630a:	42b3      	cmp	r3, r6
 800630c:	bfa8      	it	ge
 800630e:	4633      	movge	r3, r6
 8006310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006312:	eba8 0803 	sub.w	r8, r8, r3
 8006316:	1af6      	subs	r6, r6, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	9309      	str	r3, [sp, #36]	@ 0x24
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	b1f3      	cbz	r3, 800635e <_dtoa_r+0x79e>
 8006320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80b7 	beq.w	8006496 <_dtoa_r+0x8d6>
 8006328:	b18c      	cbz	r4, 800634e <_dtoa_r+0x78e>
 800632a:	4629      	mov	r1, r5
 800632c:	4622      	mov	r2, r4
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fd08 	bl	8006d44 <__pow5mult>
 8006334:	464a      	mov	r2, r9
 8006336:	4601      	mov	r1, r0
 8006338:	4605      	mov	r5, r0
 800633a:	4658      	mov	r0, fp
 800633c:	f000 fc5a 	bl	8006bf4 <__multiply>
 8006340:	4649      	mov	r1, r9
 8006342:	9004      	str	r0, [sp, #16]
 8006344:	4658      	mov	r0, fp
 8006346:	f000 fb41 	bl	80069cc <_Bfree>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	4699      	mov	r9, r3
 800634e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006350:	1b1a      	subs	r2, r3, r4
 8006352:	d004      	beq.n	800635e <_dtoa_r+0x79e>
 8006354:	4649      	mov	r1, r9
 8006356:	4658      	mov	r0, fp
 8006358:	f000 fcf4 	bl	8006d44 <__pow5mult>
 800635c:	4681      	mov	r9, r0
 800635e:	2101      	movs	r1, #1
 8006360:	4658      	mov	r0, fp
 8006362:	f000 fc31 	bl	8006bc8 <__i2b>
 8006366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006368:	4604      	mov	r4, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 81c9 	beq.w	8006702 <_dtoa_r+0xb42>
 8006370:	461a      	mov	r2, r3
 8006372:	4601      	mov	r1, r0
 8006374:	4658      	mov	r0, fp
 8006376:	f000 fce5 	bl	8006d44 <__pow5mult>
 800637a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800637c:	4604      	mov	r4, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	f300 808f 	bgt.w	80064a2 <_dtoa_r+0x8e2>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 8087 	bne.w	800649a <_dtoa_r+0x8da>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 8083 	bne.w	800649e <_dtoa_r+0x8de>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800639e:	0d1b      	lsrs	r3, r3, #20
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	b12b      	cbz	r3, 80063b0 <_dtoa_r+0x7f0>
 80063a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	3301      	adds	r3, #1
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	2301      	movs	r3, #1
 80063b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 81aa 	beq.w	800670e <_dtoa_r+0xb4e>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063c0:	6918      	ldr	r0, [r3, #16]
 80063c2:	f000 fbb5 	bl	8006b30 <__hi0bits>
 80063c6:	f1c0 0020 	rsb	r0, r0, #32
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	4418      	add	r0, r3
 80063ce:	f010 001f 	ands.w	r0, r0, #31
 80063d2:	d071      	beq.n	80064b8 <_dtoa_r+0x8f8>
 80063d4:	f1c0 0320 	rsb	r3, r0, #32
 80063d8:	2b04      	cmp	r3, #4
 80063da:	dd65      	ble.n	80064a8 <_dtoa_r+0x8e8>
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	f1c0 001c 	rsb	r0, r0, #28
 80063e2:	4403      	add	r3, r0
 80063e4:	4480      	add	r8, r0
 80063e6:	4406      	add	r6, r0
 80063e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd05      	ble.n	80063fc <_dtoa_r+0x83c>
 80063f0:	4649      	mov	r1, r9
 80063f2:	4642      	mov	r2, r8
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 fcff 	bl	8006df8 <__lshift>
 80063fa:	4681      	mov	r9, r0
 80063fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd05      	ble.n	800640e <_dtoa_r+0x84e>
 8006402:	4621      	mov	r1, r4
 8006404:	461a      	mov	r2, r3
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fcf6 	bl	8006df8 <__lshift>
 800640c:	4604      	mov	r4, r0
 800640e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d053      	beq.n	80064bc <_dtoa_r+0x8fc>
 8006414:	4621      	mov	r1, r4
 8006416:	4648      	mov	r0, r9
 8006418:	f000 fd5a 	bl	8006ed0 <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	da4d      	bge.n	80064bc <_dtoa_r+0x8fc>
 8006420:	1e7b      	subs	r3, r7, #1
 8006422:	4649      	mov	r1, r9
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	220a      	movs	r2, #10
 8006428:	2300      	movs	r3, #0
 800642a:	4658      	mov	r0, fp
 800642c:	f000 faf0 	bl	8006a10 <__multadd>
 8006430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006432:	4681      	mov	r9, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 816c 	beq.w	8006712 <_dtoa_r+0xb52>
 800643a:	2300      	movs	r3, #0
 800643c:	4629      	mov	r1, r5
 800643e:	220a      	movs	r2, #10
 8006440:	4658      	mov	r0, fp
 8006442:	f000 fae5 	bl	8006a10 <__multadd>
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	4605      	mov	r5, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc61      	bgt.n	8006512 <_dtoa_r+0x952>
 800644e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006450:	2b02      	cmp	r3, #2
 8006452:	dc3b      	bgt.n	80064cc <_dtoa_r+0x90c>
 8006454:	e05d      	b.n	8006512 <_dtoa_r+0x952>
 8006456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006458:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800645c:	e746      	b.n	80062ec <_dtoa_r+0x72c>
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	1e5c      	subs	r4, r3, #1
 8006462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006464:	42a3      	cmp	r3, r4
 8006466:	bfbf      	itttt	lt
 8006468:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800646a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800646c:	1ae3      	sublt	r3, r4, r3
 800646e:	18d2      	addlt	r2, r2, r3
 8006470:	bfa8      	it	ge
 8006472:	1b1c      	subge	r4, r3, r4
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	bfbe      	ittt	lt
 8006478:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800647a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800647c:	2400      	movlt	r4, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb5      	itete	lt
 8006482:	eba8 0603 	sublt.w	r6, r8, r3
 8006486:	4646      	movge	r6, r8
 8006488:	2300      	movlt	r3, #0
 800648a:	9b07      	ldrge	r3, [sp, #28]
 800648c:	e730      	b.n	80062f0 <_dtoa_r+0x730>
 800648e:	4646      	mov	r6, r8
 8006490:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006492:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006494:	e735      	b.n	8006302 <_dtoa_r+0x742>
 8006496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006498:	e75c      	b.n	8006354 <_dtoa_r+0x794>
 800649a:	2300      	movs	r3, #0
 800649c:	e788      	b.n	80063b0 <_dtoa_r+0x7f0>
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	e786      	b.n	80063b0 <_dtoa_r+0x7f0>
 80064a2:	2300      	movs	r3, #0
 80064a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a6:	e788      	b.n	80063ba <_dtoa_r+0x7fa>
 80064a8:	d09f      	beq.n	80063ea <_dtoa_r+0x82a>
 80064aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ac:	331c      	adds	r3, #28
 80064ae:	441a      	add	r2, r3
 80064b0:	4498      	add	r8, r3
 80064b2:	441e      	add	r6, r3
 80064b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b6:	e798      	b.n	80063ea <_dtoa_r+0x82a>
 80064b8:	4603      	mov	r3, r0
 80064ba:	e7f6      	b.n	80064aa <_dtoa_r+0x8ea>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	9704      	str	r7, [sp, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc20      	bgt.n	8006506 <_dtoa_r+0x946>
 80064c4:	9308      	str	r3, [sp, #32]
 80064c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	dd1e      	ble.n	800650a <_dtoa_r+0x94a>
 80064cc:	9b08      	ldr	r3, [sp, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f aebc 	bne.w	800624c <_dtoa_r+0x68c>
 80064d4:	4621      	mov	r1, r4
 80064d6:	2205      	movs	r2, #5
 80064d8:	4658      	mov	r0, fp
 80064da:	f000 fa99 	bl	8006a10 <__multadd>
 80064de:	4601      	mov	r1, r0
 80064e0:	4604      	mov	r4, r0
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fcf4 	bl	8006ed0 <__mcmp>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f77f aeaf 	ble.w	800624c <_dtoa_r+0x68c>
 80064ee:	2331      	movs	r3, #49	@ 0x31
 80064f0:	4656      	mov	r6, sl
 80064f2:	f806 3b01 	strb.w	r3, [r6], #1
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	e6aa      	b.n	8006254 <_dtoa_r+0x694>
 80064fe:	9c07      	ldr	r4, [sp, #28]
 8006500:	9704      	str	r7, [sp, #16]
 8006502:	4625      	mov	r5, r4
 8006504:	e7f3      	b.n	80064ee <_dtoa_r+0x92e>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	9308      	str	r3, [sp, #32]
 800650a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8104 	beq.w	800671a <_dtoa_r+0xb5a>
 8006512:	2e00      	cmp	r6, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x962>
 8006516:	4629      	mov	r1, r5
 8006518:	4632      	mov	r2, r6
 800651a:	4658      	mov	r0, fp
 800651c:	f000 fc6c 	bl	8006df8 <__lshift>
 8006520:	4605      	mov	r5, r0
 8006522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05a      	beq.n	80065de <_dtoa_r+0xa1e>
 8006528:	4658      	mov	r0, fp
 800652a:	6869      	ldr	r1, [r5, #4]
 800652c:	f000 fa0e 	bl	800694c <_Balloc>
 8006530:	4606      	mov	r6, r0
 8006532:	b928      	cbnz	r0, 8006540 <_dtoa_r+0x980>
 8006534:	4602      	mov	r2, r0
 8006536:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800653a:	4b83      	ldr	r3, [pc, #524]	@ (8006748 <_dtoa_r+0xb88>)
 800653c:	f7ff bb54 	b.w	8005be8 <_dtoa_r+0x28>
 8006540:	692a      	ldr	r2, [r5, #16]
 8006542:	f105 010c 	add.w	r1, r5, #12
 8006546:	3202      	adds	r2, #2
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	300c      	adds	r0, #12
 800654c:	f002 fae6 	bl	8008b1c <memcpy>
 8006550:	2201      	movs	r2, #1
 8006552:	4631      	mov	r1, r6
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fc4f 	bl	8006df8 <__lshift>
 800655a:	462f      	mov	r7, r5
 800655c:	4605      	mov	r5, r0
 800655e:	f10a 0301 	add.w	r3, sl, #1
 8006562:	9307      	str	r3, [sp, #28]
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	4453      	add	r3, sl
 8006568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	930a      	str	r3, [sp, #40]	@ 0x28
 8006572:	9b07      	ldr	r3, [sp, #28]
 8006574:	4621      	mov	r1, r4
 8006576:	3b01      	subs	r3, #1
 8006578:	4648      	mov	r0, r9
 800657a:	9302      	str	r3, [sp, #8]
 800657c:	f7ff fa98 	bl	8005ab0 <quorem>
 8006580:	4639      	mov	r1, r7
 8006582:	9008      	str	r0, [sp, #32]
 8006584:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006588:	4648      	mov	r0, r9
 800658a:	f000 fca1 	bl	8006ed0 <__mcmp>
 800658e:	462a      	mov	r2, r5
 8006590:	9009      	str	r0, [sp, #36]	@ 0x24
 8006592:	4621      	mov	r1, r4
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fcb7 	bl	8006f08 <__mdiff>
 800659a:	68c2      	ldr	r2, [r0, #12]
 800659c:	4606      	mov	r6, r0
 800659e:	bb02      	cbnz	r2, 80065e2 <_dtoa_r+0xa22>
 80065a0:	4601      	mov	r1, r0
 80065a2:	4648      	mov	r0, r9
 80065a4:	f000 fc94 	bl	8006ed0 <__mcmp>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4631      	mov	r1, r6
 80065ac:	4658      	mov	r0, fp
 80065ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80065b0:	f000 fa0c 	bl	80069cc <_Bfree>
 80065b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065b8:	9e07      	ldr	r6, [sp, #28]
 80065ba:	ea43 0102 	orr.w	r1, r3, r2
 80065be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c0:	4319      	orrs	r1, r3
 80065c2:	d110      	bne.n	80065e6 <_dtoa_r+0xa26>
 80065c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065c8:	d029      	beq.n	800661e <_dtoa_r+0xa5e>
 80065ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd02      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	f883 8000 	strb.w	r8, [r3]
 80065dc:	e63b      	b.n	8006256 <_dtoa_r+0x696>
 80065de:	4628      	mov	r0, r5
 80065e0:	e7bb      	b.n	800655a <_dtoa_r+0x99a>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e7e1      	b.n	80065aa <_dtoa_r+0x9ea>
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db04      	blt.n	80065f6 <_dtoa_r+0xa36>
 80065ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80065ee:	430b      	orrs	r3, r1
 80065f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d120      	bne.n	8006638 <_dtoa_r+0xa78>
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	dded      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065fa:	4649      	mov	r1, r9
 80065fc:	2201      	movs	r2, #1
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fbfa 	bl	8006df8 <__lshift>
 8006604:	4621      	mov	r1, r4
 8006606:	4681      	mov	r9, r0
 8006608:	f000 fc62 	bl	8006ed0 <__mcmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	dc03      	bgt.n	8006618 <_dtoa_r+0xa58>
 8006610:	d1e1      	bne.n	80065d6 <_dtoa_r+0xa16>
 8006612:	f018 0f01 	tst.w	r8, #1
 8006616:	d0de      	beq.n	80065d6 <_dtoa_r+0xa16>
 8006618:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661c:	d1d8      	bne.n	80065d0 <_dtoa_r+0xa10>
 800661e:	2339      	movs	r3, #57	@ 0x39
 8006620:	9a02      	ldr	r2, [sp, #8]
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	4633      	mov	r3, r6
 8006626:	461e      	mov	r6, r3
 8006628:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800662c:	3b01      	subs	r3, #1
 800662e:	2a39      	cmp	r2, #57	@ 0x39
 8006630:	d052      	beq.n	80066d8 <_dtoa_r+0xb18>
 8006632:	3201      	adds	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e60e      	b.n	8006256 <_dtoa_r+0x696>
 8006638:	2a00      	cmp	r2, #0
 800663a:	dd07      	ble.n	800664c <_dtoa_r+0xa8c>
 800663c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006640:	d0ed      	beq.n	800661e <_dtoa_r+0xa5e>
 8006642:	9a02      	ldr	r2, [sp, #8]
 8006644:	f108 0301 	add.w	r3, r8, #1
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	e604      	b.n	8006256 <_dtoa_r+0x696>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006656:	4293      	cmp	r3, r2
 8006658:	d028      	beq.n	80066ac <_dtoa_r+0xaec>
 800665a:	4649      	mov	r1, r9
 800665c:	2300      	movs	r3, #0
 800665e:	220a      	movs	r2, #10
 8006660:	4658      	mov	r0, fp
 8006662:	f000 f9d5 	bl	8006a10 <__multadd>
 8006666:	42af      	cmp	r7, r5
 8006668:	4681      	mov	r9, r0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 020a 	mov.w	r2, #10
 8006672:	4639      	mov	r1, r7
 8006674:	4658      	mov	r0, fp
 8006676:	d107      	bne.n	8006688 <_dtoa_r+0xac8>
 8006678:	f000 f9ca 	bl	8006a10 <__multadd>
 800667c:	4607      	mov	r7, r0
 800667e:	4605      	mov	r5, r0
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	e774      	b.n	8006572 <_dtoa_r+0x9b2>
 8006688:	f000 f9c2 	bl	8006a10 <__multadd>
 800668c:	4629      	mov	r1, r5
 800668e:	4607      	mov	r7, r0
 8006690:	2300      	movs	r3, #0
 8006692:	220a      	movs	r2, #10
 8006694:	4658      	mov	r0, fp
 8006696:	f000 f9bb 	bl	8006a10 <__multadd>
 800669a:	4605      	mov	r5, r0
 800669c:	e7f0      	b.n	8006680 <_dtoa_r+0xac0>
 800669e:	9b08      	ldr	r3, [sp, #32]
 80066a0:	2700      	movs	r7, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfcc      	ite	gt
 80066a6:	461e      	movgt	r6, r3
 80066a8:	2601      	movle	r6, #1
 80066aa:	4456      	add	r6, sl
 80066ac:	4649      	mov	r1, r9
 80066ae:	2201      	movs	r2, #1
 80066b0:	4658      	mov	r0, fp
 80066b2:	f000 fba1 	bl	8006df8 <__lshift>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4681      	mov	r9, r0
 80066ba:	f000 fc09 	bl	8006ed0 <__mcmp>
 80066be:	2800      	cmp	r0, #0
 80066c0:	dcb0      	bgt.n	8006624 <_dtoa_r+0xa64>
 80066c2:	d102      	bne.n	80066ca <_dtoa_r+0xb0a>
 80066c4:	f018 0f01 	tst.w	r8, #1
 80066c8:	d1ac      	bne.n	8006624 <_dtoa_r+0xa64>
 80066ca:	4633      	mov	r3, r6
 80066cc:	461e      	mov	r6, r3
 80066ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066d2:	2a30      	cmp	r2, #48	@ 0x30
 80066d4:	d0fa      	beq.n	80066cc <_dtoa_r+0xb0c>
 80066d6:	e5be      	b.n	8006256 <_dtoa_r+0x696>
 80066d8:	459a      	cmp	sl, r3
 80066da:	d1a4      	bne.n	8006626 <_dtoa_r+0xa66>
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	3301      	adds	r3, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	2331      	movs	r3, #49	@ 0x31
 80066e4:	f88a 3000 	strb.w	r3, [sl]
 80066e8:	e5b5      	b.n	8006256 <_dtoa_r+0x696>
 80066ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800674c <_dtoa_r+0xb8c>
 80066f0:	b11b      	cbz	r3, 80066fa <_dtoa_r+0xb3a>
 80066f2:	f10a 0308 	add.w	r3, sl, #8
 80066f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	4650      	mov	r0, sl
 80066fc:	b017      	add	sp, #92	@ 0x5c
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006704:	2b01      	cmp	r3, #1
 8006706:	f77f ae3d 	ble.w	8006384 <_dtoa_r+0x7c4>
 800670a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800670c:	930a      	str	r3, [sp, #40]	@ 0x28
 800670e:	2001      	movs	r0, #1
 8006710:	e65b      	b.n	80063ca <_dtoa_r+0x80a>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f77f aed6 	ble.w	80064c6 <_dtoa_r+0x906>
 800671a:	4656      	mov	r6, sl
 800671c:	4621      	mov	r1, r4
 800671e:	4648      	mov	r0, r9
 8006720:	f7ff f9c6 	bl	8005ab0 <quorem>
 8006724:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	f806 8b01 	strb.w	r8, [r6], #1
 800672e:	eba6 020a 	sub.w	r2, r6, sl
 8006732:	4293      	cmp	r3, r2
 8006734:	ddb3      	ble.n	800669e <_dtoa_r+0xade>
 8006736:	4649      	mov	r1, r9
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	4658      	mov	r0, fp
 800673e:	f000 f967 	bl	8006a10 <__multadd>
 8006742:	4681      	mov	r9, r0
 8006744:	e7ea      	b.n	800671c <_dtoa_r+0xb5c>
 8006746:	bf00      	nop
 8006748:	08009db9 	.word	0x08009db9
 800674c:	08009d3d 	.word	0x08009d3d

08006750 <_free_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	2900      	cmp	r1, #0
 8006756:	d040      	beq.n	80067da <_free_r+0x8a>
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f0c      	subs	r4, r1, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	18e4      	addlt	r4, r4, r3
 8006764:	f000 f8e6 	bl	8006934 <__malloc_lock>
 8006768:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <_free_r+0x8c>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x2c>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006778:	f000 b8e2 	b.w	8006940 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x42>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	1821      	adds	r1, r4, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x1e>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x4c>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x42>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x6c>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1850      	adds	r0, r2, r1
 80067aa:	4283      	cmp	r3, r0
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x22>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4408      	add	r0, r1
 80067b6:	6010      	str	r0, [r2, #0]
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x22>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x74>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x22>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	6054      	str	r4, [r2, #4]
 80067d8:	e7cb      	b.n	8006772 <_free_r+0x22>
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	2000041c 	.word	0x2000041c

080067e0 <malloc>:
 80067e0:	4b02      	ldr	r3, [pc, #8]	@ (80067ec <malloc+0xc>)
 80067e2:	4601      	mov	r1, r0
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f000 b825 	b.w	8006834 <_malloc_r>
 80067ea:	bf00      	nop
 80067ec:	20000038 	.word	0x20000038

080067f0 <sbrk_aligned>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006830 <sbrk_aligned+0x40>)
 80067f4:	460c      	mov	r4, r1
 80067f6:	6831      	ldr	r1, [r6, #0]
 80067f8:	4605      	mov	r5, r0
 80067fa:	b911      	cbnz	r1, 8006802 <sbrk_aligned+0x12>
 80067fc:	f002 f97e 	bl	8008afc <_sbrk_r>
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f002 f979 	bl	8008afc <_sbrk_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d103      	bne.n	8006816 <sbrk_aligned+0x26>
 800680e:	f04f 34ff 	mov.w	r4, #4294967295
 8006812:	4620      	mov	r0, r4
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d0f8      	beq.n	8006812 <sbrk_aligned+0x22>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4628      	mov	r0, r5
 8006824:	f002 f96a 	bl	8008afc <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1f2      	bne.n	8006812 <sbrk_aligned+0x22>
 800682c:	e7ef      	b.n	800680e <sbrk_aligned+0x1e>
 800682e:	bf00      	nop
 8006830:	20000418 	.word	0x20000418

08006834 <_malloc_r>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	1ccd      	adds	r5, r1, #3
 800683a:	f025 0503 	bic.w	r5, r5, #3
 800683e:	3508      	adds	r5, #8
 8006840:	2d0c      	cmp	r5, #12
 8006842:	bf38      	it	cc
 8006844:	250c      	movcc	r5, #12
 8006846:	2d00      	cmp	r5, #0
 8006848:	4606      	mov	r6, r0
 800684a:	db01      	blt.n	8006850 <_malloc_r+0x1c>
 800684c:	42a9      	cmp	r1, r5
 800684e:	d904      	bls.n	800685a <_malloc_r+0x26>
 8006850:	230c      	movs	r3, #12
 8006852:	6033      	str	r3, [r6, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006930 <_malloc_r+0xfc>
 800685e:	f000 f869 	bl	8006934 <__malloc_lock>
 8006862:	f8d8 3000 	ldr.w	r3, [r8]
 8006866:	461c      	mov	r4, r3
 8006868:	bb44      	cbnz	r4, 80068bc <_malloc_r+0x88>
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff ffbf 	bl	80067f0 <sbrk_aligned>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	4604      	mov	r4, r0
 8006876:	d158      	bne.n	800692a <_malloc_r+0xf6>
 8006878:	f8d8 4000 	ldr.w	r4, [r8]
 800687c:	4627      	mov	r7, r4
 800687e:	2f00      	cmp	r7, #0
 8006880:	d143      	bne.n	800690a <_malloc_r+0xd6>
 8006882:	2c00      	cmp	r4, #0
 8006884:	d04b      	beq.n	800691e <_malloc_r+0xea>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	4639      	mov	r1, r7
 800688a:	4630      	mov	r0, r6
 800688c:	eb04 0903 	add.w	r9, r4, r3
 8006890:	f002 f934 	bl	8008afc <_sbrk_r>
 8006894:	4581      	cmp	r9, r0
 8006896:	d142      	bne.n	800691e <_malloc_r+0xea>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	4630      	mov	r0, r6
 800689c:	1a6d      	subs	r5, r5, r1
 800689e:	4629      	mov	r1, r5
 80068a0:	f7ff ffa6 	bl	80067f0 <sbrk_aligned>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d03a      	beq.n	800691e <_malloc_r+0xea>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	442b      	add	r3, r5
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	f8d8 3000 	ldr.w	r3, [r8]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	bb62      	cbnz	r2, 8006910 <_malloc_r+0xdc>
 80068b6:	f8c8 7000 	str.w	r7, [r8]
 80068ba:	e00f      	b.n	80068dc <_malloc_r+0xa8>
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	1b52      	subs	r2, r2, r5
 80068c0:	d420      	bmi.n	8006904 <_malloc_r+0xd0>
 80068c2:	2a0b      	cmp	r2, #11
 80068c4:	d917      	bls.n	80068f6 <_malloc_r+0xc2>
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	6059      	strne	r1, [r3, #4]
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	bf08      	it	eq
 80068d4:	f8c8 1000 	streq.w	r1, [r8]
 80068d8:	5162      	str	r2, [r4, r5]
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f82f 	bl	8006940 <__malloc_unlock>
 80068e2:	f104 000b 	add.w	r0, r4, #11
 80068e6:	1d23      	adds	r3, r4, #4
 80068e8:	f020 0007 	bic.w	r0, r0, #7
 80068ec:	1ac2      	subs	r2, r0, r3
 80068ee:	bf1c      	itt	ne
 80068f0:	1a1b      	subne	r3, r3, r0
 80068f2:	50a3      	strne	r3, [r4, r2]
 80068f4:	e7af      	b.n	8006856 <_malloc_r+0x22>
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	bf0c      	ite	eq
 80068fc:	f8c8 2000 	streq.w	r2, [r8]
 8006900:	605a      	strne	r2, [r3, #4]
 8006902:	e7eb      	b.n	80068dc <_malloc_r+0xa8>
 8006904:	4623      	mov	r3, r4
 8006906:	6864      	ldr	r4, [r4, #4]
 8006908:	e7ae      	b.n	8006868 <_malloc_r+0x34>
 800690a:	463c      	mov	r4, r7
 800690c:	687f      	ldr	r7, [r7, #4]
 800690e:	e7b6      	b.n	800687e <_malloc_r+0x4a>
 8006910:	461a      	mov	r2, r3
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	42a3      	cmp	r3, r4
 8006916:	d1fb      	bne.n	8006910 <_malloc_r+0xdc>
 8006918:	2300      	movs	r3, #0
 800691a:	6053      	str	r3, [r2, #4]
 800691c:	e7de      	b.n	80068dc <_malloc_r+0xa8>
 800691e:	230c      	movs	r3, #12
 8006920:	4630      	mov	r0, r6
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f000 f80c 	bl	8006940 <__malloc_unlock>
 8006928:	e794      	b.n	8006854 <_malloc_r+0x20>
 800692a:	6005      	str	r5, [r0, #0]
 800692c:	e7d6      	b.n	80068dc <_malloc_r+0xa8>
 800692e:	bf00      	nop
 8006930:	2000041c 	.word	0x2000041c

08006934 <__malloc_lock>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__malloc_lock+0x8>)
 8006936:	f7ff b8a6 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	20000414 	.word	0x20000414

08006940 <__malloc_unlock>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__malloc_unlock+0x8>)
 8006942:	f7ff b8a1 	b.w	8005a88 <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	20000414 	.word	0x20000414

0800694c <_Balloc>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	69c6      	ldr	r6, [r0, #28]
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	b976      	cbnz	r6, 8006974 <_Balloc+0x28>
 8006956:	2010      	movs	r0, #16
 8006958:	f7ff ff42 	bl	80067e0 <malloc>
 800695c:	4602      	mov	r2, r0
 800695e:	61e0      	str	r0, [r4, #28]
 8006960:	b920      	cbnz	r0, 800696c <_Balloc+0x20>
 8006962:	216b      	movs	r1, #107	@ 0x6b
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <_Balloc+0x78>)
 8006966:	4818      	ldr	r0, [pc, #96]	@ (80069c8 <_Balloc+0x7c>)
 8006968:	f002 f8ec 	bl	8008b44 <__assert_func>
 800696c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	69e6      	ldr	r6, [r4, #28]
 8006976:	68f3      	ldr	r3, [r6, #12]
 8006978:	b183      	cbz	r3, 800699c <_Balloc+0x50>
 800697a:	69e3      	ldr	r3, [r4, #28]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006982:	b9b8      	cbnz	r0, 80069b4 <_Balloc+0x68>
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f605 	lsl.w	r6, r1, r5
 800698a:	1d72      	adds	r2, r6, #5
 800698c:	4620      	mov	r0, r4
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	f002 f8f6 	bl	8008b80 <_calloc_r>
 8006994:	b160      	cbz	r0, 80069b0 <_Balloc+0x64>
 8006996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800699a:	e00e      	b.n	80069ba <_Balloc+0x6e>
 800699c:	2221      	movs	r2, #33	@ 0x21
 800699e:	2104      	movs	r1, #4
 80069a0:	4620      	mov	r0, r4
 80069a2:	f002 f8ed 	bl	8008b80 <_calloc_r>
 80069a6:	69e3      	ldr	r3, [r4, #28]
 80069a8:	60f0      	str	r0, [r6, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e4      	bne.n	800697a <_Balloc+0x2e>
 80069b0:	2000      	movs	r0, #0
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	6802      	ldr	r2, [r0, #0]
 80069b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069ba:	2300      	movs	r3, #0
 80069bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069c0:	e7f7      	b.n	80069b2 <_Balloc+0x66>
 80069c2:	bf00      	nop
 80069c4:	08009d4a 	.word	0x08009d4a
 80069c8:	08009dca 	.word	0x08009dca

080069cc <_Bfree>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	69c6      	ldr	r6, [r0, #28]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b976      	cbnz	r6, 80069f4 <_Bfree+0x28>
 80069d6:	2010      	movs	r0, #16
 80069d8:	f7ff ff02 	bl	80067e0 <malloc>
 80069dc:	4602      	mov	r2, r0
 80069de:	61e8      	str	r0, [r5, #28]
 80069e0:	b920      	cbnz	r0, 80069ec <_Bfree+0x20>
 80069e2:	218f      	movs	r1, #143	@ 0x8f
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <_Bfree+0x3c>)
 80069e6:	4809      	ldr	r0, [pc, #36]	@ (8006a0c <_Bfree+0x40>)
 80069e8:	f002 f8ac 	bl	8008b44 <__assert_func>
 80069ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f0:	6006      	str	r6, [r0, #0]
 80069f2:	60c6      	str	r6, [r0, #12]
 80069f4:	b13c      	cbz	r4, 8006a06 <_Bfree+0x3a>
 80069f6:	69eb      	ldr	r3, [r5, #28]
 80069f8:	6862      	ldr	r2, [r4, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a00:	6021      	str	r1, [r4, #0]
 8006a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	08009d4a 	.word	0x08009d4a
 8006a0c:	08009dca 	.word	0x08009dca

08006a10 <__multadd>:
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	461e      	mov	r6, r3
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	690d      	ldr	r5, [r1, #16]
 8006a1e:	f101 0c14 	add.w	ip, r1, #20
 8006a22:	f8dc 3000 	ldr.w	r3, [ip]
 8006a26:	3001      	adds	r0, #1
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	fb02 6101 	mla	r1, r2, r1, r6
 8006a2e:	0c1e      	lsrs	r6, r3, #16
 8006a30:	0c0b      	lsrs	r3, r1, #16
 8006a32:	fb02 3306 	mla	r3, r2, r6, r3
 8006a36:	b289      	uxth	r1, r1
 8006a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a3c:	4285      	cmp	r5, r0
 8006a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a42:	f84c 1b04 	str.w	r1, [ip], #4
 8006a46:	dcec      	bgt.n	8006a22 <__multadd+0x12>
 8006a48:	b30e      	cbz	r6, 8006a8e <__multadd+0x7e>
 8006a4a:	68a3      	ldr	r3, [r4, #8]
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc19      	bgt.n	8006a84 <__multadd+0x74>
 8006a50:	6861      	ldr	r1, [r4, #4]
 8006a52:	4638      	mov	r0, r7
 8006a54:	3101      	adds	r1, #1
 8006a56:	f7ff ff79 	bl	800694c <_Balloc>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	b928      	cbnz	r0, 8006a6a <__multadd+0x5a>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	21ba      	movs	r1, #186	@ 0xba
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <__multadd+0x84>)
 8006a64:	480c      	ldr	r0, [pc, #48]	@ (8006a98 <__multadd+0x88>)
 8006a66:	f002 f86d 	bl	8008b44 <__assert_func>
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	f104 010c 	add.w	r1, r4, #12
 8006a70:	3202      	adds	r2, #2
 8006a72:	0092      	lsls	r2, r2, #2
 8006a74:	300c      	adds	r0, #12
 8006a76:	f002 f851 	bl	8008b1c <memcpy>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff ffa5 	bl	80069cc <_Bfree>
 8006a82:	4644      	mov	r4, r8
 8006a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a88:	3501      	adds	r5, #1
 8006a8a:	615e      	str	r6, [r3, #20]
 8006a8c:	6125      	str	r5, [r4, #16]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	08009db9 	.word	0x08009db9
 8006a98:	08009dca 	.word	0x08009dca

08006a9c <__s2b>:
 8006a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	4615      	mov	r5, r2
 8006aa2:	2209      	movs	r2, #9
 8006aa4:	461f      	mov	r7, r3
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aae:	4606      	mov	r6, r0
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	db09      	blt.n	8006acc <__s2b+0x30>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ff47 	bl	800694c <_Balloc>
 8006abe:	b940      	cbnz	r0, 8006ad2 <__s2b+0x36>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	21d3      	movs	r1, #211	@ 0xd3
 8006ac4:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <__s2b+0x8c>)
 8006ac6:	4819      	ldr	r0, [pc, #100]	@ (8006b2c <__s2b+0x90>)
 8006ac8:	f002 f83c 	bl	8008b44 <__assert_func>
 8006acc:	0052      	lsls	r2, r2, #1
 8006ace:	3101      	adds	r1, #1
 8006ad0:	e7f0      	b.n	8006ab4 <__s2b+0x18>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	2d09      	cmp	r5, #9
 8006ad6:	6143      	str	r3, [r0, #20]
 8006ad8:	f04f 0301 	mov.w	r3, #1
 8006adc:	6103      	str	r3, [r0, #16]
 8006ade:	dd16      	ble.n	8006b0e <__s2b+0x72>
 8006ae0:	f104 0909 	add.w	r9, r4, #9
 8006ae4:	46c8      	mov	r8, r9
 8006ae6:	442c      	add	r4, r5
 8006ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006aec:	4601      	mov	r1, r0
 8006aee:	220a      	movs	r2, #10
 8006af0:	4630      	mov	r0, r6
 8006af2:	3b30      	subs	r3, #48	@ 0x30
 8006af4:	f7ff ff8c 	bl	8006a10 <__multadd>
 8006af8:	45a0      	cmp	r8, r4
 8006afa:	d1f5      	bne.n	8006ae8 <__s2b+0x4c>
 8006afc:	f1a5 0408 	sub.w	r4, r5, #8
 8006b00:	444c      	add	r4, r9
 8006b02:	1b2d      	subs	r5, r5, r4
 8006b04:	1963      	adds	r3, r4, r5
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	db04      	blt.n	8006b14 <__s2b+0x78>
 8006b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0e:	2509      	movs	r5, #9
 8006b10:	340a      	adds	r4, #10
 8006b12:	e7f6      	b.n	8006b02 <__s2b+0x66>
 8006b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b18:	4601      	mov	r1, r0
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	3b30      	subs	r3, #48	@ 0x30
 8006b20:	f7ff ff76 	bl	8006a10 <__multadd>
 8006b24:	e7ee      	b.n	8006b04 <__s2b+0x68>
 8006b26:	bf00      	nop
 8006b28:	08009db9 	.word	0x08009db9
 8006b2c:	08009dca 	.word	0x08009dca

08006b30 <__hi0bits>:
 8006b30:	4603      	mov	r3, r0
 8006b32:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b36:	bf3a      	itte	cc
 8006b38:	0403      	lslcc	r3, r0, #16
 8006b3a:	2010      	movcc	r0, #16
 8006b3c:	2000      	movcs	r0, #0
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	bf3c      	itt	cc
 8006b44:	021b      	lslcc	r3, r3, #8
 8006b46:	3008      	addcc	r0, #8
 8006b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4c:	bf3c      	itt	cc
 8006b4e:	011b      	lslcc	r3, r3, #4
 8006b50:	3004      	addcc	r0, #4
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	bf3c      	itt	cc
 8006b58:	009b      	lslcc	r3, r3, #2
 8006b5a:	3002      	addcc	r0, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x3c>
 8006b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b64:	f100 0001 	add.w	r0, r0, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2020      	moveq	r0, #32
 8006b6c:	4770      	bx	lr

08006b6e <__lo0bits>:
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	4602      	mov	r2, r0
 8006b72:	f013 0007 	ands.w	r0, r3, #7
 8006b76:	d00b      	beq.n	8006b90 <__lo0bits+0x22>
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	d421      	bmi.n	8006bc0 <__lo0bits+0x52>
 8006b7c:	0798      	lsls	r0, r3, #30
 8006b7e:	bf49      	itett	mi
 8006b80:	085b      	lsrmi	r3, r3, #1
 8006b82:	089b      	lsrpl	r3, r3, #2
 8006b84:	2001      	movmi	r0, #1
 8006b86:	6013      	strmi	r3, [r2, #0]
 8006b88:	bf5c      	itt	pl
 8006b8a:	2002      	movpl	r0, #2
 8006b8c:	6013      	strpl	r3, [r2, #0]
 8006b8e:	4770      	bx	lr
 8006b90:	b299      	uxth	r1, r3
 8006b92:	b909      	cbnz	r1, 8006b98 <__lo0bits+0x2a>
 8006b94:	2010      	movs	r0, #16
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	b2d9      	uxtb	r1, r3
 8006b9a:	b909      	cbnz	r1, 8006ba0 <__lo0bits+0x32>
 8006b9c:	3008      	adds	r0, #8
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	bf04      	itt	eq
 8006ba4:	091b      	lsreq	r3, r3, #4
 8006ba6:	3004      	addeq	r0, #4
 8006ba8:	0799      	lsls	r1, r3, #30
 8006baa:	bf04      	itt	eq
 8006bac:	089b      	lsreq	r3, r3, #2
 8006bae:	3002      	addeq	r0, #2
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d403      	bmi.n	8006bbc <__lo0bits+0x4e>
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	f100 0001 	add.w	r0, r0, #1
 8006bba:	d003      	beq.n	8006bc4 <__lo0bits+0x56>
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr
 8006bc4:	2020      	movs	r0, #32
 8006bc6:	4770      	bx	lr

08006bc8 <__i2b>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7ff febd 	bl	800694c <_Balloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__i2b+0x1a>
 8006bd6:	f240 1145 	movw	r1, #325	@ 0x145
 8006bda:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <__i2b+0x24>)
 8006bdc:	4804      	ldr	r0, [pc, #16]	@ (8006bf0 <__i2b+0x28>)
 8006bde:	f001 ffb1 	bl	8008b44 <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	6144      	str	r4, [r0, #20]
 8006be6:	6103      	str	r3, [r0, #16]
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	08009db9 	.word	0x08009db9
 8006bf0:	08009dca 	.word	0x08009dca

08006bf4 <__multiply>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	690a      	ldr	r2, [r1, #16]
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	460f      	mov	r7, r1
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bfa2      	ittt	ge
 8006c04:	4623      	movge	r3, r4
 8006c06:	460c      	movge	r4, r1
 8006c08:	461f      	movge	r7, r3
 8006c0a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c0e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	eb0a 0609 	add.w	r6, sl, r9
 8006c1a:	42b3      	cmp	r3, r6
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	bfb8      	it	lt
 8006c20:	3101      	addlt	r1, #1
 8006c22:	f7ff fe93 	bl	800694c <_Balloc>
 8006c26:	b930      	cbnz	r0, 8006c36 <__multiply+0x42>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c2e:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <__multiply+0x148>)
 8006c30:	4843      	ldr	r0, [pc, #268]	@ (8006d40 <__multiply+0x14c>)
 8006c32:	f001 ff87 	bl	8008b44 <__assert_func>
 8006c36:	f100 0514 	add.w	r5, r0, #20
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c42:	4543      	cmp	r3, r8
 8006c44:	d321      	bcc.n	8006c8a <__multiply+0x96>
 8006c46:	f107 0114 	add.w	r1, r7, #20
 8006c4a:	f104 0214 	add.w	r2, r4, #20
 8006c4e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c52:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	1b13      	subs	r3, r2, r4
 8006c5a:	3b15      	subs	r3, #21
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	3304      	adds	r3, #4
 8006c62:	f104 0715 	add.w	r7, r4, #21
 8006c66:	42ba      	cmp	r2, r7
 8006c68:	bf38      	it	cc
 8006c6a:	2304      	movcc	r3, #4
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	9103      	str	r1, [sp, #12]
 8006c72:	428b      	cmp	r3, r1
 8006c74:	d80c      	bhi.n	8006c90 <__multiply+0x9c>
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	dd03      	ble.n	8006c82 <__multiply+0x8e>
 8006c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d05a      	beq.n	8006d38 <__multiply+0x144>
 8006c82:	6106      	str	r6, [r0, #16]
 8006c84:	b005      	add	sp, #20
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	f843 2b04 	str.w	r2, [r3], #4
 8006c8e:	e7d8      	b.n	8006c42 <__multiply+0x4e>
 8006c90:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c94:	f1ba 0f00 	cmp.w	sl, #0
 8006c98:	d023      	beq.n	8006ce2 <__multiply+0xee>
 8006c9a:	46a9      	mov	r9, r5
 8006c9c:	f04f 0c00 	mov.w	ip, #0
 8006ca0:	f104 0e14 	add.w	lr, r4, #20
 8006ca4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ca8:	f8d9 3000 	ldr.w	r3, [r9]
 8006cac:	fa1f fb87 	uxth.w	fp, r7
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cb6:	4463      	add	r3, ip
 8006cb8:	f8d9 c000 	ldr.w	ip, [r9]
 8006cbc:	0c3f      	lsrs	r7, r7, #16
 8006cbe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cc2:	fb0a c707 	mla	r7, sl, r7, ip
 8006cc6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cd0:	4572      	cmp	r2, lr
 8006cd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cd6:	f849 3b04 	str.w	r3, [r9], #4
 8006cda:	d8e3      	bhi.n	8006ca4 <__multiply+0xb0>
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	f845 c003 	str.w	ip, [r5, r3]
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	3104      	adds	r1, #4
 8006ce6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cea:	f1b9 0f00 	cmp.w	r9, #0
 8006cee:	d021      	beq.n	8006d34 <__multiply+0x140>
 8006cf0:	46ae      	mov	lr, r5
 8006cf2:	f04f 0a00 	mov.w	sl, #0
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	f104 0c14 	add.w	ip, r4, #20
 8006cfc:	f8bc b000 	ldrh.w	fp, [ip]
 8006d00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	fb09 770b 	mla	r7, r9, fp, r7
 8006d0a:	4457      	add	r7, sl
 8006d0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d10:	f84e 3b04 	str.w	r3, [lr], #4
 8006d14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d1c:	f8be 3000 	ldrh.w	r3, [lr]
 8006d20:	4562      	cmp	r2, ip
 8006d22:	fb09 330a 	mla	r3, r9, sl, r3
 8006d26:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d2e:	d8e5      	bhi.n	8006cfc <__multiply+0x108>
 8006d30:	9f01      	ldr	r7, [sp, #4]
 8006d32:	51eb      	str	r3, [r5, r7]
 8006d34:	3504      	adds	r5, #4
 8006d36:	e79a      	b.n	8006c6e <__multiply+0x7a>
 8006d38:	3e01      	subs	r6, #1
 8006d3a:	e79c      	b.n	8006c76 <__multiply+0x82>
 8006d3c:	08009db9 	.word	0x08009db9
 8006d40:	08009dca 	.word	0x08009dca

08006d44 <__pow5mult>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	4615      	mov	r5, r2
 8006d4a:	f012 0203 	ands.w	r2, r2, #3
 8006d4e:	4607      	mov	r7, r0
 8006d50:	460e      	mov	r6, r1
 8006d52:	d007      	beq.n	8006d64 <__pow5mult+0x20>
 8006d54:	4c25      	ldr	r4, [pc, #148]	@ (8006dec <__pow5mult+0xa8>)
 8006d56:	3a01      	subs	r2, #1
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d5e:	f7ff fe57 	bl	8006a10 <__multadd>
 8006d62:	4606      	mov	r6, r0
 8006d64:	10ad      	asrs	r5, r5, #2
 8006d66:	d03d      	beq.n	8006de4 <__pow5mult+0xa0>
 8006d68:	69fc      	ldr	r4, [r7, #28]
 8006d6a:	b97c      	cbnz	r4, 8006d8c <__pow5mult+0x48>
 8006d6c:	2010      	movs	r0, #16
 8006d6e:	f7ff fd37 	bl	80067e0 <malloc>
 8006d72:	4602      	mov	r2, r0
 8006d74:	61f8      	str	r0, [r7, #28]
 8006d76:	b928      	cbnz	r0, 8006d84 <__pow5mult+0x40>
 8006d78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006df0 <__pow5mult+0xac>)
 8006d7e:	481d      	ldr	r0, [pc, #116]	@ (8006df4 <__pow5mult+0xb0>)
 8006d80:	f001 fee0 	bl	8008b44 <__assert_func>
 8006d84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d88:	6004      	str	r4, [r0, #0]
 8006d8a:	60c4      	str	r4, [r0, #12]
 8006d8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d94:	b94c      	cbnz	r4, 8006daa <__pow5mult+0x66>
 8006d96:	f240 2171 	movw	r1, #625	@ 0x271
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f7ff ff14 	bl	8006bc8 <__i2b>
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	f04f 0900 	mov.w	r9, #0
 8006dae:	07eb      	lsls	r3, r5, #31
 8006db0:	d50a      	bpl.n	8006dc8 <__pow5mult+0x84>
 8006db2:	4631      	mov	r1, r6
 8006db4:	4622      	mov	r2, r4
 8006db6:	4638      	mov	r0, r7
 8006db8:	f7ff ff1c 	bl	8006bf4 <__multiply>
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff fe03 	bl	80069cc <_Bfree>
 8006dc6:	4646      	mov	r6, r8
 8006dc8:	106d      	asrs	r5, r5, #1
 8006dca:	d00b      	beq.n	8006de4 <__pow5mult+0xa0>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	b938      	cbnz	r0, 8006de0 <__pow5mult+0x9c>
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	f7ff ff0d 	bl	8006bf4 <__multiply>
 8006dda:	6020      	str	r0, [r4, #0]
 8006ddc:	f8c0 9000 	str.w	r9, [r0]
 8006de0:	4604      	mov	r4, r0
 8006de2:	e7e4      	b.n	8006dae <__pow5mult+0x6a>
 8006de4:	4630      	mov	r0, r6
 8006de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dea:	bf00      	nop
 8006dec:	08009e24 	.word	0x08009e24
 8006df0:	08009d4a 	.word	0x08009d4a
 8006df4:	08009dca 	.word	0x08009dca

08006df8 <__lshift>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	4607      	mov	r7, r0
 8006e00:	4691      	mov	r9, r2
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	6849      	ldr	r1, [r1, #4]
 8006e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e10:	f108 0601 	add.w	r6, r8, #1
 8006e14:	42b3      	cmp	r3, r6
 8006e16:	db0b      	blt.n	8006e30 <__lshift+0x38>
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f7ff fd97 	bl	800694c <_Balloc>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	b948      	cbnz	r0, 8006e36 <__lshift+0x3e>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e28:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <__lshift+0xd0>)
 8006e2a:	4828      	ldr	r0, [pc, #160]	@ (8006ecc <__lshift+0xd4>)
 8006e2c:	f001 fe8a 	bl	8008b44 <__assert_func>
 8006e30:	3101      	adds	r1, #1
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	e7ee      	b.n	8006e14 <__lshift+0x1c>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f100 0114 	add.w	r1, r0, #20
 8006e3c:	f100 0210 	add.w	r2, r0, #16
 8006e40:	4618      	mov	r0, r3
 8006e42:	4553      	cmp	r3, sl
 8006e44:	db33      	blt.n	8006eae <__lshift+0xb6>
 8006e46:	6920      	ldr	r0, [r4, #16]
 8006e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e4c:	f104 0314 	add.w	r3, r4, #20
 8006e50:	f019 091f 	ands.w	r9, r9, #31
 8006e54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e5c:	d02b      	beq.n	8006eb6 <__lshift+0xbe>
 8006e5e:	468a      	mov	sl, r1
 8006e60:	2200      	movs	r2, #0
 8006e62:	f1c9 0e20 	rsb	lr, r9, #32
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	fa00 f009 	lsl.w	r0, r0, r9
 8006e6c:	4310      	orrs	r0, r2
 8006e6e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e76:	459c      	cmp	ip, r3
 8006e78:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e7c:	d8f3      	bhi.n	8006e66 <__lshift+0x6e>
 8006e7e:	ebac 0304 	sub.w	r3, ip, r4
 8006e82:	3b15      	subs	r3, #21
 8006e84:	f023 0303 	bic.w	r3, r3, #3
 8006e88:	3304      	adds	r3, #4
 8006e8a:	f104 0015 	add.w	r0, r4, #21
 8006e8e:	4584      	cmp	ip, r0
 8006e90:	bf38      	it	cc
 8006e92:	2304      	movcc	r3, #4
 8006e94:	50ca      	str	r2, [r1, r3]
 8006e96:	b10a      	cbz	r2, 8006e9c <__lshift+0xa4>
 8006e98:	f108 0602 	add.w	r6, r8, #2
 8006e9c:	3e01      	subs	r6, #1
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	612e      	str	r6, [r5, #16]
 8006ea4:	f7ff fd92 	bl	80069cc <_Bfree>
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eae:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	e7c5      	b.n	8006e42 <__lshift+0x4a>
 8006eb6:	3904      	subs	r1, #4
 8006eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebc:	459c      	cmp	ip, r3
 8006ebe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ec2:	d8f9      	bhi.n	8006eb8 <__lshift+0xc0>
 8006ec4:	e7ea      	b.n	8006e9c <__lshift+0xa4>
 8006ec6:	bf00      	nop
 8006ec8:	08009db9 	.word	0x08009db9
 8006ecc:	08009dca 	.word	0x08009dca

08006ed0 <__mcmp>:
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	690a      	ldr	r2, [r1, #16]
 8006ed4:	6900      	ldr	r0, [r0, #16]
 8006ed6:	b530      	push	{r4, r5, lr}
 8006ed8:	1a80      	subs	r0, r0, r2
 8006eda:	d10e      	bne.n	8006efa <__mcmp+0x2a>
 8006edc:	3314      	adds	r3, #20
 8006ede:	3114      	adds	r1, #20
 8006ee0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ee4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ee8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006eec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ef0:	4295      	cmp	r5, r2
 8006ef2:	d003      	beq.n	8006efc <__mcmp+0x2c>
 8006ef4:	d205      	bcs.n	8006f02 <__mcmp+0x32>
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	bd30      	pop	{r4, r5, pc}
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	d3f3      	bcc.n	8006ee8 <__mcmp+0x18>
 8006f00:	e7fb      	b.n	8006efa <__mcmp+0x2a>
 8006f02:	2001      	movs	r0, #1
 8006f04:	e7f9      	b.n	8006efa <__mcmp+0x2a>
	...

08006f08 <__mdiff>:
 8006f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4689      	mov	r9, r1
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4611      	mov	r1, r2
 8006f12:	4648      	mov	r0, r9
 8006f14:	4614      	mov	r4, r2
 8006f16:	f7ff ffdb 	bl	8006ed0 <__mcmp>
 8006f1a:	1e05      	subs	r5, r0, #0
 8006f1c:	d112      	bne.n	8006f44 <__mdiff+0x3c>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff fd13 	bl	800694c <_Balloc>
 8006f26:	4602      	mov	r2, r0
 8006f28:	b928      	cbnz	r0, 8006f36 <__mdiff+0x2e>
 8006f2a:	f240 2137 	movw	r1, #567	@ 0x237
 8006f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <__mdiff+0x120>)
 8006f30:	483e      	ldr	r0, [pc, #248]	@ (800702c <__mdiff+0x124>)
 8006f32:	f001 fe07 	bl	8008b44 <__assert_func>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	b003      	add	sp, #12
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	bfbc      	itt	lt
 8006f46:	464b      	movlt	r3, r9
 8006f48:	46a1      	movlt	r9, r4
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f50:	bfba      	itte	lt
 8006f52:	461c      	movlt	r4, r3
 8006f54:	2501      	movlt	r5, #1
 8006f56:	2500      	movge	r5, #0
 8006f58:	f7ff fcf8 	bl	800694c <_Balloc>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	b918      	cbnz	r0, 8006f68 <__mdiff+0x60>
 8006f60:	f240 2145 	movw	r1, #581	@ 0x245
 8006f64:	4b30      	ldr	r3, [pc, #192]	@ (8007028 <__mdiff+0x120>)
 8006f66:	e7e3      	b.n	8006f30 <__mdiff+0x28>
 8006f68:	f100 0b14 	add.w	fp, r0, #20
 8006f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f70:	f109 0310 	add.w	r3, r9, #16
 8006f74:	60c5      	str	r5, [r0, #12]
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	f109 0514 	add.w	r5, r9, #20
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	6926      	ldr	r6, [r4, #16]
 8006f82:	f104 0e14 	add.w	lr, r4, #20
 8006f86:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f8a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f9a:	b281      	uxth	r1, r0
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	fa1f f38a 	uxth.w	r3, sl
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	0c00      	lsrs	r0, r0, #16
 8006fa6:	4463      	add	r3, ip
 8006fa8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fb6:	4576      	cmp	r6, lr
 8006fb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fbc:	f849 3b04 	str.w	r3, [r9], #4
 8006fc0:	d8e6      	bhi.n	8006f90 <__mdiff+0x88>
 8006fc2:	1b33      	subs	r3, r6, r4
 8006fc4:	3b15      	subs	r3, #21
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	3415      	adds	r4, #21
 8006fcc:	3304      	adds	r3, #4
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	bf38      	it	cc
 8006fd2:	2304      	movcc	r3, #4
 8006fd4:	441d      	add	r5, r3
 8006fd6:	445b      	add	r3, fp
 8006fd8:	461e      	mov	r6, r3
 8006fda:	462c      	mov	r4, r5
 8006fdc:	4544      	cmp	r4, r8
 8006fde:	d30e      	bcc.n	8006ffe <__mdiff+0xf6>
 8006fe0:	f108 0103 	add.w	r1, r8, #3
 8006fe4:	1b49      	subs	r1, r1, r5
 8006fe6:	f021 0103 	bic.w	r1, r1, #3
 8006fea:	3d03      	subs	r5, #3
 8006fec:	45a8      	cmp	r8, r5
 8006fee:	bf38      	it	cc
 8006ff0:	2100      	movcc	r1, #0
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ff8:	b199      	cbz	r1, 8007022 <__mdiff+0x11a>
 8006ffa:	6117      	str	r7, [r2, #16]
 8006ffc:	e79e      	b.n	8006f3c <__mdiff+0x34>
 8006ffe:	46e6      	mov	lr, ip
 8007000:	f854 1b04 	ldr.w	r1, [r4], #4
 8007004:	fa1f fc81 	uxth.w	ip, r1
 8007008:	44f4      	add	ip, lr
 800700a:	0c08      	lsrs	r0, r1, #16
 800700c:	4471      	add	r1, lr
 800700e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007012:	b289      	uxth	r1, r1
 8007014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800701c:	f846 1b04 	str.w	r1, [r6], #4
 8007020:	e7dc      	b.n	8006fdc <__mdiff+0xd4>
 8007022:	3f01      	subs	r7, #1
 8007024:	e7e6      	b.n	8006ff4 <__mdiff+0xec>
 8007026:	bf00      	nop
 8007028:	08009db9 	.word	0x08009db9
 800702c:	08009dca 	.word	0x08009dca

08007030 <__ulp>:
 8007030:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <__ulp+0x3c>)
 8007032:	400b      	ands	r3, r1
 8007034:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc08      	bgt.n	800704e <__ulp+0x1e>
 800703c:	425b      	negs	r3, r3
 800703e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007042:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007046:	da04      	bge.n	8007052 <__ulp+0x22>
 8007048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800704c:	4113      	asrs	r3, r2
 800704e:	2200      	movs	r2, #0
 8007050:	e008      	b.n	8007064 <__ulp+0x34>
 8007052:	f1a2 0314 	sub.w	r3, r2, #20
 8007056:	2b1e      	cmp	r3, #30
 8007058:	bfd6      	itet	le
 800705a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800705e:	2201      	movgt	r2, #1
 8007060:	40da      	lsrle	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	7ff00000 	.word	0x7ff00000

08007070 <__b2d>:
 8007070:	6902      	ldr	r2, [r0, #16]
 8007072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007074:	f100 0614 	add.w	r6, r0, #20
 8007078:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800707c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007080:	4f1e      	ldr	r7, [pc, #120]	@ (80070fc <__b2d+0x8c>)
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fd54 	bl	8006b30 <__hi0bits>
 8007088:	4603      	mov	r3, r0
 800708a:	f1c0 0020 	rsb	r0, r0, #32
 800708e:	2b0a      	cmp	r3, #10
 8007090:	f1a2 0504 	sub.w	r5, r2, #4
 8007094:	6008      	str	r0, [r1, #0]
 8007096:	dc12      	bgt.n	80070be <__b2d+0x4e>
 8007098:	42ae      	cmp	r6, r5
 800709a:	bf2c      	ite	cs
 800709c:	2200      	movcs	r2, #0
 800709e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070a2:	f1c3 0c0b 	rsb	ip, r3, #11
 80070a6:	3315      	adds	r3, #21
 80070a8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80070ac:	fa04 f303 	lsl.w	r3, r4, r3
 80070b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80070b4:	ea4e 0107 	orr.w	r1, lr, r7
 80070b8:	431a      	orrs	r2, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070be:	42ae      	cmp	r6, r5
 80070c0:	bf36      	itet	cc
 80070c2:	f1a2 0508 	subcc.w	r5, r2, #8
 80070c6:	2200      	movcs	r2, #0
 80070c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070cc:	3b0b      	subs	r3, #11
 80070ce:	d012      	beq.n	80070f6 <__b2d+0x86>
 80070d0:	f1c3 0720 	rsb	r7, r3, #32
 80070d4:	fa22 f107 	lsr.w	r1, r2, r7
 80070d8:	409c      	lsls	r4, r3
 80070da:	430c      	orrs	r4, r1
 80070dc:	42b5      	cmp	r5, r6
 80070de:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80070e2:	bf94      	ite	ls
 80070e4:	2400      	movls	r4, #0
 80070e6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80070ea:	409a      	lsls	r2, r3
 80070ec:	40fc      	lsrs	r4, r7
 80070ee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80070f2:	4322      	orrs	r2, r4
 80070f4:	e7e1      	b.n	80070ba <__b2d+0x4a>
 80070f6:	ea44 0107 	orr.w	r1, r4, r7
 80070fa:	e7de      	b.n	80070ba <__b2d+0x4a>
 80070fc:	3ff00000 	.word	0x3ff00000

08007100 <__d2b>:
 8007100:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007104:	2101      	movs	r1, #1
 8007106:	4690      	mov	r8, r2
 8007108:	4699      	mov	r9, r3
 800710a:	9e08      	ldr	r6, [sp, #32]
 800710c:	f7ff fc1e 	bl	800694c <_Balloc>
 8007110:	4604      	mov	r4, r0
 8007112:	b930      	cbnz	r0, 8007122 <__d2b+0x22>
 8007114:	4602      	mov	r2, r0
 8007116:	f240 310f 	movw	r1, #783	@ 0x30f
 800711a:	4b23      	ldr	r3, [pc, #140]	@ (80071a8 <__d2b+0xa8>)
 800711c:	4823      	ldr	r0, [pc, #140]	@ (80071ac <__d2b+0xac>)
 800711e:	f001 fd11 	bl	8008b44 <__assert_func>
 8007122:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800712a:	b10d      	cbz	r5, 8007130 <__d2b+0x30>
 800712c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	f1b8 0300 	subs.w	r3, r8, #0
 8007136:	d024      	beq.n	8007182 <__d2b+0x82>
 8007138:	4668      	mov	r0, sp
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	f7ff fd17 	bl	8006b6e <__lo0bits>
 8007140:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007144:	b1d8      	cbz	r0, 800717e <__d2b+0x7e>
 8007146:	f1c0 0320 	rsb	r3, r0, #32
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	430b      	orrs	r3, r1
 8007150:	40c2      	lsrs	r2, r0
 8007152:	6163      	str	r3, [r4, #20]
 8007154:	9201      	str	r2, [sp, #4]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2201      	moveq	r2, #1
 800715e:	2202      	movne	r2, #2
 8007160:	61a3      	str	r3, [r4, #24]
 8007162:	6122      	str	r2, [r4, #16]
 8007164:	b1ad      	cbz	r5, 8007192 <__d2b+0x92>
 8007166:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800716a:	4405      	add	r5, r0
 800716c:	6035      	str	r5, [r6, #0]
 800716e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007174:	6018      	str	r0, [r3, #0]
 8007176:	4620      	mov	r0, r4
 8007178:	b002      	add	sp, #8
 800717a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800717e:	6161      	str	r1, [r4, #20]
 8007180:	e7e9      	b.n	8007156 <__d2b+0x56>
 8007182:	a801      	add	r0, sp, #4
 8007184:	f7ff fcf3 	bl	8006b6e <__lo0bits>
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	6163      	str	r3, [r4, #20]
 800718e:	3020      	adds	r0, #32
 8007190:	e7e7      	b.n	8007162 <__d2b+0x62>
 8007192:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007196:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800719a:	6030      	str	r0, [r6, #0]
 800719c:	6918      	ldr	r0, [r3, #16]
 800719e:	f7ff fcc7 	bl	8006b30 <__hi0bits>
 80071a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071a6:	e7e4      	b.n	8007172 <__d2b+0x72>
 80071a8:	08009db9 	.word	0x08009db9
 80071ac:	08009dca 	.word	0x08009dca

080071b0 <__ratio>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	b085      	sub	sp, #20
 80071b6:	e9cd 1000 	strd	r1, r0, [sp]
 80071ba:	a902      	add	r1, sp, #8
 80071bc:	f7ff ff58 	bl	8007070 <__b2d>
 80071c0:	468b      	mov	fp, r1
 80071c2:	4606      	mov	r6, r0
 80071c4:	460f      	mov	r7, r1
 80071c6:	9800      	ldr	r0, [sp, #0]
 80071c8:	a903      	add	r1, sp, #12
 80071ca:	f7ff ff51 	bl	8007070 <__b2d>
 80071ce:	460d      	mov	r5, r1
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	4689      	mov	r9, r1
 80071d4:	6919      	ldr	r1, [r3, #16]
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	4604      	mov	r4, r0
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4630      	mov	r0, r6
 80071de:	1ac9      	subs	r1, r1, r3
 80071e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfcd      	iteet	gt
 80071ee:	463a      	movgt	r2, r7
 80071f0:	462a      	movle	r2, r5
 80071f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80071fa:	bfd8      	it	le
 80071fc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007200:	464b      	mov	r3, r9
 8007202:	4622      	mov	r2, r4
 8007204:	4659      	mov	r1, fp
 8007206:	f7f9 fa9b 	bl	8000740 <__aeabi_ddiv>
 800720a:	b005      	add	sp, #20
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007210 <__copybits>:
 8007210:	3901      	subs	r1, #1
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	1149      	asrs	r1, r1, #5
 8007216:	6914      	ldr	r4, [r2, #16]
 8007218:	3101      	adds	r1, #1
 800721a:	f102 0314 	add.w	r3, r2, #20
 800721e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007222:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007226:	1f05      	subs	r5, r0, #4
 8007228:	42a3      	cmp	r3, r4
 800722a:	d30c      	bcc.n	8007246 <__copybits+0x36>
 800722c:	1aa3      	subs	r3, r4, r2
 800722e:	3b11      	subs	r3, #17
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	3211      	adds	r2, #17
 8007236:	42a2      	cmp	r2, r4
 8007238:	bf88      	it	hi
 800723a:	2300      	movhi	r3, #0
 800723c:	4418      	add	r0, r3
 800723e:	2300      	movs	r3, #0
 8007240:	4288      	cmp	r0, r1
 8007242:	d305      	bcc.n	8007250 <__copybits+0x40>
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	f853 6b04 	ldr.w	r6, [r3], #4
 800724a:	f845 6f04 	str.w	r6, [r5, #4]!
 800724e:	e7eb      	b.n	8007228 <__copybits+0x18>
 8007250:	f840 3b04 	str.w	r3, [r0], #4
 8007254:	e7f4      	b.n	8007240 <__copybits+0x30>

08007256 <__any_on>:
 8007256:	f100 0214 	add.w	r2, r0, #20
 800725a:	6900      	ldr	r0, [r0, #16]
 800725c:	114b      	asrs	r3, r1, #5
 800725e:	4298      	cmp	r0, r3
 8007260:	b510      	push	{r4, lr}
 8007262:	db11      	blt.n	8007288 <__any_on+0x32>
 8007264:	dd0a      	ble.n	800727c <__any_on+0x26>
 8007266:	f011 011f 	ands.w	r1, r1, #31
 800726a:	d007      	beq.n	800727c <__any_on+0x26>
 800726c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007270:	fa24 f001 	lsr.w	r0, r4, r1
 8007274:	fa00 f101 	lsl.w	r1, r0, r1
 8007278:	428c      	cmp	r4, r1
 800727a:	d10b      	bne.n	8007294 <__any_on+0x3e>
 800727c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007280:	4293      	cmp	r3, r2
 8007282:	d803      	bhi.n	800728c <__any_on+0x36>
 8007284:	2000      	movs	r0, #0
 8007286:	bd10      	pop	{r4, pc}
 8007288:	4603      	mov	r3, r0
 800728a:	e7f7      	b.n	800727c <__any_on+0x26>
 800728c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007290:	2900      	cmp	r1, #0
 8007292:	d0f5      	beq.n	8007280 <__any_on+0x2a>
 8007294:	2001      	movs	r0, #1
 8007296:	e7f6      	b.n	8007286 <__any_on+0x30>

08007298 <sulp>:
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	460f      	mov	r7, r1
 800729e:	4690      	mov	r8, r2
 80072a0:	f7ff fec6 	bl	8007030 <__ulp>
 80072a4:	4604      	mov	r4, r0
 80072a6:	460d      	mov	r5, r1
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d011      	beq.n	80072d2 <sulp+0x3a>
 80072ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd0b      	ble.n	80072d2 <sulp+0x3a>
 80072ba:	2400      	movs	r4, #0
 80072bc:	051b      	lsls	r3, r3, #20
 80072be:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80072c2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80072c6:	4622      	mov	r2, r4
 80072c8:	462b      	mov	r3, r5
 80072ca:	f7f9 f90f 	bl	80004ec <__aeabi_dmul>
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072da:	0000      	movs	r0, r0
 80072dc:	0000      	movs	r0, r0
	...

080072e0 <_strtod_l>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	b09f      	sub	sp, #124	@ 0x7c
 80072e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80072e8:	2200      	movs	r2, #0
 80072ea:	460c      	mov	r4, r1
 80072ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80072ee:	f04f 0a00 	mov.w	sl, #0
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	460a      	mov	r2, r1
 80072f8:	9005      	str	r0, [sp, #20]
 80072fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80072fc:	7811      	ldrb	r1, [r2, #0]
 80072fe:	292b      	cmp	r1, #43	@ 0x2b
 8007300:	d048      	beq.n	8007394 <_strtod_l+0xb4>
 8007302:	d836      	bhi.n	8007372 <_strtod_l+0x92>
 8007304:	290d      	cmp	r1, #13
 8007306:	d830      	bhi.n	800736a <_strtod_l+0x8a>
 8007308:	2908      	cmp	r1, #8
 800730a:	d830      	bhi.n	800736e <_strtod_l+0x8e>
 800730c:	2900      	cmp	r1, #0
 800730e:	d039      	beq.n	8007384 <_strtod_l+0xa4>
 8007310:	2200      	movs	r2, #0
 8007312:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007314:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007316:	782a      	ldrb	r2, [r5, #0]
 8007318:	2a30      	cmp	r2, #48	@ 0x30
 800731a:	f040 80b1 	bne.w	8007480 <_strtod_l+0x1a0>
 800731e:	786a      	ldrb	r2, [r5, #1]
 8007320:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007324:	2a58      	cmp	r2, #88	@ 0x58
 8007326:	d16c      	bne.n	8007402 <_strtod_l+0x122>
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800732c:	4a8e      	ldr	r2, [pc, #568]	@ (8007568 <_strtod_l+0x288>)
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	ab1a      	add	r3, sp, #104	@ 0x68
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	9805      	ldr	r0, [sp, #20]
 8007336:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007338:	a919      	add	r1, sp, #100	@ 0x64
 800733a:	f001 fc9d 	bl	8008c78 <__gethex>
 800733e:	f010 060f 	ands.w	r6, r0, #15
 8007342:	4604      	mov	r4, r0
 8007344:	d005      	beq.n	8007352 <_strtod_l+0x72>
 8007346:	2e06      	cmp	r6, #6
 8007348:	d126      	bne.n	8007398 <_strtod_l+0xb8>
 800734a:	2300      	movs	r3, #0
 800734c:	3501      	adds	r5, #1
 800734e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 8584 	bne.w	8007e62 <_strtod_l+0xb82>
 800735a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735c:	b1bb      	cbz	r3, 800738e <_strtod_l+0xae>
 800735e:	4650      	mov	r0, sl
 8007360:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007364:	b01f      	add	sp, #124	@ 0x7c
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	2920      	cmp	r1, #32
 800736c:	d1d0      	bne.n	8007310 <_strtod_l+0x30>
 800736e:	3201      	adds	r2, #1
 8007370:	e7c3      	b.n	80072fa <_strtod_l+0x1a>
 8007372:	292d      	cmp	r1, #45	@ 0x2d
 8007374:	d1cc      	bne.n	8007310 <_strtod_l+0x30>
 8007376:	2101      	movs	r1, #1
 8007378:	910b      	str	r1, [sp, #44]	@ 0x2c
 800737a:	1c51      	adds	r1, r2, #1
 800737c:	9119      	str	r1, [sp, #100]	@ 0x64
 800737e:	7852      	ldrb	r2, [r2, #1]
 8007380:	2a00      	cmp	r2, #0
 8007382:	d1c7      	bne.n	8007314 <_strtod_l+0x34>
 8007384:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007386:	9419      	str	r4, [sp, #100]	@ 0x64
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 8568 	bne.w	8007e5e <_strtod_l+0xb7e>
 800738e:	4650      	mov	r0, sl
 8007390:	4659      	mov	r1, fp
 8007392:	e7e7      	b.n	8007364 <_strtod_l+0x84>
 8007394:	2100      	movs	r1, #0
 8007396:	e7ef      	b.n	8007378 <_strtod_l+0x98>
 8007398:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800739a:	b13a      	cbz	r2, 80073ac <_strtod_l+0xcc>
 800739c:	2135      	movs	r1, #53	@ 0x35
 800739e:	a81c      	add	r0, sp, #112	@ 0x70
 80073a0:	f7ff ff36 	bl	8007210 <__copybits>
 80073a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073a6:	9805      	ldr	r0, [sp, #20]
 80073a8:	f7ff fb10 	bl	80069cc <_Bfree>
 80073ac:	3e01      	subs	r6, #1
 80073ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073b0:	2e04      	cmp	r6, #4
 80073b2:	d806      	bhi.n	80073c2 <_strtod_l+0xe2>
 80073b4:	e8df f006 	tbb	[pc, r6]
 80073b8:	201d0314 	.word	0x201d0314
 80073bc:	14          	.byte	0x14
 80073bd:	00          	.byte	0x00
 80073be:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80073c2:	05e1      	lsls	r1, r4, #23
 80073c4:	bf48      	it	mi
 80073c6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80073ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073ce:	0d1b      	lsrs	r3, r3, #20
 80073d0:	051b      	lsls	r3, r3, #20
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1bd      	bne.n	8007352 <_strtod_l+0x72>
 80073d6:	f7fe fb2b 	bl	8005a30 <__errno>
 80073da:	2322      	movs	r3, #34	@ 0x22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	e7b8      	b.n	8007352 <_strtod_l+0x72>
 80073e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80073e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80073e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073ec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073f0:	e7e7      	b.n	80073c2 <_strtod_l+0xe2>
 80073f2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800756c <_strtod_l+0x28c>
 80073f6:	e7e4      	b.n	80073c2 <_strtod_l+0xe2>
 80073f8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80073fc:	f04f 3aff 	mov.w	sl, #4294967295
 8007400:	e7df      	b.n	80073c2 <_strtod_l+0xe2>
 8007402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	9219      	str	r2, [sp, #100]	@ 0x64
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b30      	cmp	r3, #48	@ 0x30
 800740c:	d0f9      	beq.n	8007402 <_strtod_l+0x122>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d09f      	beq.n	8007352 <_strtod_l+0x72>
 8007412:	2301      	movs	r3, #1
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007418:	220a      	movs	r2, #10
 800741a:	930c      	str	r3, [sp, #48]	@ 0x30
 800741c:	2300      	movs	r3, #0
 800741e:	461f      	mov	r7, r3
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	930a      	str	r3, [sp, #40]	@ 0x28
 8007424:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007426:	7805      	ldrb	r5, [r0, #0]
 8007428:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800742c:	b2d9      	uxtb	r1, r3
 800742e:	2909      	cmp	r1, #9
 8007430:	d928      	bls.n	8007484 <_strtod_l+0x1a4>
 8007432:	2201      	movs	r2, #1
 8007434:	494e      	ldr	r1, [pc, #312]	@ (8007570 <_strtod_l+0x290>)
 8007436:	f001 fb4e 	bl	8008ad6 <strncmp>
 800743a:	2800      	cmp	r0, #0
 800743c:	d032      	beq.n	80074a4 <_strtod_l+0x1c4>
 800743e:	2000      	movs	r0, #0
 8007440:	462a      	mov	r2, r5
 8007442:	4681      	mov	r9, r0
 8007444:	463d      	mov	r5, r7
 8007446:	4603      	mov	r3, r0
 8007448:	2a65      	cmp	r2, #101	@ 0x65
 800744a:	d001      	beq.n	8007450 <_strtod_l+0x170>
 800744c:	2a45      	cmp	r2, #69	@ 0x45
 800744e:	d114      	bne.n	800747a <_strtod_l+0x19a>
 8007450:	b91d      	cbnz	r5, 800745a <_strtod_l+0x17a>
 8007452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007454:	4302      	orrs	r2, r0
 8007456:	d095      	beq.n	8007384 <_strtod_l+0xa4>
 8007458:	2500      	movs	r5, #0
 800745a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800745c:	1c62      	adds	r2, r4, #1
 800745e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007460:	7862      	ldrb	r2, [r4, #1]
 8007462:	2a2b      	cmp	r2, #43	@ 0x2b
 8007464:	d077      	beq.n	8007556 <_strtod_l+0x276>
 8007466:	2a2d      	cmp	r2, #45	@ 0x2d
 8007468:	d07b      	beq.n	8007562 <_strtod_l+0x282>
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007472:	2909      	cmp	r1, #9
 8007474:	f240 8082 	bls.w	800757c <_strtod_l+0x29c>
 8007478:	9419      	str	r4, [sp, #100]	@ 0x64
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e0a2      	b.n	80075c6 <_strtod_l+0x2e6>
 8007480:	2300      	movs	r3, #0
 8007482:	e7c7      	b.n	8007414 <_strtod_l+0x134>
 8007484:	2f08      	cmp	r7, #8
 8007486:	bfd5      	itete	le
 8007488:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800748a:	9908      	ldrgt	r1, [sp, #32]
 800748c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007490:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007494:	f100 0001 	add.w	r0, r0, #1
 8007498:	bfd4      	ite	le
 800749a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800749c:	9308      	strgt	r3, [sp, #32]
 800749e:	3701      	adds	r7, #1
 80074a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80074a2:	e7bf      	b.n	8007424 <_strtod_l+0x144>
 80074a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	b37f      	cbz	r7, 800750e <_strtod_l+0x22e>
 80074ae:	4681      	mov	r9, r0
 80074b0:	463d      	mov	r5, r7
 80074b2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d912      	bls.n	80074e0 <_strtod_l+0x200>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7c4      	b.n	8007448 <_strtod_l+0x168>
 80074be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074c0:	3001      	adds	r0, #1
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80074c6:	785a      	ldrb	r2, [r3, #1]
 80074c8:	2a30      	cmp	r2, #48	@ 0x30
 80074ca:	d0f8      	beq.n	80074be <_strtod_l+0x1de>
 80074cc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	f200 84cb 	bhi.w	8007e6c <_strtod_l+0xb8c>
 80074d6:	4681      	mov	r9, r0
 80074d8:	2000      	movs	r0, #0
 80074da:	4605      	mov	r5, r0
 80074dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074de:	930c      	str	r3, [sp, #48]	@ 0x30
 80074e0:	3a30      	subs	r2, #48	@ 0x30
 80074e2:	f100 0301 	add.w	r3, r0, #1
 80074e6:	d02a      	beq.n	800753e <_strtod_l+0x25e>
 80074e8:	4499      	add	r9, r3
 80074ea:	210a      	movs	r1, #10
 80074ec:	462b      	mov	r3, r5
 80074ee:	eb00 0c05 	add.w	ip, r0, r5
 80074f2:	4563      	cmp	r3, ip
 80074f4:	d10d      	bne.n	8007512 <_strtod_l+0x232>
 80074f6:	1c69      	adds	r1, r5, #1
 80074f8:	4401      	add	r1, r0
 80074fa:	4428      	add	r0, r5
 80074fc:	2808      	cmp	r0, #8
 80074fe:	dc16      	bgt.n	800752e <_strtod_l+0x24e>
 8007500:	230a      	movs	r3, #10
 8007502:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007504:	fb03 2300 	mla	r3, r3, r0, r2
 8007508:	930a      	str	r3, [sp, #40]	@ 0x28
 800750a:	2300      	movs	r3, #0
 800750c:	e018      	b.n	8007540 <_strtod_l+0x260>
 800750e:	4638      	mov	r0, r7
 8007510:	e7da      	b.n	80074c8 <_strtod_l+0x1e8>
 8007512:	2b08      	cmp	r3, #8
 8007514:	f103 0301 	add.w	r3, r3, #1
 8007518:	dc03      	bgt.n	8007522 <_strtod_l+0x242>
 800751a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800751c:	434e      	muls	r6, r1
 800751e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007520:	e7e7      	b.n	80074f2 <_strtod_l+0x212>
 8007522:	2b10      	cmp	r3, #16
 8007524:	bfde      	ittt	le
 8007526:	9e08      	ldrle	r6, [sp, #32]
 8007528:	434e      	mulle	r6, r1
 800752a:	9608      	strle	r6, [sp, #32]
 800752c:	e7e1      	b.n	80074f2 <_strtod_l+0x212>
 800752e:	280f      	cmp	r0, #15
 8007530:	dceb      	bgt.n	800750a <_strtod_l+0x22a>
 8007532:	230a      	movs	r3, #10
 8007534:	9808      	ldr	r0, [sp, #32]
 8007536:	fb03 2300 	mla	r3, r3, r0, r2
 800753a:	9308      	str	r3, [sp, #32]
 800753c:	e7e5      	b.n	800750a <_strtod_l+0x22a>
 800753e:	4629      	mov	r1, r5
 8007540:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007542:	460d      	mov	r5, r1
 8007544:	1c50      	adds	r0, r2, #1
 8007546:	9019      	str	r0, [sp, #100]	@ 0x64
 8007548:	7852      	ldrb	r2, [r2, #1]
 800754a:	4618      	mov	r0, r3
 800754c:	e7b1      	b.n	80074b2 <_strtod_l+0x1d2>
 800754e:	f04f 0900 	mov.w	r9, #0
 8007552:	2301      	movs	r3, #1
 8007554:	e77d      	b.n	8007452 <_strtod_l+0x172>
 8007556:	f04f 0c00 	mov.w	ip, #0
 800755a:	1ca2      	adds	r2, r4, #2
 800755c:	9219      	str	r2, [sp, #100]	@ 0x64
 800755e:	78a2      	ldrb	r2, [r4, #2]
 8007560:	e785      	b.n	800746e <_strtod_l+0x18e>
 8007562:	f04f 0c01 	mov.w	ip, #1
 8007566:	e7f8      	b.n	800755a <_strtod_l+0x27a>
 8007568:	08009f38 	.word	0x08009f38
 800756c:	7ff00000 	.word	0x7ff00000
 8007570:	08009f20 	.word	0x08009f20
 8007574:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007576:	1c51      	adds	r1, r2, #1
 8007578:	9119      	str	r1, [sp, #100]	@ 0x64
 800757a:	7852      	ldrb	r2, [r2, #1]
 800757c:	2a30      	cmp	r2, #48	@ 0x30
 800757e:	d0f9      	beq.n	8007574 <_strtod_l+0x294>
 8007580:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007584:	2908      	cmp	r1, #8
 8007586:	f63f af78 	bhi.w	800747a <_strtod_l+0x19a>
 800758a:	f04f 080a 	mov.w	r8, #10
 800758e:	3a30      	subs	r2, #48	@ 0x30
 8007590:	920e      	str	r2, [sp, #56]	@ 0x38
 8007592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007594:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007596:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007598:	1c56      	adds	r6, r2, #1
 800759a:	9619      	str	r6, [sp, #100]	@ 0x64
 800759c:	7852      	ldrb	r2, [r2, #1]
 800759e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075a2:	f1be 0f09 	cmp.w	lr, #9
 80075a6:	d939      	bls.n	800761c <_strtod_l+0x33c>
 80075a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075ae:	1a76      	subs	r6, r6, r1
 80075b0:	2e08      	cmp	r6, #8
 80075b2:	dc03      	bgt.n	80075bc <_strtod_l+0x2dc>
 80075b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075b6:	4588      	cmp	r8, r1
 80075b8:	bfa8      	it	ge
 80075ba:	4688      	movge	r8, r1
 80075bc:	f1bc 0f00 	cmp.w	ip, #0
 80075c0:	d001      	beq.n	80075c6 <_strtod_l+0x2e6>
 80075c2:	f1c8 0800 	rsb	r8, r8, #0
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	d14e      	bne.n	8007668 <_strtod_l+0x388>
 80075ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075cc:	4308      	orrs	r0, r1
 80075ce:	f47f aec0 	bne.w	8007352 <_strtod_l+0x72>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f aed6 	bne.w	8007384 <_strtod_l+0xa4>
 80075d8:	2a69      	cmp	r2, #105	@ 0x69
 80075da:	d028      	beq.n	800762e <_strtod_l+0x34e>
 80075dc:	dc25      	bgt.n	800762a <_strtod_l+0x34a>
 80075de:	2a49      	cmp	r2, #73	@ 0x49
 80075e0:	d025      	beq.n	800762e <_strtod_l+0x34e>
 80075e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80075e4:	f47f aece 	bne.w	8007384 <_strtod_l+0xa4>
 80075e8:	499a      	ldr	r1, [pc, #616]	@ (8007854 <_strtod_l+0x574>)
 80075ea:	a819      	add	r0, sp, #100	@ 0x64
 80075ec:	f001 fd66 	bl	80090bc <__match>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f aec7 	beq.w	8007384 <_strtod_l+0xa4>
 80075f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b28      	cmp	r3, #40	@ 0x28
 80075fc:	d12e      	bne.n	800765c <_strtod_l+0x37c>
 80075fe:	4996      	ldr	r1, [pc, #600]	@ (8007858 <_strtod_l+0x578>)
 8007600:	aa1c      	add	r2, sp, #112	@ 0x70
 8007602:	a819      	add	r0, sp, #100	@ 0x64
 8007604:	f001 fd6e 	bl	80090e4 <__hexnan>
 8007608:	2805      	cmp	r0, #5
 800760a:	d127      	bne.n	800765c <_strtod_l+0x37c>
 800760c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800760e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007612:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007616:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800761a:	e69a      	b.n	8007352 <_strtod_l+0x72>
 800761c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800761e:	fb08 2101 	mla	r1, r8, r1, r2
 8007622:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007626:	920e      	str	r2, [sp, #56]	@ 0x38
 8007628:	e7b5      	b.n	8007596 <_strtod_l+0x2b6>
 800762a:	2a6e      	cmp	r2, #110	@ 0x6e
 800762c:	e7da      	b.n	80075e4 <_strtod_l+0x304>
 800762e:	498b      	ldr	r1, [pc, #556]	@ (800785c <_strtod_l+0x57c>)
 8007630:	a819      	add	r0, sp, #100	@ 0x64
 8007632:	f001 fd43 	bl	80090bc <__match>
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f aea4 	beq.w	8007384 <_strtod_l+0xa4>
 800763c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800763e:	4988      	ldr	r1, [pc, #544]	@ (8007860 <_strtod_l+0x580>)
 8007640:	3b01      	subs	r3, #1
 8007642:	a819      	add	r0, sp, #100	@ 0x64
 8007644:	9319      	str	r3, [sp, #100]	@ 0x64
 8007646:	f001 fd39 	bl	80090bc <__match>
 800764a:	b910      	cbnz	r0, 8007652 <_strtod_l+0x372>
 800764c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764e:	3301      	adds	r3, #1
 8007650:	9319      	str	r3, [sp, #100]	@ 0x64
 8007652:	f04f 0a00 	mov.w	sl, #0
 8007656:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007864 <_strtod_l+0x584>
 800765a:	e67a      	b.n	8007352 <_strtod_l+0x72>
 800765c:	4882      	ldr	r0, [pc, #520]	@ (8007868 <_strtod_l+0x588>)
 800765e:	f001 fa6b 	bl	8008b38 <nan>
 8007662:	4682      	mov	sl, r0
 8007664:	468b      	mov	fp, r1
 8007666:	e674      	b.n	8007352 <_strtod_l+0x72>
 8007668:	eba8 0309 	sub.w	r3, r8, r9
 800766c:	2f00      	cmp	r7, #0
 800766e:	bf08      	it	eq
 8007670:	462f      	moveq	r7, r5
 8007672:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007674:	2d10      	cmp	r5, #16
 8007676:	462c      	mov	r4, r5
 8007678:	9309      	str	r3, [sp, #36]	@ 0x24
 800767a:	bfa8      	it	ge
 800767c:	2410      	movge	r4, #16
 800767e:	f7f8 febb 	bl	80003f8 <__aeabi_ui2d>
 8007682:	2d09      	cmp	r5, #9
 8007684:	4682      	mov	sl, r0
 8007686:	468b      	mov	fp, r1
 8007688:	dc11      	bgt.n	80076ae <_strtod_l+0x3ce>
 800768a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	f43f ae60 	beq.w	8007352 <_strtod_l+0x72>
 8007692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007694:	dd76      	ble.n	8007784 <_strtod_l+0x4a4>
 8007696:	2b16      	cmp	r3, #22
 8007698:	dc5d      	bgt.n	8007756 <_strtod_l+0x476>
 800769a:	4974      	ldr	r1, [pc, #464]	@ (800786c <_strtod_l+0x58c>)
 800769c:	4652      	mov	r2, sl
 800769e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a2:	465b      	mov	r3, fp
 80076a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a8:	f7f8 ff20 	bl	80004ec <__aeabi_dmul>
 80076ac:	e7d9      	b.n	8007662 <_strtod_l+0x382>
 80076ae:	4b6f      	ldr	r3, [pc, #444]	@ (800786c <_strtod_l+0x58c>)
 80076b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80076b8:	f7f8 ff18 	bl	80004ec <__aeabi_dmul>
 80076bc:	4682      	mov	sl, r0
 80076be:	9808      	ldr	r0, [sp, #32]
 80076c0:	468b      	mov	fp, r1
 80076c2:	f7f8 fe99 	bl	80003f8 <__aeabi_ui2d>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4650      	mov	r0, sl
 80076cc:	4659      	mov	r1, fp
 80076ce:	f7f8 fd57 	bl	8000180 <__adddf3>
 80076d2:	2d0f      	cmp	r5, #15
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	ddd7      	ble.n	800768a <_strtod_l+0x3aa>
 80076da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076dc:	1b2c      	subs	r4, r5, r4
 80076de:	441c      	add	r4, r3
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	f340 8096 	ble.w	8007812 <_strtod_l+0x532>
 80076e6:	f014 030f 	ands.w	r3, r4, #15
 80076ea:	d00a      	beq.n	8007702 <_strtod_l+0x422>
 80076ec:	495f      	ldr	r1, [pc, #380]	@ (800786c <_strtod_l+0x58c>)
 80076ee:	4652      	mov	r2, sl
 80076f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f8:	465b      	mov	r3, fp
 80076fa:	f7f8 fef7 	bl	80004ec <__aeabi_dmul>
 80076fe:	4682      	mov	sl, r0
 8007700:	468b      	mov	fp, r1
 8007702:	f034 040f 	bics.w	r4, r4, #15
 8007706:	d073      	beq.n	80077f0 <_strtod_l+0x510>
 8007708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800770c:	dd48      	ble.n	80077a0 <_strtod_l+0x4c0>
 800770e:	2400      	movs	r4, #0
 8007710:	46a0      	mov	r8, r4
 8007712:	46a1      	mov	r9, r4
 8007714:	940a      	str	r4, [sp, #40]	@ 0x28
 8007716:	2322      	movs	r3, #34	@ 0x22
 8007718:	f04f 0a00 	mov.w	sl, #0
 800771c:	9a05      	ldr	r2, [sp, #20]
 800771e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007864 <_strtod_l+0x584>
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	f43f ae13 	beq.w	8007352 <_strtod_l+0x72>
 800772c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800772e:	9805      	ldr	r0, [sp, #20]
 8007730:	f7ff f94c 	bl	80069cc <_Bfree>
 8007734:	4649      	mov	r1, r9
 8007736:	9805      	ldr	r0, [sp, #20]
 8007738:	f7ff f948 	bl	80069cc <_Bfree>
 800773c:	4641      	mov	r1, r8
 800773e:	9805      	ldr	r0, [sp, #20]
 8007740:	f7ff f944 	bl	80069cc <_Bfree>
 8007744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	f7ff f940 	bl	80069cc <_Bfree>
 800774c:	4621      	mov	r1, r4
 800774e:	9805      	ldr	r0, [sp, #20]
 8007750:	f7ff f93c 	bl	80069cc <_Bfree>
 8007754:	e5fd      	b.n	8007352 <_strtod_l+0x72>
 8007756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800775c:	4293      	cmp	r3, r2
 800775e:	dbbc      	blt.n	80076da <_strtod_l+0x3fa>
 8007760:	4c42      	ldr	r4, [pc, #264]	@ (800786c <_strtod_l+0x58c>)
 8007762:	f1c5 050f 	rsb	r5, r5, #15
 8007766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800776a:	4652      	mov	r2, sl
 800776c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007770:	465b      	mov	r3, fp
 8007772:	f7f8 febb 	bl	80004ec <__aeabi_dmul>
 8007776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007778:	1b5d      	subs	r5, r3, r5
 800777a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800777e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007782:	e791      	b.n	80076a8 <_strtod_l+0x3c8>
 8007784:	3316      	adds	r3, #22
 8007786:	dba8      	blt.n	80076da <_strtod_l+0x3fa>
 8007788:	4b38      	ldr	r3, [pc, #224]	@ (800786c <_strtod_l+0x58c>)
 800778a:	eba9 0808 	sub.w	r8, r9, r8
 800778e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007792:	4650      	mov	r0, sl
 8007794:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007798:	4659      	mov	r1, fp
 800779a:	f7f8 ffd1 	bl	8000740 <__aeabi_ddiv>
 800779e:	e760      	b.n	8007662 <_strtod_l+0x382>
 80077a0:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <_strtod_l+0x590>)
 80077a2:	4650      	mov	r0, sl
 80077a4:	9308      	str	r3, [sp, #32]
 80077a6:	2300      	movs	r3, #0
 80077a8:	4659      	mov	r1, fp
 80077aa:	461e      	mov	r6, r3
 80077ac:	1124      	asrs	r4, r4, #4
 80077ae:	2c01      	cmp	r4, #1
 80077b0:	dc21      	bgt.n	80077f6 <_strtod_l+0x516>
 80077b2:	b10b      	cbz	r3, 80077b8 <_strtod_l+0x4d8>
 80077b4:	4682      	mov	sl, r0
 80077b6:	468b      	mov	fp, r1
 80077b8:	492d      	ldr	r1, [pc, #180]	@ (8007870 <_strtod_l+0x590>)
 80077ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80077be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80077c2:	4652      	mov	r2, sl
 80077c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c8:	465b      	mov	r3, fp
 80077ca:	f7f8 fe8f 	bl	80004ec <__aeabi_dmul>
 80077ce:	4b25      	ldr	r3, [pc, #148]	@ (8007864 <_strtod_l+0x584>)
 80077d0:	460a      	mov	r2, r1
 80077d2:	400b      	ands	r3, r1
 80077d4:	4927      	ldr	r1, [pc, #156]	@ (8007874 <_strtod_l+0x594>)
 80077d6:	4682      	mov	sl, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	d898      	bhi.n	800770e <_strtod_l+0x42e>
 80077dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf86      	itte	hi
 80077e4:	f04f 3aff 	movhi.w	sl, #4294967295
 80077e8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007878 <_strtod_l+0x598>
 80077ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80077f0:	2300      	movs	r3, #0
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	e07a      	b.n	80078ec <_strtod_l+0x60c>
 80077f6:	07e2      	lsls	r2, r4, #31
 80077f8:	d505      	bpl.n	8007806 <_strtod_l+0x526>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fe74 	bl	80004ec <__aeabi_dmul>
 8007804:	2301      	movs	r3, #1
 8007806:	9a08      	ldr	r2, [sp, #32]
 8007808:	3601      	adds	r6, #1
 800780a:	3208      	adds	r2, #8
 800780c:	1064      	asrs	r4, r4, #1
 800780e:	9208      	str	r2, [sp, #32]
 8007810:	e7cd      	b.n	80077ae <_strtod_l+0x4ce>
 8007812:	d0ed      	beq.n	80077f0 <_strtod_l+0x510>
 8007814:	4264      	negs	r4, r4
 8007816:	f014 020f 	ands.w	r2, r4, #15
 800781a:	d00a      	beq.n	8007832 <_strtod_l+0x552>
 800781c:	4b13      	ldr	r3, [pc, #76]	@ (800786c <_strtod_l+0x58c>)
 800781e:	4650      	mov	r0, sl
 8007820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007824:	4659      	mov	r1, fp
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 ff89 	bl	8000740 <__aeabi_ddiv>
 800782e:	4682      	mov	sl, r0
 8007830:	468b      	mov	fp, r1
 8007832:	1124      	asrs	r4, r4, #4
 8007834:	d0dc      	beq.n	80077f0 <_strtod_l+0x510>
 8007836:	2c1f      	cmp	r4, #31
 8007838:	dd20      	ble.n	800787c <_strtod_l+0x59c>
 800783a:	2400      	movs	r4, #0
 800783c:	46a0      	mov	r8, r4
 800783e:	46a1      	mov	r9, r4
 8007840:	940a      	str	r4, [sp, #40]	@ 0x28
 8007842:	2322      	movs	r3, #34	@ 0x22
 8007844:	9a05      	ldr	r2, [sp, #20]
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	f04f 0b00 	mov.w	fp, #0
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e768      	b.n	8007724 <_strtod_l+0x444>
 8007852:	bf00      	nop
 8007854:	08009d13 	.word	0x08009d13
 8007858:	08009f24 	.word	0x08009f24
 800785c:	08009d0b 	.word	0x08009d0b
 8007860:	08009d40 	.word	0x08009d40
 8007864:	7ff00000 	.word	0x7ff00000
 8007868:	0800a0e8 	.word	0x0800a0e8
 800786c:	08009e58 	.word	0x08009e58
 8007870:	08009e30 	.word	0x08009e30
 8007874:	7ca00000 	.word	0x7ca00000
 8007878:	7fefffff 	.word	0x7fefffff
 800787c:	f014 0310 	ands.w	r3, r4, #16
 8007880:	bf18      	it	ne
 8007882:	236a      	movne	r3, #106	@ 0x6a
 8007884:	4650      	mov	r0, sl
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	4659      	mov	r1, fp
 800788a:	2300      	movs	r3, #0
 800788c:	4ea9      	ldr	r6, [pc, #676]	@ (8007b34 <_strtod_l+0x854>)
 800788e:	07e2      	lsls	r2, r4, #31
 8007890:	d504      	bpl.n	800789c <_strtod_l+0x5bc>
 8007892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007896:	f7f8 fe29 	bl	80004ec <__aeabi_dmul>
 800789a:	2301      	movs	r3, #1
 800789c:	1064      	asrs	r4, r4, #1
 800789e:	f106 0608 	add.w	r6, r6, #8
 80078a2:	d1f4      	bne.n	800788e <_strtod_l+0x5ae>
 80078a4:	b10b      	cbz	r3, 80078aa <_strtod_l+0x5ca>
 80078a6:	4682      	mov	sl, r0
 80078a8:	468b      	mov	fp, r1
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	b1b3      	cbz	r3, 80078dc <_strtod_l+0x5fc>
 80078ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	4659      	mov	r1, fp
 80078ba:	dd0f      	ble.n	80078dc <_strtod_l+0x5fc>
 80078bc:	2b1f      	cmp	r3, #31
 80078be:	dd57      	ble.n	8007970 <_strtod_l+0x690>
 80078c0:	2b34      	cmp	r3, #52	@ 0x34
 80078c2:	bfd8      	it	le
 80078c4:	f04f 33ff 	movle.w	r3, #4294967295
 80078c8:	f04f 0a00 	mov.w	sl, #0
 80078cc:	bfcf      	iteee	gt
 80078ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80078d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80078d6:	4093      	lslle	r3, r2
 80078d8:	ea03 0b01 	andle.w	fp, r3, r1
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4650      	mov	r0, sl
 80078e2:	4659      	mov	r1, fp
 80078e4:	f7f9 f86a 	bl	80009bc <__aeabi_dcmpeq>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1a6      	bne.n	800783a <_strtod_l+0x55a>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	463a      	mov	r2, r7
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80078f4:	462b      	mov	r3, r5
 80078f6:	9805      	ldr	r0, [sp, #20]
 80078f8:	f7ff f8d0 	bl	8006a9c <__s2b>
 80078fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af05 	beq.w	800770e <_strtod_l+0x42e>
 8007904:	2400      	movs	r4, #0
 8007906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007908:	eba9 0308 	sub.w	r3, r9, r8
 800790c:	2a00      	cmp	r2, #0
 800790e:	bfa8      	it	ge
 8007910:	2300      	movge	r3, #0
 8007912:	46a0      	mov	r8, r4
 8007914:	9312      	str	r3, [sp, #72]	@ 0x48
 8007916:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800791a:	9316      	str	r3, [sp, #88]	@ 0x58
 800791c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	6859      	ldr	r1, [r3, #4]
 8007922:	f7ff f813 	bl	800694c <_Balloc>
 8007926:	4681      	mov	r9, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	f43f aef4 	beq.w	8007716 <_strtod_l+0x436>
 800792e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007930:	300c      	adds	r0, #12
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	f103 010c 	add.w	r1, r3, #12
 8007938:	3202      	adds	r2, #2
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	f001 f8ee 	bl	8008b1c <memcpy>
 8007940:	ab1c      	add	r3, sp, #112	@ 0x70
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007952:	f7ff fbd5 	bl	8007100 <__d2b>
 8007956:	901a      	str	r0, [sp, #104]	@ 0x68
 8007958:	2800      	cmp	r0, #0
 800795a:	f43f aedc 	beq.w	8007716 <_strtod_l+0x436>
 800795e:	2101      	movs	r1, #1
 8007960:	9805      	ldr	r0, [sp, #20]
 8007962:	f7ff f931 	bl	8006bc8 <__i2b>
 8007966:	4680      	mov	r8, r0
 8007968:	b948      	cbnz	r0, 800797e <_strtod_l+0x69e>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	e6d2      	b.n	8007716 <_strtod_l+0x436>
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	ea03 0a0a 	and.w	sl, r3, sl
 800797c:	e7ae      	b.n	80078dc <_strtod_l+0x5fc>
 800797e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007980:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007982:	2d00      	cmp	r5, #0
 8007984:	bfab      	itete	ge
 8007986:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007988:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800798a:	18ef      	addge	r7, r5, r3
 800798c:	1b5e      	sublt	r6, r3, r5
 800798e:	9b08      	ldr	r3, [sp, #32]
 8007990:	bfa8      	it	ge
 8007992:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007994:	eba5 0503 	sub.w	r5, r5, r3
 8007998:	4415      	add	r5, r2
 800799a:	4b67      	ldr	r3, [pc, #412]	@ (8007b38 <_strtod_l+0x858>)
 800799c:	f105 35ff 	add.w	r5, r5, #4294967295
 80079a0:	bfb8      	it	lt
 80079a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079a4:	429d      	cmp	r5, r3
 80079a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079aa:	da50      	bge.n	8007a4e <_strtod_l+0x76e>
 80079ac:	1b5b      	subs	r3, r3, r5
 80079ae:	2b1f      	cmp	r3, #31
 80079b0:	f04f 0101 	mov.w	r1, #1
 80079b4:	eba2 0203 	sub.w	r2, r2, r3
 80079b8:	dc3d      	bgt.n	8007a36 <_strtod_l+0x756>
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079c0:	2300      	movs	r3, #0
 80079c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80079c4:	18bd      	adds	r5, r7, r2
 80079c6:	9b08      	ldr	r3, [sp, #32]
 80079c8:	42af      	cmp	r7, r5
 80079ca:	4416      	add	r6, r2
 80079cc:	441e      	add	r6, r3
 80079ce:	463b      	mov	r3, r7
 80079d0:	bfa8      	it	ge
 80079d2:	462b      	movge	r3, r5
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	bfa8      	it	ge
 80079d8:	4633      	movge	r3, r6
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfc2      	ittt	gt
 80079de:	1aed      	subgt	r5, r5, r3
 80079e0:	1af6      	subgt	r6, r6, r3
 80079e2:	1aff      	subgt	r7, r7, r3
 80079e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd16      	ble.n	8007a18 <_strtod_l+0x738>
 80079ea:	4641      	mov	r1, r8
 80079ec:	461a      	mov	r2, r3
 80079ee:	9805      	ldr	r0, [sp, #20]
 80079f0:	f7ff f9a8 	bl	8006d44 <__pow5mult>
 80079f4:	4680      	mov	r8, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0b7      	beq.n	800796a <_strtod_l+0x68a>
 80079fa:	4601      	mov	r1, r0
 80079fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80079fe:	9805      	ldr	r0, [sp, #20]
 8007a00:	f7ff f8f8 	bl	8006bf4 <__multiply>
 8007a04:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f43f ae85 	beq.w	8007716 <_strtod_l+0x436>
 8007a0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a0e:	9805      	ldr	r0, [sp, #20]
 8007a10:	f7fe ffdc 	bl	80069cc <_Bfree>
 8007a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	dc1d      	bgt.n	8007a58 <_strtod_l+0x778>
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dd23      	ble.n	8007a6a <_strtod_l+0x78a>
 8007a22:	4649      	mov	r1, r9
 8007a24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a26:	9805      	ldr	r0, [sp, #20]
 8007a28:	f7ff f98c 	bl	8006d44 <__pow5mult>
 8007a2c:	4681      	mov	r9, r0
 8007a2e:	b9e0      	cbnz	r0, 8007a6a <_strtod_l+0x78a>
 8007a30:	f04f 0900 	mov.w	r9, #0
 8007a34:	e66f      	b.n	8007716 <_strtod_l+0x436>
 8007a36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a42:	35e2      	adds	r5, #226	@ 0xe2
 8007a44:	fa01 f305 	lsl.w	r3, r1, r5
 8007a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a4c:	e7ba      	b.n	80079c4 <_strtod_l+0x6e4>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a52:	2301      	movs	r3, #1
 8007a54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a56:	e7b5      	b.n	80079c4 <_strtod_l+0x6e4>
 8007a58:	462a      	mov	r2, r5
 8007a5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a5c:	9805      	ldr	r0, [sp, #20]
 8007a5e:	f7ff f9cb 	bl	8006df8 <__lshift>
 8007a62:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1d9      	bne.n	8007a1c <_strtod_l+0x73c>
 8007a68:	e655      	b.n	8007716 <_strtod_l+0x436>
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	dd07      	ble.n	8007a7e <_strtod_l+0x79e>
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4632      	mov	r2, r6
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	f7ff f9c0 	bl	8006df8 <__lshift>
 8007a78:	4681      	mov	r9, r0
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d0d8      	beq.n	8007a30 <_strtod_l+0x750>
 8007a7e:	2f00      	cmp	r7, #0
 8007a80:	dd08      	ble.n	8007a94 <_strtod_l+0x7b4>
 8007a82:	4641      	mov	r1, r8
 8007a84:	463a      	mov	r2, r7
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f7ff f9b6 	bl	8006df8 <__lshift>
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae41 	beq.w	8007716 <_strtod_l+0x436>
 8007a94:	464a      	mov	r2, r9
 8007a96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a98:	9805      	ldr	r0, [sp, #20]
 8007a9a:	f7ff fa35 	bl	8006f08 <__mdiff>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f ae38 	beq.w	8007716 <_strtod_l+0x436>
 8007aa6:	68c3      	ldr	r3, [r0, #12]
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007aac:	2300      	movs	r3, #0
 8007aae:	60c3      	str	r3, [r0, #12]
 8007ab0:	f7ff fa0e 	bl	8006ed0 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	da45      	bge.n	8007b44 <_strtod_l+0x864>
 8007ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aba:	ea53 030a 	orrs.w	r3, r3, sl
 8007abe:	d16b      	bne.n	8007b98 <_strtod_l+0x8b8>
 8007ac0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d167      	bne.n	8007b98 <_strtod_l+0x8b8>
 8007ac8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007acc:	0d1b      	lsrs	r3, r3, #20
 8007ace:	051b      	lsls	r3, r3, #20
 8007ad0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ad4:	d960      	bls.n	8007b98 <_strtod_l+0x8b8>
 8007ad6:	6963      	ldr	r3, [r4, #20]
 8007ad8:	b913      	cbnz	r3, 8007ae0 <_strtod_l+0x800>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	dd5b      	ble.n	8007b98 <_strtod_l+0x8b8>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	f7ff f987 	bl	8006df8 <__lshift>
 8007aea:	4641      	mov	r1, r8
 8007aec:	4604      	mov	r4, r0
 8007aee:	f7ff f9ef 	bl	8006ed0 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	dd50      	ble.n	8007b98 <_strtod_l+0x8b8>
 8007af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007afa:	9a08      	ldr	r2, [sp, #32]
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	051b      	lsls	r3, r3, #20
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d06a      	beq.n	8007bda <_strtod_l+0x8fa>
 8007b04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b08:	d867      	bhi.n	8007bda <_strtod_l+0x8fa>
 8007b0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b0e:	f67f ae98 	bls.w	8007842 <_strtod_l+0x562>
 8007b12:	4650      	mov	r0, sl
 8007b14:	4659      	mov	r1, fp
 8007b16:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <_strtod_l+0x85c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f7f8 fce7 	bl	80004ec <__aeabi_dmul>
 8007b1e:	4b08      	ldr	r3, [pc, #32]	@ (8007b40 <_strtod_l+0x860>)
 8007b20:	4682      	mov	sl, r0
 8007b22:	400b      	ands	r3, r1
 8007b24:	468b      	mov	fp, r1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f ae00 	bne.w	800772c <_strtod_l+0x44c>
 8007b2c:	2322      	movs	r3, #34	@ 0x22
 8007b2e:	9a05      	ldr	r2, [sp, #20]
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e5fb      	b.n	800772c <_strtod_l+0x44c>
 8007b34:	08009f50 	.word	0x08009f50
 8007b38:	fffffc02 	.word	0xfffffc02
 8007b3c:	39500000 	.word	0x39500000
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b48:	d165      	bne.n	8007c16 <_strtod_l+0x936>
 8007b4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b50:	b35a      	cbz	r2, 8007baa <_strtod_l+0x8ca>
 8007b52:	4a99      	ldr	r2, [pc, #612]	@ (8007db8 <_strtod_l+0xad8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d12b      	bne.n	8007bb0 <_strtod_l+0x8d0>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	4651      	mov	r1, sl
 8007b5c:	b303      	cbz	r3, 8007ba0 <_strtod_l+0x8c0>
 8007b5e:	465a      	mov	r2, fp
 8007b60:	4b96      	ldr	r3, [pc, #600]	@ (8007dbc <_strtod_l+0xadc>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	d81b      	bhi.n	8007ba6 <_strtod_l+0x8c6>
 8007b6e:	0d1b      	lsrs	r3, r3, #20
 8007b70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d119      	bne.n	8007bb0 <_strtod_l+0x8d0>
 8007b7c:	4b90      	ldr	r3, [pc, #576]	@ (8007dc0 <_strtod_l+0xae0>)
 8007b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d102      	bne.n	8007b8a <_strtod_l+0x8aa>
 8007b84:	3101      	adds	r1, #1
 8007b86:	f43f adc6 	beq.w	8007716 <_strtod_l+0x436>
 8007b8a:	f04f 0a00 	mov.w	sl, #0
 8007b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8007dbc <_strtod_l+0xadc>)
 8007b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b92:	401a      	ands	r2, r3
 8007b94:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1b9      	bne.n	8007b12 <_strtod_l+0x832>
 8007b9e:	e5c5      	b.n	800772c <_strtod_l+0x44c>
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	e7e8      	b.n	8007b78 <_strtod_l+0x898>
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	e7e6      	b.n	8007b78 <_strtod_l+0x898>
 8007baa:	ea53 030a 	orrs.w	r3, r3, sl
 8007bae:	d0a2      	beq.n	8007af6 <_strtod_l+0x816>
 8007bb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bb2:	b1db      	cbz	r3, 8007bec <_strtod_l+0x90c>
 8007bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bb6:	4213      	tst	r3, r2
 8007bb8:	d0ee      	beq.n	8007b98 <_strtod_l+0x8b8>
 8007bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	4659      	mov	r1, fp
 8007bc0:	9a08      	ldr	r2, [sp, #32]
 8007bc2:	b1bb      	cbz	r3, 8007bf4 <_strtod_l+0x914>
 8007bc4:	f7ff fb68 	bl	8007298 <sulp>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd0:	f7f8 fad6 	bl	8000180 <__adddf3>
 8007bd4:	4682      	mov	sl, r0
 8007bd6:	468b      	mov	fp, r1
 8007bd8:	e7de      	b.n	8007b98 <_strtod_l+0x8b8>
 8007bda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007bde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007be2:	f04f 3aff 	mov.w	sl, #4294967295
 8007be6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007bea:	e7d5      	b.n	8007b98 <_strtod_l+0x8b8>
 8007bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bee:	ea13 0f0a 	tst.w	r3, sl
 8007bf2:	e7e1      	b.n	8007bb8 <_strtod_l+0x8d8>
 8007bf4:	f7ff fb50 	bl	8007298 <sulp>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c00:	f7f8 fabc 	bl	800017c <__aeabi_dsub>
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4682      	mov	sl, r0
 8007c0a:	468b      	mov	fp, r1
 8007c0c:	f7f8 fed6 	bl	80009bc <__aeabi_dcmpeq>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d0c1      	beq.n	8007b98 <_strtod_l+0x8b8>
 8007c14:	e615      	b.n	8007842 <_strtod_l+0x562>
 8007c16:	4641      	mov	r1, r8
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff fac9 	bl	80071b0 <__ratio>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c24:	4606      	mov	r6, r0
 8007c26:	460f      	mov	r7, r1
 8007c28:	f7f8 fedc 	bl	80009e4 <__aeabi_dcmple>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d06d      	beq.n	8007d0c <_strtod_l+0xa2c>
 8007c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d178      	bne.n	8007d28 <_strtod_l+0xa48>
 8007c36:	f1ba 0f00 	cmp.w	sl, #0
 8007c3a:	d156      	bne.n	8007cea <_strtod_l+0xa0a>
 8007c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d158      	bne.n	8007cf8 <_strtod_l+0xa18>
 8007c46:	2200      	movs	r2, #0
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8007dc4 <_strtod_l+0xae4>)
 8007c4e:	f7f8 febf 	bl	80009d0 <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d157      	bne.n	8007d06 <_strtod_l+0xa26>
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc8 <_strtod_l+0xae8>)
 8007c5e:	f7f8 fc45 	bl	80004ec <__aeabi_dmul>
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007c6a:	9606      	str	r6, [sp, #24]
 8007c6c:	9307      	str	r3, [sp, #28]
 8007c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c72:	4d52      	ldr	r5, [pc, #328]	@ (8007dbc <_strtod_l+0xadc>)
 8007c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c7a:	401d      	ands	r5, r3
 8007c7c:	4b53      	ldr	r3, [pc, #332]	@ (8007dcc <_strtod_l+0xaec>)
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	f040 80aa 	bne.w	8007dd8 <_strtod_l+0xaf8>
 8007c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c86:	4650      	mov	r0, sl
 8007c88:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	f7ff f9cf 	bl	8007030 <__ulp>
 8007c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c96:	f7f8 fc29 	bl	80004ec <__aeabi_dmul>
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	f7f8 fa6f 	bl	8000180 <__adddf3>
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4945      	ldr	r1, [pc, #276]	@ (8007dbc <_strtod_l+0xadc>)
 8007ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8007dd0 <_strtod_l+0xaf0>)
 8007ca8:	4019      	ands	r1, r3
 8007caa:	4291      	cmp	r1, r2
 8007cac:	4682      	mov	sl, r0
 8007cae:	d942      	bls.n	8007d36 <_strtod_l+0xa56>
 8007cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cb2:	4b43      	ldr	r3, [pc, #268]	@ (8007dc0 <_strtod_l+0xae0>)
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d103      	bne.n	8007cc0 <_strtod_l+0x9e0>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f43f ad2b 	beq.w	8007716 <_strtod_l+0x436>
 8007cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007cc4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007dc0 <_strtod_l+0xae0>
 8007cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cca:	9805      	ldr	r0, [sp, #20]
 8007ccc:	f7fe fe7e 	bl	80069cc <_Bfree>
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	9805      	ldr	r0, [sp, #20]
 8007cd4:	f7fe fe7a 	bl	80069cc <_Bfree>
 8007cd8:	4641      	mov	r1, r8
 8007cda:	9805      	ldr	r0, [sp, #20]
 8007cdc:	f7fe fe76 	bl	80069cc <_Bfree>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	9805      	ldr	r0, [sp, #20]
 8007ce4:	f7fe fe72 	bl	80069cc <_Bfree>
 8007ce8:	e618      	b.n	800791c <_strtod_l+0x63c>
 8007cea:	f1ba 0f01 	cmp.w	sl, #1
 8007cee:	d103      	bne.n	8007cf8 <_strtod_l+0xa18>
 8007cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f43f ada5 	beq.w	8007842 <_strtod_l+0x562>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4b36      	ldr	r3, [pc, #216]	@ (8007dd4 <_strtod_l+0xaf4>)
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d02:	4f30      	ldr	r7, [pc, #192]	@ (8007dc4 <_strtod_l+0xae4>)
 8007d04:	e7b3      	b.n	8007c6e <_strtod_l+0x98e>
 8007d06:	2600      	movs	r6, #0
 8007d08:	4f2f      	ldr	r7, [pc, #188]	@ (8007dc8 <_strtod_l+0xae8>)
 8007d0a:	e7ac      	b.n	8007c66 <_strtod_l+0x986>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4b2d      	ldr	r3, [pc, #180]	@ (8007dc8 <_strtod_l+0xae8>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fbea 	bl	80004ec <__aeabi_dmul>
 8007d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0a1      	beq.n	8007c66 <_strtod_l+0x986>
 8007d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d26:	e7a2      	b.n	8007c6e <_strtod_l+0x98e>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <_strtod_l+0xae4>)
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	461f      	mov	r7, r3
 8007d30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d34:	e79b      	b.n	8007c6e <_strtod_l+0x98e>
 8007d36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d3a:	9b08      	ldr	r3, [sp, #32]
 8007d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1c1      	bne.n	8007cc8 <_strtod_l+0x9e8>
 8007d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	051b      	lsls	r3, r3, #20
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d1bb      	bne.n	8007cc8 <_strtod_l+0x9e8>
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f9 fa0c 	bl	8001170 <__aeabi_d2lz>
 8007d58:	f7f8 fb9a 	bl	8000490 <__aeabi_l2d>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fa0a 	bl	800017c <__aeabi_dsub>
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d70:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	ea46 060a 	orr.w	r6, r6, sl
 8007d7a:	431e      	orrs	r6, r3
 8007d7c:	d069      	beq.n	8007e52 <_strtod_l+0xb72>
 8007d7e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007da8 <_strtod_l+0xac8>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fe24 	bl	80009d0 <__aeabi_dcmplt>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f47f accf 	bne.w	800772c <_strtod_l+0x44c>
 8007d8e:	a308      	add	r3, pc, #32	@ (adr r3, 8007db0 <_strtod_l+0xad0>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d98:	f7f8 fe38 	bl	8000a0c <__aeabi_dcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d093      	beq.n	8007cc8 <_strtod_l+0x9e8>
 8007da0:	e4c4      	b.n	800772c <_strtod_l+0x44c>
 8007da2:	bf00      	nop
 8007da4:	f3af 8000 	nop.w
 8007da8:	94a03595 	.word	0x94a03595
 8007dac:	3fdfffff 	.word	0x3fdfffff
 8007db0:	35afe535 	.word	0x35afe535
 8007db4:	3fe00000 	.word	0x3fe00000
 8007db8:	000fffff 	.word	0x000fffff
 8007dbc:	7ff00000 	.word	0x7ff00000
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	3ff00000 	.word	0x3ff00000
 8007dc8:	3fe00000 	.word	0x3fe00000
 8007dcc:	7fe00000 	.word	0x7fe00000
 8007dd0:	7c9fffff 	.word	0x7c9fffff
 8007dd4:	bff00000 	.word	0xbff00000
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	b323      	cbz	r3, 8007e26 <_strtod_l+0xb46>
 8007ddc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007de0:	d821      	bhi.n	8007e26 <_strtod_l+0xb46>
 8007de2:	a327      	add	r3, pc, #156	@ (adr r3, 8007e80 <_strtod_l+0xba0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fdfa 	bl	80009e4 <__aeabi_dcmple>
 8007df0:	b1a0      	cbz	r0, 8007e1c <_strtod_l+0xb3c>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7f8 fe51 	bl	8000a9c <__aeabi_d2uiz>
 8007dfa:	2801      	cmp	r0, #1
 8007dfc:	bf38      	it	cc
 8007dfe:	2001      	movcc	r0, #1
 8007e00:	f7f8 fafa 	bl	80003f8 <__aeabi_ui2d>
 8007e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	b9fb      	cbnz	r3, 8007e4c <_strtod_l+0xb6c>
 8007e0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e10:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e12:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e1e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e22:	1b5b      	subs	r3, r3, r5
 8007e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e2e:	f7ff f8ff 	bl	8007030 <__ulp>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	f7f8 fb57 	bl	80004ec <__aeabi_dmul>
 8007e3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e42:	f7f8 f99d 	bl	8000180 <__adddf3>
 8007e46:	4682      	mov	sl, r0
 8007e48:	468b      	mov	fp, r1
 8007e4a:	e776      	b.n	8007d3a <_strtod_l+0xa5a>
 8007e4c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007e50:	e7e0      	b.n	8007e14 <_strtod_l+0xb34>
 8007e52:	a30d      	add	r3, pc, #52	@ (adr r3, 8007e88 <_strtod_l+0xba8>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fdba 	bl	80009d0 <__aeabi_dcmplt>
 8007e5c:	e79e      	b.n	8007d9c <_strtod_l+0xabc>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e64:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	f7ff ba77 	b.w	800735a <_strtod_l+0x7a>
 8007e6c:	2a65      	cmp	r2, #101	@ 0x65
 8007e6e:	f43f ab6e 	beq.w	800754e <_strtod_l+0x26e>
 8007e72:	2a45      	cmp	r2, #69	@ 0x45
 8007e74:	f43f ab6b 	beq.w	800754e <_strtod_l+0x26e>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f7ff bba6 	b.w	80075ca <_strtod_l+0x2ea>
 8007e7e:	bf00      	nop
 8007e80:	ffc00000 	.word	0xffc00000
 8007e84:	41dfffff 	.word	0x41dfffff
 8007e88:	94a03595 	.word	0x94a03595
 8007e8c:	3fcfffff 	.word	0x3fcfffff

08007e90 <_strtod_r>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	@ (8007e98 <_strtod_r+0x8>)
 8007e92:	f7ff ba25 	b.w	80072e0 <_strtod_l>
 8007e96:	bf00      	nop
 8007e98:	20000088 	.word	0x20000088

08007e9c <_strtol_l.constprop.0>:
 8007e9c:	2b24      	cmp	r3, #36	@ 0x24
 8007e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea2:	4686      	mov	lr, r0
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	d801      	bhi.n	8007eac <_strtol_l.constprop.0+0x10>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d106      	bne.n	8007eba <_strtol_l.constprop.0+0x1e>
 8007eac:	f7fd fdc0 	bl	8005a30 <__errno>
 8007eb0:	2316      	movs	r3, #22
 8007eb2:	6003      	str	r3, [r0, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	460d      	mov	r5, r1
 8007ebc:	4833      	ldr	r0, [pc, #204]	@ (8007f8c <_strtol_l.constprop.0+0xf0>)
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec4:	5d06      	ldrb	r6, [r0, r4]
 8007ec6:	f016 0608 	ands.w	r6, r6, #8
 8007eca:	d1f8      	bne.n	8007ebe <_strtol_l.constprop.0+0x22>
 8007ecc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ece:	d12d      	bne.n	8007f2c <_strtol_l.constprop.0+0x90>
 8007ed0:	2601      	movs	r6, #1
 8007ed2:	782c      	ldrb	r4, [r5, #0]
 8007ed4:	1c95      	adds	r5, r2, #2
 8007ed6:	f033 0210 	bics.w	r2, r3, #16
 8007eda:	d109      	bne.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007edc:	2c30      	cmp	r4, #48	@ 0x30
 8007ede:	d12a      	bne.n	8007f36 <_strtol_l.constprop.0+0x9a>
 8007ee0:	782a      	ldrb	r2, [r5, #0]
 8007ee2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ee6:	2a58      	cmp	r2, #88	@ 0x58
 8007ee8:	d125      	bne.n	8007f36 <_strtol_l.constprop.0+0x9a>
 8007eea:	2310      	movs	r3, #16
 8007eec:	786c      	ldrb	r4, [r5, #1]
 8007eee:	3502      	adds	r5, #2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ef6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007efa:	fbbc f9f3 	udiv	r9, ip, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f08:	2f09      	cmp	r7, #9
 8007f0a:	d81b      	bhi.n	8007f44 <_strtol_l.constprop.0+0xa8>
 8007f0c:	463c      	mov	r4, r7
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	dd27      	ble.n	8007f62 <_strtol_l.constprop.0+0xc6>
 8007f12:	1c57      	adds	r7, r2, #1
 8007f14:	d007      	beq.n	8007f26 <_strtol_l.constprop.0+0x8a>
 8007f16:	4581      	cmp	r9, r0
 8007f18:	d320      	bcc.n	8007f5c <_strtol_l.constprop.0+0xc0>
 8007f1a:	d101      	bne.n	8007f20 <_strtol_l.constprop.0+0x84>
 8007f1c:	45a2      	cmp	sl, r4
 8007f1e:	db1d      	blt.n	8007f5c <_strtol_l.constprop.0+0xc0>
 8007f20:	2201      	movs	r2, #1
 8007f22:	fb00 4003 	mla	r0, r0, r3, r4
 8007f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2a:	e7eb      	b.n	8007f04 <_strtol_l.constprop.0+0x68>
 8007f2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f2e:	bf04      	itt	eq
 8007f30:	782c      	ldrbeq	r4, [r5, #0]
 8007f32:	1c95      	addeq	r5, r2, #2
 8007f34:	e7cf      	b.n	8007ed6 <_strtol_l.constprop.0+0x3a>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1da      	bne.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007f3a:	2c30      	cmp	r4, #48	@ 0x30
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2308      	moveq	r3, #8
 8007f40:	230a      	movne	r3, #10
 8007f42:	e7d5      	b.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007f44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f48:	2f19      	cmp	r7, #25
 8007f4a:	d801      	bhi.n	8007f50 <_strtol_l.constprop.0+0xb4>
 8007f4c:	3c37      	subs	r4, #55	@ 0x37
 8007f4e:	e7de      	b.n	8007f0e <_strtol_l.constprop.0+0x72>
 8007f50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f54:	2f19      	cmp	r7, #25
 8007f56:	d804      	bhi.n	8007f62 <_strtol_l.constprop.0+0xc6>
 8007f58:	3c57      	subs	r4, #87	@ 0x57
 8007f5a:	e7d8      	b.n	8007f0e <_strtol_l.constprop.0+0x72>
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	e7e1      	b.n	8007f26 <_strtol_l.constprop.0+0x8a>
 8007f62:	1c53      	adds	r3, r2, #1
 8007f64:	d108      	bne.n	8007f78 <_strtol_l.constprop.0+0xdc>
 8007f66:	2322      	movs	r3, #34	@ 0x22
 8007f68:	4660      	mov	r0, ip
 8007f6a:	f8ce 3000 	str.w	r3, [lr]
 8007f6e:	f1b8 0f00 	cmp.w	r8, #0
 8007f72:	d0a0      	beq.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f74:	1e69      	subs	r1, r5, #1
 8007f76:	e006      	b.n	8007f86 <_strtol_l.constprop.0+0xea>
 8007f78:	b106      	cbz	r6, 8007f7c <_strtol_l.constprop.0+0xe0>
 8007f7a:	4240      	negs	r0, r0
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	d099      	beq.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d1f6      	bne.n	8007f74 <_strtol_l.constprop.0+0xd8>
 8007f86:	f8c8 1000 	str.w	r1, [r8]
 8007f8a:	e794      	b.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f8c:	08009f79 	.word	0x08009f79

08007f90 <_strtol_r>:
 8007f90:	f7ff bf84 	b.w	8007e9c <_strtol_l.constprop.0>

08007f94 <__ssputs_r>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	461f      	mov	r7, r3
 8007f9a:	688e      	ldr	r6, [r1, #8]
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	42be      	cmp	r6, r7
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	4690      	mov	r8, r2
 8007fa4:	680b      	ldr	r3, [r1, #0]
 8007fa6:	d82d      	bhi.n	8008004 <__ssputs_r+0x70>
 8007fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fb0:	d026      	beq.n	8008000 <__ssputs_r+0x6c>
 8007fb2:	6965      	ldr	r5, [r4, #20]
 8007fb4:	6909      	ldr	r1, [r1, #16]
 8007fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fba:	eba3 0901 	sub.w	r9, r3, r1
 8007fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fc2:	1c7b      	adds	r3, r7, #1
 8007fc4:	444b      	add	r3, r9
 8007fc6:	106d      	asrs	r5, r5, #1
 8007fc8:	429d      	cmp	r5, r3
 8007fca:	bf38      	it	cc
 8007fcc:	461d      	movcc	r5, r3
 8007fce:	0553      	lsls	r3, r2, #21
 8007fd0:	d527      	bpl.n	8008022 <__ssputs_r+0x8e>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7fe fc2e 	bl	8006834 <_malloc_r>
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b360      	cbz	r0, 8008036 <__ssputs_r+0xa2>
 8007fdc:	464a      	mov	r2, r9
 8007fde:	6921      	ldr	r1, [r4, #16]
 8007fe0:	f000 fd9c 	bl	8008b1c <memcpy>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	6126      	str	r6, [r4, #16]
 8007ff2:	444e      	add	r6, r9
 8007ff4:	6026      	str	r6, [r4, #0]
 8007ff6:	463e      	mov	r6, r7
 8007ff8:	6165      	str	r5, [r4, #20]
 8007ffa:	eba5 0509 	sub.w	r5, r5, r9
 8007ffe:	60a5      	str	r5, [r4, #8]
 8008000:	42be      	cmp	r6, r7
 8008002:	d900      	bls.n	8008006 <__ssputs_r+0x72>
 8008004:	463e      	mov	r6, r7
 8008006:	4632      	mov	r2, r6
 8008008:	4641      	mov	r1, r8
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	f000 fd49 	bl	8008aa2 <memmove>
 8008010:	2000      	movs	r0, #0
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	1b9b      	subs	r3, r3, r6
 8008016:	60a3      	str	r3, [r4, #8]
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	4433      	add	r3, r6
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	462a      	mov	r2, r5
 8008024:	f001 f90b 	bl	800923e <_realloc_r>
 8008028:	4606      	mov	r6, r0
 800802a:	2800      	cmp	r0, #0
 800802c:	d1e0      	bne.n	8007ff0 <__ssputs_r+0x5c>
 800802e:	4650      	mov	r0, sl
 8008030:	6921      	ldr	r1, [r4, #16]
 8008032:	f7fe fb8d 	bl	8006750 <_free_r>
 8008036:	230c      	movs	r3, #12
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f04f 30ff 	mov.w	r0, #4294967295
 8008042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	e7e9      	b.n	800801e <__ssputs_r+0x8a>
	...

0800804c <_svfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	4698      	mov	r8, r3
 8008052:	898b      	ldrh	r3, [r1, #12]
 8008054:	4607      	mov	r7, r0
 8008056:	061b      	lsls	r3, r3, #24
 8008058:	460d      	mov	r5, r1
 800805a:	4614      	mov	r4, r2
 800805c:	b09d      	sub	sp, #116	@ 0x74
 800805e:	d510      	bpl.n	8008082 <_svfiprintf_r+0x36>
 8008060:	690b      	ldr	r3, [r1, #16]
 8008062:	b973      	cbnz	r3, 8008082 <_svfiprintf_r+0x36>
 8008064:	2140      	movs	r1, #64	@ 0x40
 8008066:	f7fe fbe5 	bl	8006834 <_malloc_r>
 800806a:	6028      	str	r0, [r5, #0]
 800806c:	6128      	str	r0, [r5, #16]
 800806e:	b930      	cbnz	r0, 800807e <_svfiprintf_r+0x32>
 8008070:	230c      	movs	r3, #12
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	b01d      	add	sp, #116	@ 0x74
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807e:	2340      	movs	r3, #64	@ 0x40
 8008080:	616b      	str	r3, [r5, #20]
 8008082:	2300      	movs	r3, #0
 8008084:	9309      	str	r3, [sp, #36]	@ 0x24
 8008086:	2320      	movs	r3, #32
 8008088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800808c:	2330      	movs	r3, #48	@ 0x30
 800808e:	f04f 0901 	mov.w	r9, #1
 8008092:	f8cd 800c 	str.w	r8, [sp, #12]
 8008096:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008230 <_svfiprintf_r+0x1e4>
 800809a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800809e:	4623      	mov	r3, r4
 80080a0:	469a      	mov	sl, r3
 80080a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a6:	b10a      	cbz	r2, 80080ac <_svfiprintf_r+0x60>
 80080a8:	2a25      	cmp	r2, #37	@ 0x25
 80080aa:	d1f9      	bne.n	80080a0 <_svfiprintf_r+0x54>
 80080ac:	ebba 0b04 	subs.w	fp, sl, r4
 80080b0:	d00b      	beq.n	80080ca <_svfiprintf_r+0x7e>
 80080b2:	465b      	mov	r3, fp
 80080b4:	4622      	mov	r2, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff ff6b 	bl	8007f94 <__ssputs_r>
 80080be:	3001      	adds	r0, #1
 80080c0:	f000 80a7 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c6:	445a      	add	r2, fp
 80080c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ca:	f89a 3000 	ldrb.w	r3, [sl]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 809f 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f04f 32ff 	mov.w	r2, #4294967295
 80080da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080de:	f10a 0a01 	add.w	sl, sl, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	9307      	str	r3, [sp, #28]
 80080e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ec:	4654      	mov	r4, sl
 80080ee:	2205      	movs	r2, #5
 80080f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f4:	484e      	ldr	r0, [pc, #312]	@ (8008230 <_svfiprintf_r+0x1e4>)
 80080f6:	f7fd fcc8 	bl	8005a8a <memchr>
 80080fa:	9a04      	ldr	r2, [sp, #16]
 80080fc:	b9d8      	cbnz	r0, 8008136 <_svfiprintf_r+0xea>
 80080fe:	06d0      	lsls	r0, r2, #27
 8008100:	bf44      	itt	mi
 8008102:	2320      	movmi	r3, #32
 8008104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008108:	0711      	lsls	r1, r2, #28
 800810a:	bf44      	itt	mi
 800810c:	232b      	movmi	r3, #43	@ 0x2b
 800810e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008112:	f89a 3000 	ldrb.w	r3, [sl]
 8008116:	2b2a      	cmp	r3, #42	@ 0x2a
 8008118:	d015      	beq.n	8008146 <_svfiprintf_r+0xfa>
 800811a:	4654      	mov	r4, sl
 800811c:	2000      	movs	r0, #0
 800811e:	f04f 0c0a 	mov.w	ip, #10
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4621      	mov	r1, r4
 8008126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800812a:	3b30      	subs	r3, #48	@ 0x30
 800812c:	2b09      	cmp	r3, #9
 800812e:	d94b      	bls.n	80081c8 <_svfiprintf_r+0x17c>
 8008130:	b1b0      	cbz	r0, 8008160 <_svfiprintf_r+0x114>
 8008132:	9207      	str	r2, [sp, #28]
 8008134:	e014      	b.n	8008160 <_svfiprintf_r+0x114>
 8008136:	eba0 0308 	sub.w	r3, r0, r8
 800813a:	fa09 f303 	lsl.w	r3, r9, r3
 800813e:	4313      	orrs	r3, r2
 8008140:	46a2      	mov	sl, r4
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	e7d2      	b.n	80080ec <_svfiprintf_r+0xa0>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfbb      	ittet	lt
 8008152:	425b      	neglt	r3, r3
 8008154:	f042 0202 	orrlt.w	r2, r2, #2
 8008158:	9307      	strge	r3, [sp, #28]
 800815a:	9307      	strlt	r3, [sp, #28]
 800815c:	bfb8      	it	lt
 800815e:	9204      	strlt	r2, [sp, #16]
 8008160:	7823      	ldrb	r3, [r4, #0]
 8008162:	2b2e      	cmp	r3, #46	@ 0x2e
 8008164:	d10a      	bne.n	800817c <_svfiprintf_r+0x130>
 8008166:	7863      	ldrb	r3, [r4, #1]
 8008168:	2b2a      	cmp	r3, #42	@ 0x2a
 800816a:	d132      	bne.n	80081d2 <_svfiprintf_r+0x186>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	3402      	adds	r4, #2
 8008170:	1d1a      	adds	r2, r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	9203      	str	r2, [sp, #12]
 8008176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008234 <_svfiprintf_r+0x1e8>
 8008180:	2203      	movs	r2, #3
 8008182:	4650      	mov	r0, sl
 8008184:	7821      	ldrb	r1, [r4, #0]
 8008186:	f7fd fc80 	bl	8005a8a <memchr>
 800818a:	b138      	cbz	r0, 800819c <_svfiprintf_r+0x150>
 800818c:	2240      	movs	r2, #64	@ 0x40
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	eba0 000a 	sub.w	r0, r0, sl
 8008194:	4082      	lsls	r2, r0
 8008196:	4313      	orrs	r3, r2
 8008198:	3401      	adds	r4, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a0:	2206      	movs	r2, #6
 80081a2:	4825      	ldr	r0, [pc, #148]	@ (8008238 <_svfiprintf_r+0x1ec>)
 80081a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081a8:	f7fd fc6f 	bl	8005a8a <memchr>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d036      	beq.n	800821e <_svfiprintf_r+0x1d2>
 80081b0:	4b22      	ldr	r3, [pc, #136]	@ (800823c <_svfiprintf_r+0x1f0>)
 80081b2:	bb1b      	cbnz	r3, 80081fc <_svfiprintf_r+0x1b0>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	3307      	adds	r3, #7
 80081b8:	f023 0307 	bic.w	r3, r3, #7
 80081bc:	3308      	adds	r3, #8
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	4433      	add	r3, r6
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	e76a      	b.n	800809e <_svfiprintf_r+0x52>
 80081c8:	460c      	mov	r4, r1
 80081ca:	2001      	movs	r0, #1
 80081cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d0:	e7a8      	b.n	8008124 <_svfiprintf_r+0xd8>
 80081d2:	2300      	movs	r3, #0
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	4619      	mov	r1, r3
 80081da:	3401      	adds	r4, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	4620      	mov	r0, r4
 80081e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e4:	3a30      	subs	r2, #48	@ 0x30
 80081e6:	2a09      	cmp	r2, #9
 80081e8:	d903      	bls.n	80081f2 <_svfiprintf_r+0x1a6>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0c6      	beq.n	800817c <_svfiprintf_r+0x130>
 80081ee:	9105      	str	r1, [sp, #20]
 80081f0:	e7c4      	b.n	800817c <_svfiprintf_r+0x130>
 80081f2:	4604      	mov	r4, r0
 80081f4:	2301      	movs	r3, #1
 80081f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fa:	e7f0      	b.n	80081de <_svfiprintf_r+0x192>
 80081fc:	ab03      	add	r3, sp, #12
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	462a      	mov	r2, r5
 8008202:	4638      	mov	r0, r7
 8008204:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <_svfiprintf_r+0x1f4>)
 8008206:	a904      	add	r1, sp, #16
 8008208:	f7fc fc6c 	bl	8004ae4 <_printf_float>
 800820c:	1c42      	adds	r2, r0, #1
 800820e:	4606      	mov	r6, r0
 8008210:	d1d6      	bne.n	80081c0 <_svfiprintf_r+0x174>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	065b      	lsls	r3, r3, #25
 8008216:	f53f af2d 	bmi.w	8008074 <_svfiprintf_r+0x28>
 800821a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800821c:	e72c      	b.n	8008078 <_svfiprintf_r+0x2c>
 800821e:	ab03      	add	r3, sp, #12
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	462a      	mov	r2, r5
 8008224:	4638      	mov	r0, r7
 8008226:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <_svfiprintf_r+0x1f4>)
 8008228:	a904      	add	r1, sp, #16
 800822a:	f7fc fef9 	bl	8005020 <_printf_i>
 800822e:	e7ed      	b.n	800820c <_svfiprintf_r+0x1c0>
 8008230:	0800a079 	.word	0x0800a079
 8008234:	0800a07f 	.word	0x0800a07f
 8008238:	0800a083 	.word	0x0800a083
 800823c:	08004ae5 	.word	0x08004ae5
 8008240:	08007f95 	.word	0x08007f95

08008244 <_sungetc_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	1c4b      	adds	r3, r1, #1
 8008248:	4614      	mov	r4, r2
 800824a:	d103      	bne.n	8008254 <_sungetc_r+0x10>
 800824c:	f04f 35ff 	mov.w	r5, #4294967295
 8008250:	4628      	mov	r0, r5
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	8993      	ldrh	r3, [r2, #12]
 8008256:	b2cd      	uxtb	r5, r1
 8008258:	f023 0320 	bic.w	r3, r3, #32
 800825c:	8193      	strh	r3, [r2, #12]
 800825e:	6853      	ldr	r3, [r2, #4]
 8008260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008262:	b18a      	cbz	r2, 8008288 <_sungetc_r+0x44>
 8008264:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008266:	429a      	cmp	r2, r3
 8008268:	dd08      	ble.n	800827c <_sungetc_r+0x38>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	6022      	str	r2, [r4, #0]
 8008270:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	3301      	adds	r3, #1
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	e7e9      	b.n	8008250 <_sungetc_r+0xc>
 800827c:	4621      	mov	r1, r4
 800827e:	f000 fbd8 	bl	8008a32 <__submore>
 8008282:	2800      	cmp	r0, #0
 8008284:	d0f1      	beq.n	800826a <_sungetc_r+0x26>
 8008286:	e7e1      	b.n	800824c <_sungetc_r+0x8>
 8008288:	6921      	ldr	r1, [r4, #16]
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	b141      	cbz	r1, 80082a0 <_sungetc_r+0x5c>
 800828e:	4291      	cmp	r1, r2
 8008290:	d206      	bcs.n	80082a0 <_sungetc_r+0x5c>
 8008292:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008296:	42a9      	cmp	r1, r5
 8008298:	d102      	bne.n	80082a0 <_sungetc_r+0x5c>
 800829a:	3a01      	subs	r2, #1
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	e7ea      	b.n	8008276 <_sungetc_r+0x32>
 80082a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80082a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082aa:	2303      	movs	r3, #3
 80082ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80082ae:	4623      	mov	r3, r4
 80082b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	2301      	movs	r3, #1
 80082b8:	e7de      	b.n	8008278 <_sungetc_r+0x34>

080082ba <__ssrefill_r>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80082c0:	b169      	cbz	r1, 80082de <__ssrefill_r+0x24>
 80082c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082c6:	4299      	cmp	r1, r3
 80082c8:	d001      	beq.n	80082ce <__ssrefill_r+0x14>
 80082ca:	f7fe fa41 	bl	8006750 <_free_r>
 80082ce:	2000      	movs	r0, #0
 80082d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	b113      	cbz	r3, 80082de <__ssrefill_r+0x24>
 80082d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	2300      	movs	r3, #0
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	f043 0320 	orr.w	r3, r3, #32
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	e7f3      	b.n	80082dc <__ssrefill_r+0x22>

080082f4 <__ssvfiscanf_r>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	2100      	movs	r1, #0
 80082fc:	4606      	mov	r6, r0
 80082fe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008302:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008306:	49aa      	ldr	r1, [pc, #680]	@ (80085b0 <__ssvfiscanf_r+0x2bc>)
 8008308:	f10d 0804 	add.w	r8, sp, #4
 800830c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800830e:	49a9      	ldr	r1, [pc, #676]	@ (80085b4 <__ssvfiscanf_r+0x2c0>)
 8008310:	4fa9      	ldr	r7, [pc, #676]	@ (80085b8 <__ssvfiscanf_r+0x2c4>)
 8008312:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008316:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	7813      	ldrb	r3, [r2, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8159 	beq.w	80085d4 <__ssvfiscanf_r+0x2e0>
 8008322:	5cf9      	ldrb	r1, [r7, r3]
 8008324:	1c55      	adds	r5, r2, #1
 8008326:	f011 0108 	ands.w	r1, r1, #8
 800832a:	d019      	beq.n	8008360 <__ssvfiscanf_r+0x6c>
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dd0f      	ble.n	8008352 <__ssvfiscanf_r+0x5e>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	5cba      	ldrb	r2, [r7, r2]
 8008338:	0712      	lsls	r2, r2, #28
 800833a:	d401      	bmi.n	8008340 <__ssvfiscanf_r+0x4c>
 800833c:	462a      	mov	r2, r5
 800833e:	e7ec      	b.n	800831a <__ssvfiscanf_r+0x26>
 8008340:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008342:	3301      	adds	r3, #1
 8008344:	3201      	adds	r2, #1
 8008346:	9245      	str	r2, [sp, #276]	@ 0x114
 8008348:	6862      	ldr	r2, [r4, #4]
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	3a01      	subs	r2, #1
 800834e:	6062      	str	r2, [r4, #4]
 8008350:	e7ec      	b.n	800832c <__ssvfiscanf_r+0x38>
 8008352:	4621      	mov	r1, r4
 8008354:	4630      	mov	r0, r6
 8008356:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008358:	4798      	blx	r3
 800835a:	2800      	cmp	r0, #0
 800835c:	d0e9      	beq.n	8008332 <__ssvfiscanf_r+0x3e>
 800835e:	e7ed      	b.n	800833c <__ssvfiscanf_r+0x48>
 8008360:	2b25      	cmp	r3, #37	@ 0x25
 8008362:	d012      	beq.n	800838a <__ssvfiscanf_r+0x96>
 8008364:	4699      	mov	r9, r3
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f340 8094 	ble.w	8008496 <__ssvfiscanf_r+0x1a2>
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	7813      	ldrb	r3, [r2, #0]
 8008372:	454b      	cmp	r3, r9
 8008374:	f040 812e 	bne.w	80085d4 <__ssvfiscanf_r+0x2e0>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	3201      	adds	r2, #1
 800837c:	3b01      	subs	r3, #1
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	3301      	adds	r3, #1
 8008386:	9345      	str	r3, [sp, #276]	@ 0x114
 8008388:	e7d8      	b.n	800833c <__ssvfiscanf_r+0x48>
 800838a:	9141      	str	r1, [sp, #260]	@ 0x104
 800838c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800838e:	7853      	ldrb	r3, [r2, #1]
 8008390:	2b2a      	cmp	r3, #42	@ 0x2a
 8008392:	bf04      	itt	eq
 8008394:	2310      	moveq	r3, #16
 8008396:	1c95      	addeq	r5, r2, #2
 8008398:	f04f 020a 	mov.w	r2, #10
 800839c:	bf08      	it	eq
 800839e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80083a0:	46a9      	mov	r9, r5
 80083a2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80083a6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d91e      	bls.n	80083ec <__ssvfiscanf_r+0xf8>
 80083ae:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80085bc <__ssvfiscanf_r+0x2c8>
 80083b2:	2203      	movs	r2, #3
 80083b4:	4650      	mov	r0, sl
 80083b6:	f7fd fb68 	bl	8005a8a <memchr>
 80083ba:	b138      	cbz	r0, 80083cc <__ssvfiscanf_r+0xd8>
 80083bc:	2301      	movs	r3, #1
 80083be:	464d      	mov	r5, r9
 80083c0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80083c2:	eba0 000a 	sub.w	r0, r0, sl
 80083c6:	4083      	lsls	r3, r0
 80083c8:	4313      	orrs	r3, r2
 80083ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80083cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083d0:	2b78      	cmp	r3, #120	@ 0x78
 80083d2:	d806      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 80083d4:	2b57      	cmp	r3, #87	@ 0x57
 80083d6:	d810      	bhi.n	80083fa <__ssvfiscanf_r+0x106>
 80083d8:	2b25      	cmp	r3, #37	@ 0x25
 80083da:	d0c3      	beq.n	8008364 <__ssvfiscanf_r+0x70>
 80083dc:	d856      	bhi.n	800848c <__ssvfiscanf_r+0x198>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d064      	beq.n	80084ac <__ssvfiscanf_r+0x1b8>
 80083e2:	2303      	movs	r3, #3
 80083e4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80083e6:	230a      	movs	r3, #10
 80083e8:	9342      	str	r3, [sp, #264]	@ 0x108
 80083ea:	e077      	b.n	80084dc <__ssvfiscanf_r+0x1e8>
 80083ec:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80083ee:	464d      	mov	r5, r9
 80083f0:	fb02 1103 	mla	r1, r2, r3, r1
 80083f4:	3930      	subs	r1, #48	@ 0x30
 80083f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80083f8:	e7d2      	b.n	80083a0 <__ssvfiscanf_r+0xac>
 80083fa:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80083fe:	2a20      	cmp	r2, #32
 8008400:	d8ef      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 8008402:	a101      	add	r1, pc, #4	@ (adr r1, 8008408 <__ssvfiscanf_r+0x114>)
 8008404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008408:	080084bb 	.word	0x080084bb
 800840c:	080083e3 	.word	0x080083e3
 8008410:	080083e3 	.word	0x080083e3
 8008414:	08008515 	.word	0x08008515
 8008418:	080083e3 	.word	0x080083e3
 800841c:	080083e3 	.word	0x080083e3
 8008420:	080083e3 	.word	0x080083e3
 8008424:	080083e3 	.word	0x080083e3
 8008428:	080083e3 	.word	0x080083e3
 800842c:	080083e3 	.word	0x080083e3
 8008430:	080083e3 	.word	0x080083e3
 8008434:	0800852b 	.word	0x0800852b
 8008438:	08008511 	.word	0x08008511
 800843c:	08008493 	.word	0x08008493
 8008440:	08008493 	.word	0x08008493
 8008444:	08008493 	.word	0x08008493
 8008448:	080083e3 	.word	0x080083e3
 800844c:	080084cd 	.word	0x080084cd
 8008450:	080083e3 	.word	0x080083e3
 8008454:	080083e3 	.word	0x080083e3
 8008458:	080083e3 	.word	0x080083e3
 800845c:	080083e3 	.word	0x080083e3
 8008460:	0800853b 	.word	0x0800853b
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084b3 	.word	0x080084b3
 800846c:	080083e3 	.word	0x080083e3
 8008470:	080083e3 	.word	0x080083e3
 8008474:	08008537 	.word	0x08008537
 8008478:	080083e3 	.word	0x080083e3
 800847c:	08008511 	.word	0x08008511
 8008480:	080083e3 	.word	0x080083e3
 8008484:	080083e3 	.word	0x080083e3
 8008488:	080084bb 	.word	0x080084bb
 800848c:	3b45      	subs	r3, #69	@ 0x45
 800848e:	2b02      	cmp	r3, #2
 8008490:	d8a7      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 8008492:	2305      	movs	r3, #5
 8008494:	e021      	b.n	80084da <__ssvfiscanf_r+0x1e6>
 8008496:	4621      	mov	r1, r4
 8008498:	4630      	mov	r0, r6
 800849a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800849c:	4798      	blx	r3
 800849e:	2800      	cmp	r0, #0
 80084a0:	f43f af65 	beq.w	800836e <__ssvfiscanf_r+0x7a>
 80084a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f040 808c 	bne.w	80085c4 <__ssvfiscanf_r+0x2d0>
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	e08c      	b.n	80085cc <__ssvfiscanf_r+0x2d8>
 80084b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80084b4:	f042 0220 	orr.w	r2, r2, #32
 80084b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80084ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80084bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80084c2:	2210      	movs	r2, #16
 80084c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80084c6:	9242      	str	r2, [sp, #264]	@ 0x108
 80084c8:	d902      	bls.n	80084d0 <__ssvfiscanf_r+0x1dc>
 80084ca:	e005      	b.n	80084d8 <__ssvfiscanf_r+0x1e4>
 80084cc:	2300      	movs	r3, #0
 80084ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80084d0:	2303      	movs	r3, #3
 80084d2:	e002      	b.n	80084da <__ssvfiscanf_r+0x1e6>
 80084d4:	2308      	movs	r3, #8
 80084d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80084d8:	2304      	movs	r3, #4
 80084da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd39      	ble.n	8008556 <__ssvfiscanf_r+0x262>
 80084e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80084e4:	0659      	lsls	r1, r3, #25
 80084e6:	d404      	bmi.n	80084f2 <__ssvfiscanf_r+0x1fe>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	5cba      	ldrb	r2, [r7, r2]
 80084ee:	0712      	lsls	r2, r2, #28
 80084f0:	d438      	bmi.n	8008564 <__ssvfiscanf_r+0x270>
 80084f2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	dc47      	bgt.n	8008588 <__ssvfiscanf_r+0x294>
 80084f8:	466b      	mov	r3, sp
 80084fa:	4622      	mov	r2, r4
 80084fc:	4630      	mov	r0, r6
 80084fe:	a941      	add	r1, sp, #260	@ 0x104
 8008500:	f000 f86a 	bl	80085d8 <_scanf_chars>
 8008504:	2801      	cmp	r0, #1
 8008506:	d065      	beq.n	80085d4 <__ssvfiscanf_r+0x2e0>
 8008508:	2802      	cmp	r0, #2
 800850a:	f47f af17 	bne.w	800833c <__ssvfiscanf_r+0x48>
 800850e:	e7c9      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 8008510:	220a      	movs	r2, #10
 8008512:	e7d7      	b.n	80084c4 <__ssvfiscanf_r+0x1d0>
 8008514:	4629      	mov	r1, r5
 8008516:	4640      	mov	r0, r8
 8008518:	f000 fa52 	bl	80089c0 <__sccl>
 800851c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800851e:	4605      	mov	r5, r0
 8008520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008524:	9341      	str	r3, [sp, #260]	@ 0x104
 8008526:	2301      	movs	r3, #1
 8008528:	e7d7      	b.n	80084da <__ssvfiscanf_r+0x1e6>
 800852a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800852c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008530:	9341      	str	r3, [sp, #260]	@ 0x104
 8008532:	2300      	movs	r3, #0
 8008534:	e7d1      	b.n	80084da <__ssvfiscanf_r+0x1e6>
 8008536:	2302      	movs	r3, #2
 8008538:	e7cf      	b.n	80084da <__ssvfiscanf_r+0x1e6>
 800853a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800853c:	06c3      	lsls	r3, r0, #27
 800853e:	f53f aefd 	bmi.w	800833c <__ssvfiscanf_r+0x48>
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008546:	1d19      	adds	r1, r3, #4
 8008548:	9100      	str	r1, [sp, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	07c0      	lsls	r0, r0, #31
 800854e:	bf4c      	ite	mi
 8008550:	801a      	strhmi	r2, [r3, #0]
 8008552:	601a      	strpl	r2, [r3, #0]
 8008554:	e6f2      	b.n	800833c <__ssvfiscanf_r+0x48>
 8008556:	4621      	mov	r1, r4
 8008558:	4630      	mov	r0, r6
 800855a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800855c:	4798      	blx	r3
 800855e:	2800      	cmp	r0, #0
 8008560:	d0bf      	beq.n	80084e2 <__ssvfiscanf_r+0x1ee>
 8008562:	e79f      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 8008564:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008566:	3201      	adds	r2, #1
 8008568:	9245      	str	r2, [sp, #276]	@ 0x114
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	3a01      	subs	r2, #1
 800856e:	2a00      	cmp	r2, #0
 8008570:	6062      	str	r2, [r4, #4]
 8008572:	dd02      	ble.n	800857a <__ssvfiscanf_r+0x286>
 8008574:	3301      	adds	r3, #1
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	e7b6      	b.n	80084e8 <__ssvfiscanf_r+0x1f4>
 800857a:	4621      	mov	r1, r4
 800857c:	4630      	mov	r0, r6
 800857e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008580:	4798      	blx	r3
 8008582:	2800      	cmp	r0, #0
 8008584:	d0b0      	beq.n	80084e8 <__ssvfiscanf_r+0x1f4>
 8008586:	e78d      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 8008588:	2b04      	cmp	r3, #4
 800858a:	dc06      	bgt.n	800859a <__ssvfiscanf_r+0x2a6>
 800858c:	466b      	mov	r3, sp
 800858e:	4622      	mov	r2, r4
 8008590:	4630      	mov	r0, r6
 8008592:	a941      	add	r1, sp, #260	@ 0x104
 8008594:	f000 f87a 	bl	800868c <_scanf_i>
 8008598:	e7b4      	b.n	8008504 <__ssvfiscanf_r+0x210>
 800859a:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <__ssvfiscanf_r+0x2cc>)
 800859c:	2b00      	cmp	r3, #0
 800859e:	f43f aecd 	beq.w	800833c <__ssvfiscanf_r+0x48>
 80085a2:	466b      	mov	r3, sp
 80085a4:	4622      	mov	r2, r4
 80085a6:	4630      	mov	r0, r6
 80085a8:	a941      	add	r1, sp, #260	@ 0x104
 80085aa:	f7fc fe59 	bl	8005260 <_scanf_float>
 80085ae:	e7a9      	b.n	8008504 <__ssvfiscanf_r+0x210>
 80085b0:	08008245 	.word	0x08008245
 80085b4:	080082bb 	.word	0x080082bb
 80085b8:	08009f79 	.word	0x08009f79
 80085bc:	0800a07f 	.word	0x0800a07f
 80085c0:	08005261 	.word	0x08005261
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	065b      	lsls	r3, r3, #25
 80085c8:	f53f af70 	bmi.w	80084ac <__ssvfiscanf_r+0x1b8>
 80085cc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80085d6:	e7f9      	b.n	80085cc <__ssvfiscanf_r+0x2d8>

080085d8 <_scanf_chars>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4615      	mov	r5, r2
 80085de:	688a      	ldr	r2, [r1, #8]
 80085e0:	4680      	mov	r8, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b932      	cbnz	r2, 80085f4 <_scanf_chars+0x1c>
 80085e6:	698a      	ldr	r2, [r1, #24]
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	bf14      	ite	ne
 80085ec:	f04f 32ff 	movne.w	r2, #4294967295
 80085f0:	2201      	moveq	r2, #1
 80085f2:	608a      	str	r2, [r1, #8]
 80085f4:	2700      	movs	r7, #0
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008688 <_scanf_chars+0xb0>
 80085fc:	06d1      	lsls	r1, r2, #27
 80085fe:	bf5f      	itttt	pl
 8008600:	681a      	ldrpl	r2, [r3, #0]
 8008602:	1d11      	addpl	r1, r2, #4
 8008604:	6019      	strpl	r1, [r3, #0]
 8008606:	6816      	ldrpl	r6, [r2, #0]
 8008608:	69a0      	ldr	r0, [r4, #24]
 800860a:	b188      	cbz	r0, 8008630 <_scanf_chars+0x58>
 800860c:	2801      	cmp	r0, #1
 800860e:	d107      	bne.n	8008620 <_scanf_chars+0x48>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	6963      	ldr	r3, [r4, #20]
 8008616:	5c9b      	ldrb	r3, [r3, r2]
 8008618:	b953      	cbnz	r3, 8008630 <_scanf_chars+0x58>
 800861a:	2f00      	cmp	r7, #0
 800861c:	d031      	beq.n	8008682 <_scanf_chars+0xaa>
 800861e:	e022      	b.n	8008666 <_scanf_chars+0x8e>
 8008620:	2802      	cmp	r0, #2
 8008622:	d120      	bne.n	8008666 <_scanf_chars+0x8e>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f819 3003 	ldrb.w	r3, [r9, r3]
 800862c:	071b      	lsls	r3, r3, #28
 800862e:	d41a      	bmi.n	8008666 <_scanf_chars+0x8e>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	3701      	adds	r7, #1
 8008634:	06da      	lsls	r2, r3, #27
 8008636:	bf5e      	ittt	pl
 8008638:	682b      	ldrpl	r3, [r5, #0]
 800863a:	781b      	ldrbpl	r3, [r3, #0]
 800863c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008640:	682a      	ldr	r2, [r5, #0]
 8008642:	686b      	ldr	r3, [r5, #4]
 8008644:	3201      	adds	r2, #1
 8008646:	602a      	str	r2, [r5, #0]
 8008648:	68a2      	ldr	r2, [r4, #8]
 800864a:	3b01      	subs	r3, #1
 800864c:	3a01      	subs	r2, #1
 800864e:	606b      	str	r3, [r5, #4]
 8008650:	60a2      	str	r2, [r4, #8]
 8008652:	b142      	cbz	r2, 8008666 <_scanf_chars+0x8e>
 8008654:	2b00      	cmp	r3, #0
 8008656:	dcd7      	bgt.n	8008608 <_scanf_chars+0x30>
 8008658:	4629      	mov	r1, r5
 800865a:	4640      	mov	r0, r8
 800865c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008660:	4798      	blx	r3
 8008662:	2800      	cmp	r0, #0
 8008664:	d0d0      	beq.n	8008608 <_scanf_chars+0x30>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	f013 0310 	ands.w	r3, r3, #16
 800866c:	d105      	bne.n	800867a <_scanf_chars+0xa2>
 800866e:	68e2      	ldr	r2, [r4, #12]
 8008670:	3201      	adds	r2, #1
 8008672:	60e2      	str	r2, [r4, #12]
 8008674:	69a2      	ldr	r2, [r4, #24]
 8008676:	b102      	cbz	r2, 800867a <_scanf_chars+0xa2>
 8008678:	7033      	strb	r3, [r6, #0]
 800867a:	2000      	movs	r0, #0
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	443b      	add	r3, r7
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008686:	bf00      	nop
 8008688:	08009f79 	.word	0x08009f79

0800868c <_scanf_i>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	4698      	mov	r8, r3
 8008694:	4b72      	ldr	r3, [pc, #456]	@ (8008860 <_scanf_i+0x1d4>)
 8008696:	b087      	sub	sp, #28
 8008698:	4682      	mov	sl, r0
 800869a:	4616      	mov	r6, r2
 800869c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80086a6:	4b6f      	ldr	r3, [pc, #444]	@ (8008864 <_scanf_i+0x1d8>)
 80086a8:	69a1      	ldr	r1, [r4, #24]
 80086aa:	4a6f      	ldr	r2, [pc, #444]	@ (8008868 <_scanf_i+0x1dc>)
 80086ac:	4627      	mov	r7, r4
 80086ae:	2903      	cmp	r1, #3
 80086b0:	bf08      	it	eq
 80086b2:	461a      	moveq	r2, r3
 80086b4:	68a3      	ldr	r3, [r4, #8]
 80086b6:	9201      	str	r2, [sp, #4]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80086be:	bf81      	itttt	hi
 80086c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80086c4:	eb03 0905 	addhi.w	r9, r3, r5
 80086c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086cc:	60a3      	strhi	r3, [r4, #8]
 80086ce:	f857 3b1c 	ldr.w	r3, [r7], #28
 80086d2:	bf98      	it	ls
 80086d4:	f04f 0900 	movls.w	r9, #0
 80086d8:	463d      	mov	r5, r7
 80086da:	f04f 0b00 	mov.w	fp, #0
 80086de:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	6831      	ldr	r1, [r6, #0]
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	2202      	movs	r2, #2
 80086ea:	7809      	ldrb	r1, [r1, #0]
 80086ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80086f0:	f7fd f9cb 	bl	8005a8a <memchr>
 80086f4:	b328      	cbz	r0, 8008742 <_scanf_i+0xb6>
 80086f6:	f1bb 0f01 	cmp.w	fp, #1
 80086fa:	d159      	bne.n	80087b0 <_scanf_i+0x124>
 80086fc:	6862      	ldr	r2, [r4, #4]
 80086fe:	b92a      	cbnz	r2, 800870c <_scanf_i+0x80>
 8008700:	2108      	movs	r1, #8
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	6061      	str	r1, [r4, #4]
 8008706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	68a2      	ldr	r2, [r4, #8]
 8008716:	1e51      	subs	r1, r2, #1
 8008718:	60a1      	str	r1, [r4, #8]
 800871a:	b192      	cbz	r2, 8008742 <_scanf_i+0xb6>
 800871c:	6832      	ldr	r2, [r6, #0]
 800871e:	1c51      	adds	r1, r2, #1
 8008720:	6031      	str	r1, [r6, #0]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	f805 2b01 	strb.w	r2, [r5], #1
 8008728:	6872      	ldr	r2, [r6, #4]
 800872a:	3a01      	subs	r2, #1
 800872c:	2a00      	cmp	r2, #0
 800872e:	6072      	str	r2, [r6, #4]
 8008730:	dc07      	bgt.n	8008742 <_scanf_i+0xb6>
 8008732:	4631      	mov	r1, r6
 8008734:	4650      	mov	r0, sl
 8008736:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800873a:	4790      	blx	r2
 800873c:	2800      	cmp	r0, #0
 800873e:	f040 8085 	bne.w	800884c <_scanf_i+0x1c0>
 8008742:	f10b 0b01 	add.w	fp, fp, #1
 8008746:	f1bb 0f03 	cmp.w	fp, #3
 800874a:	d1cb      	bne.n	80086e4 <_scanf_i+0x58>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	b90b      	cbnz	r3, 8008754 <_scanf_i+0xc8>
 8008750:	230a      	movs	r3, #10
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	4945      	ldr	r1, [pc, #276]	@ (800886c <_scanf_i+0x1e0>)
 8008758:	6960      	ldr	r0, [r4, #20]
 800875a:	1ac9      	subs	r1, r1, r3
 800875c:	f000 f930 	bl	80089c0 <__sccl>
 8008760:	f04f 0b00 	mov.w	fp, #0
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	6822      	ldr	r2, [r4, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d03d      	beq.n	80087e8 <_scanf_i+0x15c>
 800876c:	6831      	ldr	r1, [r6, #0]
 800876e:	6960      	ldr	r0, [r4, #20]
 8008770:	f891 c000 	ldrb.w	ip, [r1]
 8008774:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008778:	2800      	cmp	r0, #0
 800877a:	d035      	beq.n	80087e8 <_scanf_i+0x15c>
 800877c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008780:	d124      	bne.n	80087cc <_scanf_i+0x140>
 8008782:	0510      	lsls	r0, r2, #20
 8008784:	d522      	bpl.n	80087cc <_scanf_i+0x140>
 8008786:	f10b 0b01 	add.w	fp, fp, #1
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d003      	beq.n	8008798 <_scanf_i+0x10c>
 8008790:	3301      	adds	r3, #1
 8008792:	f109 39ff 	add.w	r9, r9, #4294967295
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	6873      	ldr	r3, [r6, #4]
 800879a:	3b01      	subs	r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	6073      	str	r3, [r6, #4]
 80087a0:	dd1b      	ble.n	80087da <_scanf_i+0x14e>
 80087a2:	6833      	ldr	r3, [r6, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	e7d9      	b.n	8008764 <_scanf_i+0xd8>
 80087b0:	f1bb 0f02 	cmp.w	fp, #2
 80087b4:	d1ae      	bne.n	8008714 <_scanf_i+0x88>
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80087bc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80087c0:	d1bf      	bne.n	8008742 <_scanf_i+0xb6>
 80087c2:	2110      	movs	r1, #16
 80087c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087c8:	6061      	str	r1, [r4, #4]
 80087ca:	e7a2      	b.n	8008712 <_scanf_i+0x86>
 80087cc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	780b      	ldrb	r3, [r1, #0]
 80087d4:	f805 3b01 	strb.w	r3, [r5], #1
 80087d8:	e7de      	b.n	8008798 <_scanf_i+0x10c>
 80087da:	4631      	mov	r1, r6
 80087dc:	4650      	mov	r0, sl
 80087de:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80087e2:	4798      	blx	r3
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d0df      	beq.n	80087a8 <_scanf_i+0x11c>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	05d9      	lsls	r1, r3, #23
 80087ec:	d50d      	bpl.n	800880a <_scanf_i+0x17e>
 80087ee:	42bd      	cmp	r5, r7
 80087f0:	d909      	bls.n	8008806 <_scanf_i+0x17a>
 80087f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80087f6:	4632      	mov	r2, r6
 80087f8:	4650      	mov	r0, sl
 80087fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8008802:	4798      	blx	r3
 8008804:	464d      	mov	r5, r9
 8008806:	42bd      	cmp	r5, r7
 8008808:	d028      	beq.n	800885c <_scanf_i+0x1d0>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	f012 0210 	ands.w	r2, r2, #16
 8008810:	d113      	bne.n	800883a <_scanf_i+0x1ae>
 8008812:	702a      	strb	r2, [r5, #0]
 8008814:	4639      	mov	r1, r7
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	4650      	mov	r0, sl
 800881a:	9e01      	ldr	r6, [sp, #4]
 800881c:	47b0      	blx	r6
 800881e:	f8d8 3000 	ldr.w	r3, [r8]
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	f8c8 2000 	str.w	r2, [r8]
 800882a:	f011 0f20 	tst.w	r1, #32
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	d00f      	beq.n	8008852 <_scanf_i+0x1c6>
 8008832:	6018      	str	r0, [r3, #0]
 8008834:	68e3      	ldr	r3, [r4, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60e3      	str	r3, [r4, #12]
 800883a:	2000      	movs	r0, #0
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	1bed      	subs	r5, r5, r7
 8008840:	445d      	add	r5, fp
 8008842:	442b      	add	r3, r5
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	b007      	add	sp, #28
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	f04f 0b00 	mov.w	fp, #0
 8008850:	e7ca      	b.n	80087e8 <_scanf_i+0x15c>
 8008852:	07ca      	lsls	r2, r1, #31
 8008854:	bf4c      	ite	mi
 8008856:	8018      	strhmi	r0, [r3, #0]
 8008858:	6018      	strpl	r0, [r3, #0]
 800885a:	e7eb      	b.n	8008834 <_scanf_i+0x1a8>
 800885c:	2001      	movs	r0, #1
 800885e:	e7f2      	b.n	8008846 <_scanf_i+0x1ba>
 8008860:	08009cd0 	.word	0x08009cd0
 8008864:	08007f91 	.word	0x08007f91
 8008868:	08009379 	.word	0x08009379
 800886c:	0800a09a 	.word	0x0800a09a

08008870 <__sflush_r>:
 8008870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	0716      	lsls	r6, r2, #28
 8008878:	4605      	mov	r5, r0
 800887a:	460c      	mov	r4, r1
 800887c:	d454      	bmi.n	8008928 <__sflush_r+0xb8>
 800887e:	684b      	ldr	r3, [r1, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc02      	bgt.n	800888a <__sflush_r+0x1a>
 8008884:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd48      	ble.n	800891c <__sflush_r+0xac>
 800888a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800888c:	2e00      	cmp	r6, #0
 800888e:	d045      	beq.n	800891c <__sflush_r+0xac>
 8008890:	2300      	movs	r3, #0
 8008892:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008896:	682f      	ldr	r7, [r5, #0]
 8008898:	6a21      	ldr	r1, [r4, #32]
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	d030      	beq.n	8008900 <__sflush_r+0x90>
 800889e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	0759      	lsls	r1, r3, #29
 80088a4:	d505      	bpl.n	80088b2 <__sflush_r+0x42>
 80088a6:	6863      	ldr	r3, [r4, #4]
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ac:	b10b      	cbz	r3, 80088b2 <__sflush_r+0x42>
 80088ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088b0:	1ad2      	subs	r2, r2, r3
 80088b2:	2300      	movs	r3, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b8:	6a21      	ldr	r1, [r4, #32]
 80088ba:	47b0      	blx	r6
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	d106      	bne.n	80088d0 <__sflush_r+0x60>
 80088c2:	6829      	ldr	r1, [r5, #0]
 80088c4:	291d      	cmp	r1, #29
 80088c6:	d82b      	bhi.n	8008920 <__sflush_r+0xb0>
 80088c8:	4a28      	ldr	r2, [pc, #160]	@ (800896c <__sflush_r+0xfc>)
 80088ca:	410a      	asrs	r2, r1
 80088cc:	07d6      	lsls	r6, r2, #31
 80088ce:	d427      	bmi.n	8008920 <__sflush_r+0xb0>
 80088d0:	2200      	movs	r2, #0
 80088d2:	6062      	str	r2, [r4, #4]
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	04d9      	lsls	r1, r3, #19
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	d504      	bpl.n	80088e6 <__sflush_r+0x76>
 80088dc:	1c42      	adds	r2, r0, #1
 80088de:	d101      	bne.n	80088e4 <__sflush_r+0x74>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b903      	cbnz	r3, 80088e6 <__sflush_r+0x76>
 80088e4:	6560      	str	r0, [r4, #84]	@ 0x54
 80088e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e8:	602f      	str	r7, [r5, #0]
 80088ea:	b1b9      	cbz	r1, 800891c <__sflush_r+0xac>
 80088ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088f0:	4299      	cmp	r1, r3
 80088f2:	d002      	beq.n	80088fa <__sflush_r+0x8a>
 80088f4:	4628      	mov	r0, r5
 80088f6:	f7fd ff2b 	bl	8006750 <_free_r>
 80088fa:	2300      	movs	r3, #0
 80088fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80088fe:	e00d      	b.n	800891c <__sflush_r+0xac>
 8008900:	2301      	movs	r3, #1
 8008902:	4628      	mov	r0, r5
 8008904:	47b0      	blx	r6
 8008906:	4602      	mov	r2, r0
 8008908:	1c50      	adds	r0, r2, #1
 800890a:	d1c9      	bne.n	80088a0 <__sflush_r+0x30>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0c6      	beq.n	80088a0 <__sflush_r+0x30>
 8008912:	2b1d      	cmp	r3, #29
 8008914:	d001      	beq.n	800891a <__sflush_r+0xaa>
 8008916:	2b16      	cmp	r3, #22
 8008918:	d11d      	bne.n	8008956 <__sflush_r+0xe6>
 800891a:	602f      	str	r7, [r5, #0]
 800891c:	2000      	movs	r0, #0
 800891e:	e021      	b.n	8008964 <__sflush_r+0xf4>
 8008920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008924:	b21b      	sxth	r3, r3
 8008926:	e01a      	b.n	800895e <__sflush_r+0xee>
 8008928:	690f      	ldr	r7, [r1, #16]
 800892a:	2f00      	cmp	r7, #0
 800892c:	d0f6      	beq.n	800891c <__sflush_r+0xac>
 800892e:	0793      	lsls	r3, r2, #30
 8008930:	bf18      	it	ne
 8008932:	2300      	movne	r3, #0
 8008934:	680e      	ldr	r6, [r1, #0]
 8008936:	bf08      	it	eq
 8008938:	694b      	ldreq	r3, [r1, #20]
 800893a:	1bf6      	subs	r6, r6, r7
 800893c:	600f      	str	r7, [r1, #0]
 800893e:	608b      	str	r3, [r1, #8]
 8008940:	2e00      	cmp	r6, #0
 8008942:	ddeb      	ble.n	800891c <__sflush_r+0xac>
 8008944:	4633      	mov	r3, r6
 8008946:	463a      	mov	r2, r7
 8008948:	4628      	mov	r0, r5
 800894a:	6a21      	ldr	r1, [r4, #32]
 800894c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008950:	47e0      	blx	ip
 8008952:	2800      	cmp	r0, #0
 8008954:	dc07      	bgt.n	8008966 <__sflush_r+0xf6>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008966:	4407      	add	r7, r0
 8008968:	1a36      	subs	r6, r6, r0
 800896a:	e7e9      	b.n	8008940 <__sflush_r+0xd0>
 800896c:	dfbffffe 	.word	0xdfbffffe

08008970 <_fflush_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b913      	cbnz	r3, 8008980 <_fflush_r+0x10>
 800897a:	2500      	movs	r5, #0
 800897c:	4628      	mov	r0, r5
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	b118      	cbz	r0, 800898a <_fflush_r+0x1a>
 8008982:	6a03      	ldr	r3, [r0, #32]
 8008984:	b90b      	cbnz	r3, 800898a <_fflush_r+0x1a>
 8008986:	f7fc ff07 	bl	8005798 <__sinit>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f3      	beq.n	800897a <_fflush_r+0xa>
 8008992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008994:	07d0      	lsls	r0, r2, #31
 8008996:	d404      	bmi.n	80089a2 <_fflush_r+0x32>
 8008998:	0599      	lsls	r1, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_fflush_r+0x32>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f7fd f872 	bl	8005a86 <__retarget_lock_acquire_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7ff ff63 	bl	8008870 <__sflush_r>
 80089aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ac:	4605      	mov	r5, r0
 80089ae:	07da      	lsls	r2, r3, #31
 80089b0:	d4e4      	bmi.n	800897c <_fflush_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	d4e1      	bmi.n	800897c <_fflush_r+0xc>
 80089b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ba:	f7fd f865 	bl	8005a88 <__retarget_lock_release_recursive>
 80089be:	e7dd      	b.n	800897c <_fflush_r+0xc>

080089c0 <__sccl>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	780b      	ldrb	r3, [r1, #0]
 80089c4:	4604      	mov	r4, r0
 80089c6:	2b5e      	cmp	r3, #94	@ 0x5e
 80089c8:	bf0b      	itete	eq
 80089ca:	784b      	ldrbeq	r3, [r1, #1]
 80089cc:	1c4a      	addne	r2, r1, #1
 80089ce:	1c8a      	addeq	r2, r1, #2
 80089d0:	2100      	movne	r1, #0
 80089d2:	bf08      	it	eq
 80089d4:	2101      	moveq	r1, #1
 80089d6:	3801      	subs	r0, #1
 80089d8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80089dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80089e0:	42a8      	cmp	r0, r5
 80089e2:	d1fb      	bne.n	80089dc <__sccl+0x1c>
 80089e4:	b90b      	cbnz	r3, 80089ea <__sccl+0x2a>
 80089e6:	1e50      	subs	r0, r2, #1
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	f081 0101 	eor.w	r1, r1, #1
 80089ee:	4610      	mov	r0, r2
 80089f0:	54e1      	strb	r1, [r4, r3]
 80089f2:	4602      	mov	r2, r0
 80089f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089f8:	2d2d      	cmp	r5, #45	@ 0x2d
 80089fa:	d005      	beq.n	8008a08 <__sccl+0x48>
 80089fc:	2d5d      	cmp	r5, #93	@ 0x5d
 80089fe:	d016      	beq.n	8008a2e <__sccl+0x6e>
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	d0f1      	beq.n	80089e8 <__sccl+0x28>
 8008a04:	462b      	mov	r3, r5
 8008a06:	e7f2      	b.n	80089ee <__sccl+0x2e>
 8008a08:	7846      	ldrb	r6, [r0, #1]
 8008a0a:	2e5d      	cmp	r6, #93	@ 0x5d
 8008a0c:	d0fa      	beq.n	8008a04 <__sccl+0x44>
 8008a0e:	42b3      	cmp	r3, r6
 8008a10:	dcf8      	bgt.n	8008a04 <__sccl+0x44>
 8008a12:	461a      	mov	r2, r3
 8008a14:	3002      	adds	r0, #2
 8008a16:	3201      	adds	r2, #1
 8008a18:	4296      	cmp	r6, r2
 8008a1a:	54a1      	strb	r1, [r4, r2]
 8008a1c:	dcfb      	bgt.n	8008a16 <__sccl+0x56>
 8008a1e:	1af2      	subs	r2, r6, r3
 8008a20:	3a01      	subs	r2, #1
 8008a22:	42b3      	cmp	r3, r6
 8008a24:	bfa8      	it	ge
 8008a26:	2200      	movge	r2, #0
 8008a28:	1c5d      	adds	r5, r3, #1
 8008a2a:	18ab      	adds	r3, r5, r2
 8008a2c:	e7e1      	b.n	80089f2 <__sccl+0x32>
 8008a2e:	4610      	mov	r0, r2
 8008a30:	e7da      	b.n	80089e8 <__sccl+0x28>

08008a32 <__submore>:
 8008a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	460c      	mov	r4, r1
 8008a38:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	d11b      	bne.n	8008a7a <__submore+0x48>
 8008a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a46:	f7fd fef5 	bl	8006834 <_malloc_r>
 8008a4a:	b918      	cbnz	r0, 8008a54 <__submore+0x22>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a5a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008a5e:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a60:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008a64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a68:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008a6c:	7043      	strb	r3, [r0, #1]
 8008a6e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a72:	7003      	strb	r3, [r0, #0]
 8008a74:	6020      	str	r0, [r4, #0]
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7ea      	b.n	8008a50 <__submore+0x1e>
 8008a7a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008a7c:	0077      	lsls	r7, r6, #1
 8008a7e:	463a      	mov	r2, r7
 8008a80:	f000 fbdd 	bl	800923e <_realloc_r>
 8008a84:	4605      	mov	r5, r0
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d0e0      	beq.n	8008a4c <__submore+0x1a>
 8008a8a:	eb00 0806 	add.w	r8, r0, r6
 8008a8e:	4601      	mov	r1, r0
 8008a90:	4632      	mov	r2, r6
 8008a92:	4640      	mov	r0, r8
 8008a94:	f000 f842 	bl	8008b1c <memcpy>
 8008a98:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008a9c:	f8c4 8000 	str.w	r8, [r4]
 8008aa0:	e7e9      	b.n	8008a76 <__submore+0x44>

08008aa2 <memmove>:
 8008aa2:	4288      	cmp	r0, r1
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	eb01 0402 	add.w	r4, r1, r2
 8008aaa:	d902      	bls.n	8008ab2 <memmove+0x10>
 8008aac:	4284      	cmp	r4, r0
 8008aae:	4623      	mov	r3, r4
 8008ab0:	d807      	bhi.n	8008ac2 <memmove+0x20>
 8008ab2:	1e43      	subs	r3, r0, #1
 8008ab4:	42a1      	cmp	r1, r4
 8008ab6:	d008      	beq.n	8008aca <memmove+0x28>
 8008ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac0:	e7f8      	b.n	8008ab4 <memmove+0x12>
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4402      	add	r2, r0
 8008ac6:	428a      	cmp	r2, r1
 8008ac8:	d100      	bne.n	8008acc <memmove+0x2a>
 8008aca:	bd10      	pop	{r4, pc}
 8008acc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad4:	e7f7      	b.n	8008ac6 <memmove+0x24>

08008ad6 <strncmp>:
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	b16a      	cbz	r2, 8008af6 <strncmp+0x20>
 8008ada:	3901      	subs	r1, #1
 8008adc:	1884      	adds	r4, r0, r2
 8008ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d103      	bne.n	8008af2 <strncmp+0x1c>
 8008aea:	42a0      	cmp	r0, r4
 8008aec:	d001      	beq.n	8008af2 <strncmp+0x1c>
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1f5      	bne.n	8008ade <strncmp+0x8>
 8008af2:	1ad0      	subs	r0, r2, r3
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	4610      	mov	r0, r2
 8008af8:	e7fc      	b.n	8008af4 <strncmp+0x1e>
	...

08008afc <_sbrk_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	2300      	movs	r3, #0
 8008b00:	4d05      	ldr	r5, [pc, #20]	@ (8008b18 <_sbrk_r+0x1c>)
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	f7f9 fa68 	bl	8001fdc <_sbrk>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_sbrk_r+0x1a>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_sbrk_r+0x1a>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20000410 	.word	0x20000410

08008b1c <memcpy>:
 8008b1c:	440a      	add	r2, r1
 8008b1e:	4291      	cmp	r1, r2
 8008b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b24:	d100      	bne.n	8008b28 <memcpy+0xc>
 8008b26:	4770      	bx	lr
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b34:	d1f9      	bne.n	8008b2a <memcpy+0xe>
 8008b36:	bd10      	pop	{r4, pc}

08008b38 <nan>:
 8008b38:	2000      	movs	r0, #0
 8008b3a:	4901      	ldr	r1, [pc, #4]	@ (8008b40 <nan+0x8>)
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	7ff80000 	.word	0x7ff80000

08008b44 <__assert_func>:
 8008b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b46:	4614      	mov	r4, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <__assert_func+0x2c>)
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68d8      	ldr	r0, [r3, #12]
 8008b52:	b954      	cbnz	r4, 8008b6a <__assert_func+0x26>
 8008b54:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <__assert_func+0x30>)
 8008b56:	461c      	mov	r4, r3
 8008b58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b5c:	9100      	str	r1, [sp, #0]
 8008b5e:	462b      	mov	r3, r5
 8008b60:	4905      	ldr	r1, [pc, #20]	@ (8008b78 <__assert_func+0x34>)
 8008b62:	f000 fc19 	bl	8009398 <fiprintf>
 8008b66:	f000 fc29 	bl	80093bc <abort>
 8008b6a:	4b04      	ldr	r3, [pc, #16]	@ (8008b7c <__assert_func+0x38>)
 8008b6c:	e7f4      	b.n	8008b58 <__assert_func+0x14>
 8008b6e:	bf00      	nop
 8008b70:	20000038 	.word	0x20000038
 8008b74:	0800a0e8 	.word	0x0800a0e8
 8008b78:	0800a0ba 	.word	0x0800a0ba
 8008b7c:	0800a0ad 	.word	0x0800a0ad

08008b80 <_calloc_r>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	fba1 5402 	umull	r5, r4, r1, r2
 8008b86:	b93c      	cbnz	r4, 8008b98 <_calloc_r+0x18>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7fd fe53 	bl	8006834 <_malloc_r>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	b928      	cbnz	r0, 8008b9e <_calloc_r+0x1e>
 8008b92:	2600      	movs	r6, #0
 8008b94:	4630      	mov	r0, r6
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	220c      	movs	r2, #12
 8008b9a:	6002      	str	r2, [r0, #0]
 8008b9c:	e7f9      	b.n	8008b92 <_calloc_r+0x12>
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f7fc fef2 	bl	800598a <memset>
 8008ba6:	e7f5      	b.n	8008b94 <_calloc_r+0x14>

08008ba8 <rshift>:
 8008ba8:	6903      	ldr	r3, [r0, #16]
 8008baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bb2:	f100 0414 	add.w	r4, r0, #20
 8008bb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008bba:	dd46      	ble.n	8008c4a <rshift+0xa2>
 8008bbc:	f011 011f 	ands.w	r1, r1, #31
 8008bc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008bc8:	d10c      	bne.n	8008be4 <rshift+0x3c>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f100 0710 	add.w	r7, r0, #16
 8008bd0:	42b1      	cmp	r1, r6
 8008bd2:	d335      	bcc.n	8008c40 <rshift+0x98>
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	1eea      	subs	r2, r5, #3
 8008bda:	4296      	cmp	r6, r2
 8008bdc:	bf38      	it	cc
 8008bde:	2300      	movcc	r3, #0
 8008be0:	4423      	add	r3, r4
 8008be2:	e015      	b.n	8008c10 <rshift+0x68>
 8008be4:	46a1      	mov	r9, r4
 8008be6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bea:	f1c1 0820 	rsb	r8, r1, #32
 8008bee:	40cf      	lsrs	r7, r1
 8008bf0:	f105 0e04 	add.w	lr, r5, #4
 8008bf4:	4576      	cmp	r6, lr
 8008bf6:	46f4      	mov	ip, lr
 8008bf8:	d816      	bhi.n	8008c28 <rshift+0x80>
 8008bfa:	1a9a      	subs	r2, r3, r2
 8008bfc:	0092      	lsls	r2, r2, #2
 8008bfe:	3a04      	subs	r2, #4
 8008c00:	3501      	adds	r5, #1
 8008c02:	42ae      	cmp	r6, r5
 8008c04:	bf38      	it	cc
 8008c06:	2200      	movcc	r2, #0
 8008c08:	18a3      	adds	r3, r4, r2
 8008c0a:	50a7      	str	r7, [r4, r2]
 8008c0c:	b107      	cbz	r7, 8008c10 <rshift+0x68>
 8008c0e:	3304      	adds	r3, #4
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	eba3 0204 	sub.w	r2, r3, r4
 8008c16:	bf08      	it	eq
 8008c18:	2300      	moveq	r3, #0
 8008c1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c1e:	6102      	str	r2, [r0, #16]
 8008c20:	bf08      	it	eq
 8008c22:	6143      	streq	r3, [r0, #20]
 8008c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c28:	f8dc c000 	ldr.w	ip, [ip]
 8008c2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c30:	ea4c 0707 	orr.w	r7, ip, r7
 8008c34:	f849 7b04 	str.w	r7, [r9], #4
 8008c38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c3c:	40cf      	lsrs	r7, r1
 8008c3e:	e7d9      	b.n	8008bf4 <rshift+0x4c>
 8008c40:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c44:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c48:	e7c2      	b.n	8008bd0 <rshift+0x28>
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	e7e0      	b.n	8008c10 <rshift+0x68>

08008c4e <__hexdig_fun>:
 8008c4e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d802      	bhi.n	8008c5c <__hexdig_fun+0xe>
 8008c56:	3820      	subs	r0, #32
 8008c58:	b2c0      	uxtb	r0, r0
 8008c5a:	4770      	bx	lr
 8008c5c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008c60:	2b05      	cmp	r3, #5
 8008c62:	d801      	bhi.n	8008c68 <__hexdig_fun+0x1a>
 8008c64:	3847      	subs	r0, #71	@ 0x47
 8008c66:	e7f7      	b.n	8008c58 <__hexdig_fun+0xa>
 8008c68:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008c6c:	2b05      	cmp	r3, #5
 8008c6e:	d801      	bhi.n	8008c74 <__hexdig_fun+0x26>
 8008c70:	3827      	subs	r0, #39	@ 0x27
 8008c72:	e7f1      	b.n	8008c58 <__hexdig_fun+0xa>
 8008c74:	2000      	movs	r0, #0
 8008c76:	4770      	bx	lr

08008c78 <__gethex>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	468a      	mov	sl, r1
 8008c7e:	4690      	mov	r8, r2
 8008c80:	b085      	sub	sp, #20
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	9001      	str	r0, [sp, #4]
 8008c88:	1c9c      	adds	r4, r3, #2
 8008c8a:	46a1      	mov	r9, r4
 8008c8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008c90:	2830      	cmp	r0, #48	@ 0x30
 8008c92:	d0fa      	beq.n	8008c8a <__gethex+0x12>
 8008c94:	eba9 0303 	sub.w	r3, r9, r3
 8008c98:	f1a3 0b02 	sub.w	fp, r3, #2
 8008c9c:	f7ff ffd7 	bl	8008c4e <__hexdig_fun>
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d168      	bne.n	8008d78 <__gethex+0x100>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4648      	mov	r0, r9
 8008caa:	499f      	ldr	r1, [pc, #636]	@ (8008f28 <__gethex+0x2b0>)
 8008cac:	f7ff ff13 	bl	8008ad6 <strncmp>
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d167      	bne.n	8008d86 <__gethex+0x10e>
 8008cb6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008cba:	4626      	mov	r6, r4
 8008cbc:	f7ff ffc7 	bl	8008c4e <__hexdig_fun>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d062      	beq.n	8008d8a <__gethex+0x112>
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	7818      	ldrb	r0, [r3, #0]
 8008cc8:	4699      	mov	r9, r3
 8008cca:	2830      	cmp	r0, #48	@ 0x30
 8008ccc:	f103 0301 	add.w	r3, r3, #1
 8008cd0:	d0f9      	beq.n	8008cc6 <__gethex+0x4e>
 8008cd2:	f7ff ffbc 	bl	8008c4e <__hexdig_fun>
 8008cd6:	fab0 f580 	clz	r5, r0
 8008cda:	f04f 0b01 	mov.w	fp, #1
 8008cde:	096d      	lsrs	r5, r5, #5
 8008ce0:	464a      	mov	r2, r9
 8008ce2:	4616      	mov	r6, r2
 8008ce4:	7830      	ldrb	r0, [r6, #0]
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	f7ff ffb1 	bl	8008c4e <__hexdig_fun>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d1f8      	bne.n	8008ce2 <__gethex+0x6a>
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	498c      	ldr	r1, [pc, #560]	@ (8008f28 <__gethex+0x2b0>)
 8008cf6:	f7ff feee 	bl	8008ad6 <strncmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d13f      	bne.n	8008d7e <__gethex+0x106>
 8008cfe:	b944      	cbnz	r4, 8008d12 <__gethex+0x9a>
 8008d00:	1c74      	adds	r4, r6, #1
 8008d02:	4622      	mov	r2, r4
 8008d04:	4616      	mov	r6, r2
 8008d06:	7830      	ldrb	r0, [r6, #0]
 8008d08:	3201      	adds	r2, #1
 8008d0a:	f7ff ffa0 	bl	8008c4e <__hexdig_fun>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d1f8      	bne.n	8008d04 <__gethex+0x8c>
 8008d12:	1ba4      	subs	r4, r4, r6
 8008d14:	00a7      	lsls	r7, r4, #2
 8008d16:	7833      	ldrb	r3, [r6, #0]
 8008d18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d1c:	2b50      	cmp	r3, #80	@ 0x50
 8008d1e:	d13e      	bne.n	8008d9e <__gethex+0x126>
 8008d20:	7873      	ldrb	r3, [r6, #1]
 8008d22:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d24:	d033      	beq.n	8008d8e <__gethex+0x116>
 8008d26:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d28:	d034      	beq.n	8008d94 <__gethex+0x11c>
 8008d2a:	2400      	movs	r4, #0
 8008d2c:	1c71      	adds	r1, r6, #1
 8008d2e:	7808      	ldrb	r0, [r1, #0]
 8008d30:	f7ff ff8d 	bl	8008c4e <__hexdig_fun>
 8008d34:	1e43      	subs	r3, r0, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b18      	cmp	r3, #24
 8008d3a:	d830      	bhi.n	8008d9e <__gethex+0x126>
 8008d3c:	f1a0 0210 	sub.w	r2, r0, #16
 8008d40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d44:	f7ff ff83 	bl	8008c4e <__hexdig_fun>
 8008d48:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d4c:	fa5f fc8c 	uxtb.w	ip, ip
 8008d50:	f1bc 0f18 	cmp.w	ip, #24
 8008d54:	f04f 030a 	mov.w	r3, #10
 8008d58:	d91e      	bls.n	8008d98 <__gethex+0x120>
 8008d5a:	b104      	cbz	r4, 8008d5e <__gethex+0xe6>
 8008d5c:	4252      	negs	r2, r2
 8008d5e:	4417      	add	r7, r2
 8008d60:	f8ca 1000 	str.w	r1, [sl]
 8008d64:	b1ed      	cbz	r5, 8008da2 <__gethex+0x12a>
 8008d66:	f1bb 0f00 	cmp.w	fp, #0
 8008d6a:	bf0c      	ite	eq
 8008d6c:	2506      	moveq	r5, #6
 8008d6e:	2500      	movne	r5, #0
 8008d70:	4628      	mov	r0, r5
 8008d72:	b005      	add	sp, #20
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	2500      	movs	r5, #0
 8008d7a:	462c      	mov	r4, r5
 8008d7c:	e7b0      	b.n	8008ce0 <__gethex+0x68>
 8008d7e:	2c00      	cmp	r4, #0
 8008d80:	d1c7      	bne.n	8008d12 <__gethex+0x9a>
 8008d82:	4627      	mov	r7, r4
 8008d84:	e7c7      	b.n	8008d16 <__gethex+0x9e>
 8008d86:	464e      	mov	r6, r9
 8008d88:	462f      	mov	r7, r5
 8008d8a:	2501      	movs	r5, #1
 8008d8c:	e7c3      	b.n	8008d16 <__gethex+0x9e>
 8008d8e:	2400      	movs	r4, #0
 8008d90:	1cb1      	adds	r1, r6, #2
 8008d92:	e7cc      	b.n	8008d2e <__gethex+0xb6>
 8008d94:	2401      	movs	r4, #1
 8008d96:	e7fb      	b.n	8008d90 <__gethex+0x118>
 8008d98:	fb03 0002 	mla	r0, r3, r2, r0
 8008d9c:	e7ce      	b.n	8008d3c <__gethex+0xc4>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	e7de      	b.n	8008d60 <__gethex+0xe8>
 8008da2:	4629      	mov	r1, r5
 8008da4:	eba6 0309 	sub.w	r3, r6, r9
 8008da8:	3b01      	subs	r3, #1
 8008daa:	2b07      	cmp	r3, #7
 8008dac:	dc0a      	bgt.n	8008dc4 <__gethex+0x14c>
 8008dae:	9801      	ldr	r0, [sp, #4]
 8008db0:	f7fd fdcc 	bl	800694c <_Balloc>
 8008db4:	4604      	mov	r4, r0
 8008db6:	b940      	cbnz	r0, 8008dca <__gethex+0x152>
 8008db8:	4602      	mov	r2, r0
 8008dba:	21e4      	movs	r1, #228	@ 0xe4
 8008dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8008f2c <__gethex+0x2b4>)
 8008dbe:	485c      	ldr	r0, [pc, #368]	@ (8008f30 <__gethex+0x2b8>)
 8008dc0:	f7ff fec0 	bl	8008b44 <__assert_func>
 8008dc4:	3101      	adds	r1, #1
 8008dc6:	105b      	asrs	r3, r3, #1
 8008dc8:	e7ef      	b.n	8008daa <__gethex+0x132>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f100 0a14 	add.w	sl, r0, #20
 8008dd0:	4655      	mov	r5, sl
 8008dd2:	469b      	mov	fp, r3
 8008dd4:	45b1      	cmp	r9, r6
 8008dd6:	d337      	bcc.n	8008e48 <__gethex+0x1d0>
 8008dd8:	f845 bb04 	str.w	fp, [r5], #4
 8008ddc:	eba5 050a 	sub.w	r5, r5, sl
 8008de0:	10ad      	asrs	r5, r5, #2
 8008de2:	6125      	str	r5, [r4, #16]
 8008de4:	4658      	mov	r0, fp
 8008de6:	f7fd fea3 	bl	8006b30 <__hi0bits>
 8008dea:	016d      	lsls	r5, r5, #5
 8008dec:	f8d8 6000 	ldr.w	r6, [r8]
 8008df0:	1a2d      	subs	r5, r5, r0
 8008df2:	42b5      	cmp	r5, r6
 8008df4:	dd54      	ble.n	8008ea0 <__gethex+0x228>
 8008df6:	1bad      	subs	r5, r5, r6
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f7fe fa2b 	bl	8007256 <__any_on>
 8008e00:	4681      	mov	r9, r0
 8008e02:	b178      	cbz	r0, 8008e24 <__gethex+0x1ac>
 8008e04:	f04f 0901 	mov.w	r9, #1
 8008e08:	1e6b      	subs	r3, r5, #1
 8008e0a:	1159      	asrs	r1, r3, #5
 8008e0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e10:	f003 021f 	and.w	r2, r3, #31
 8008e14:	fa09 f202 	lsl.w	r2, r9, r2
 8008e18:	420a      	tst	r2, r1
 8008e1a:	d003      	beq.n	8008e24 <__gethex+0x1ac>
 8008e1c:	454b      	cmp	r3, r9
 8008e1e:	dc36      	bgt.n	8008e8e <__gethex+0x216>
 8008e20:	f04f 0902 	mov.w	r9, #2
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7ff febe 	bl	8008ba8 <rshift>
 8008e2c:	442f      	add	r7, r5
 8008e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e32:	42bb      	cmp	r3, r7
 8008e34:	da42      	bge.n	8008ebc <__gethex+0x244>
 8008e36:	4621      	mov	r1, r4
 8008e38:	9801      	ldr	r0, [sp, #4]
 8008e3a:	f7fd fdc7 	bl	80069cc <_Bfree>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e42:	25a3      	movs	r5, #163	@ 0xa3
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e793      	b.n	8008d70 <__gethex+0xf8>
 8008e48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008e4c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008e4e:	d012      	beq.n	8008e76 <__gethex+0x1fe>
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d104      	bne.n	8008e5e <__gethex+0x1e6>
 8008e54:	f845 bb04 	str.w	fp, [r5], #4
 8008e58:	f04f 0b00 	mov.w	fp, #0
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	7830      	ldrb	r0, [r6, #0]
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	f7ff fef4 	bl	8008c4e <__hexdig_fun>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	f000 000f 	and.w	r0, r0, #15
 8008e6c:	4098      	lsls	r0, r3
 8008e6e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e72:	3304      	adds	r3, #4
 8008e74:	e7ae      	b.n	8008dd4 <__gethex+0x15c>
 8008e76:	45b1      	cmp	r9, r6
 8008e78:	d8ea      	bhi.n	8008e50 <__gethex+0x1d8>
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	492a      	ldr	r1, [pc, #168]	@ (8008f28 <__gethex+0x2b0>)
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	f7ff fe28 	bl	8008ad6 <strncmp>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1e1      	bne.n	8008e50 <__gethex+0x1d8>
 8008e8c:	e7a2      	b.n	8008dd4 <__gethex+0x15c>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	1ea9      	subs	r1, r5, #2
 8008e92:	f7fe f9e0 	bl	8007256 <__any_on>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0c2      	beq.n	8008e20 <__gethex+0x1a8>
 8008e9a:	f04f 0903 	mov.w	r9, #3
 8008e9e:	e7c1      	b.n	8008e24 <__gethex+0x1ac>
 8008ea0:	da09      	bge.n	8008eb6 <__gethex+0x23e>
 8008ea2:	1b75      	subs	r5, r6, r5
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	9801      	ldr	r0, [sp, #4]
 8008eaa:	f7fd ffa5 	bl	8006df8 <__lshift>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	1b7f      	subs	r7, r7, r5
 8008eb2:	f100 0a14 	add.w	sl, r0, #20
 8008eb6:	f04f 0900 	mov.w	r9, #0
 8008eba:	e7b8      	b.n	8008e2e <__gethex+0x1b6>
 8008ebc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ec0:	42bd      	cmp	r5, r7
 8008ec2:	dd6f      	ble.n	8008fa4 <__gethex+0x32c>
 8008ec4:	1bed      	subs	r5, r5, r7
 8008ec6:	42ae      	cmp	r6, r5
 8008ec8:	dc34      	bgt.n	8008f34 <__gethex+0x2bc>
 8008eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d022      	beq.n	8008f18 <__gethex+0x2a0>
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d024      	beq.n	8008f20 <__gethex+0x2a8>
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d115      	bne.n	8008f06 <__gethex+0x28e>
 8008eda:	42ae      	cmp	r6, r5
 8008edc:	d113      	bne.n	8008f06 <__gethex+0x28e>
 8008ede:	2e01      	cmp	r6, #1
 8008ee0:	d10b      	bne.n	8008efa <__gethex+0x282>
 8008ee2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ee6:	9a02      	ldr	r2, [sp, #8]
 8008ee8:	2562      	movs	r5, #98	@ 0x62
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	2301      	movs	r3, #1
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	f8ca 3000 	str.w	r3, [sl]
 8008ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef6:	601c      	str	r4, [r3, #0]
 8008ef8:	e73a      	b.n	8008d70 <__gethex+0xf8>
 8008efa:	4620      	mov	r0, r4
 8008efc:	1e71      	subs	r1, r6, #1
 8008efe:	f7fe f9aa 	bl	8007256 <__any_on>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1ed      	bne.n	8008ee2 <__gethex+0x26a>
 8008f06:	4621      	mov	r1, r4
 8008f08:	9801      	ldr	r0, [sp, #4]
 8008f0a:	f7fd fd5f 	bl	80069cc <_Bfree>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f12:	2550      	movs	r5, #80	@ 0x50
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	e72b      	b.n	8008d70 <__gethex+0xf8>
 8008f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1f3      	bne.n	8008f06 <__gethex+0x28e>
 8008f1e:	e7e0      	b.n	8008ee2 <__gethex+0x26a>
 8008f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1dd      	bne.n	8008ee2 <__gethex+0x26a>
 8008f26:	e7ee      	b.n	8008f06 <__gethex+0x28e>
 8008f28:	08009f20 	.word	0x08009f20
 8008f2c:	08009db9 	.word	0x08009db9
 8008f30:	0800a0e9 	.word	0x0800a0e9
 8008f34:	1e6f      	subs	r7, r5, #1
 8008f36:	f1b9 0f00 	cmp.w	r9, #0
 8008f3a:	d130      	bne.n	8008f9e <__gethex+0x326>
 8008f3c:	b127      	cbz	r7, 8008f48 <__gethex+0x2d0>
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7fe f988 	bl	8007256 <__any_on>
 8008f46:	4681      	mov	r9, r0
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	1b76      	subs	r6, r6, r5
 8008f4e:	2502      	movs	r5, #2
 8008f50:	117a      	asrs	r2, r7, #5
 8008f52:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f56:	f007 071f 	and.w	r7, r7, #31
 8008f5a:	40bb      	lsls	r3, r7
 8008f5c:	4213      	tst	r3, r2
 8008f5e:	4620      	mov	r0, r4
 8008f60:	bf18      	it	ne
 8008f62:	f049 0902 	orrne.w	r9, r9, #2
 8008f66:	f7ff fe1f 	bl	8008ba8 <rshift>
 8008f6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008f6e:	f1b9 0f00 	cmp.w	r9, #0
 8008f72:	d047      	beq.n	8009004 <__gethex+0x38c>
 8008f74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d015      	beq.n	8008fa8 <__gethex+0x330>
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d017      	beq.n	8008fb0 <__gethex+0x338>
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d109      	bne.n	8008f98 <__gethex+0x320>
 8008f84:	f019 0f02 	tst.w	r9, #2
 8008f88:	d006      	beq.n	8008f98 <__gethex+0x320>
 8008f8a:	f8da 3000 	ldr.w	r3, [sl]
 8008f8e:	ea49 0903 	orr.w	r9, r9, r3
 8008f92:	f019 0f01 	tst.w	r9, #1
 8008f96:	d10e      	bne.n	8008fb6 <__gethex+0x33e>
 8008f98:	f045 0510 	orr.w	r5, r5, #16
 8008f9c:	e032      	b.n	8009004 <__gethex+0x38c>
 8008f9e:	f04f 0901 	mov.w	r9, #1
 8008fa2:	e7d1      	b.n	8008f48 <__gethex+0x2d0>
 8008fa4:	2501      	movs	r5, #1
 8008fa6:	e7e2      	b.n	8008f6e <__gethex+0x2f6>
 8008fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008faa:	f1c3 0301 	rsb	r3, r3, #1
 8008fae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0f0      	beq.n	8008f98 <__gethex+0x320>
 8008fb6:	f04f 0c00 	mov.w	ip, #0
 8008fba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fbe:	f104 0314 	add.w	r3, r4, #20
 8008fc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fd4:	d01b      	beq.n	800900e <__gethex+0x396>
 8008fd6:	3201      	adds	r2, #1
 8008fd8:	6002      	str	r2, [r0, #0]
 8008fda:	2d02      	cmp	r5, #2
 8008fdc:	f104 0314 	add.w	r3, r4, #20
 8008fe0:	d13c      	bne.n	800905c <__gethex+0x3e4>
 8008fe2:	f8d8 2000 	ldr.w	r2, [r8]
 8008fe6:	3a01      	subs	r2, #1
 8008fe8:	42b2      	cmp	r2, r6
 8008fea:	d109      	bne.n	8009000 <__gethex+0x388>
 8008fec:	2201      	movs	r2, #1
 8008fee:	1171      	asrs	r1, r6, #5
 8008ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ff4:	f006 061f 	and.w	r6, r6, #31
 8008ff8:	fa02 f606 	lsl.w	r6, r2, r6
 8008ffc:	421e      	tst	r6, r3
 8008ffe:	d13a      	bne.n	8009076 <__gethex+0x3fe>
 8009000:	f045 0520 	orr.w	r5, r5, #32
 8009004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009006:	601c      	str	r4, [r3, #0]
 8009008:	9b02      	ldr	r3, [sp, #8]
 800900a:	601f      	str	r7, [r3, #0]
 800900c:	e6b0      	b.n	8008d70 <__gethex+0xf8>
 800900e:	4299      	cmp	r1, r3
 8009010:	f843 cc04 	str.w	ip, [r3, #-4]
 8009014:	d8d9      	bhi.n	8008fca <__gethex+0x352>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	459b      	cmp	fp, r3
 800901a:	db17      	blt.n	800904c <__gethex+0x3d4>
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	9801      	ldr	r0, [sp, #4]
 8009020:	3101      	adds	r1, #1
 8009022:	f7fd fc93 	bl	800694c <_Balloc>
 8009026:	4681      	mov	r9, r0
 8009028:	b918      	cbnz	r0, 8009032 <__gethex+0x3ba>
 800902a:	4602      	mov	r2, r0
 800902c:	2184      	movs	r1, #132	@ 0x84
 800902e:	4b19      	ldr	r3, [pc, #100]	@ (8009094 <__gethex+0x41c>)
 8009030:	e6c5      	b.n	8008dbe <__gethex+0x146>
 8009032:	6922      	ldr	r2, [r4, #16]
 8009034:	f104 010c 	add.w	r1, r4, #12
 8009038:	3202      	adds	r2, #2
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	300c      	adds	r0, #12
 800903e:	f7ff fd6d 	bl	8008b1c <memcpy>
 8009042:	4621      	mov	r1, r4
 8009044:	9801      	ldr	r0, [sp, #4]
 8009046:	f7fd fcc1 	bl	80069cc <_Bfree>
 800904a:	464c      	mov	r4, r9
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	6122      	str	r2, [r4, #16]
 8009052:	2201      	movs	r2, #1
 8009054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009058:	615a      	str	r2, [r3, #20]
 800905a:	e7be      	b.n	8008fda <__gethex+0x362>
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	455a      	cmp	r2, fp
 8009060:	dd0b      	ble.n	800907a <__gethex+0x402>
 8009062:	2101      	movs	r1, #1
 8009064:	4620      	mov	r0, r4
 8009066:	f7ff fd9f 	bl	8008ba8 <rshift>
 800906a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800906e:	3701      	adds	r7, #1
 8009070:	42bb      	cmp	r3, r7
 8009072:	f6ff aee0 	blt.w	8008e36 <__gethex+0x1be>
 8009076:	2501      	movs	r5, #1
 8009078:	e7c2      	b.n	8009000 <__gethex+0x388>
 800907a:	f016 061f 	ands.w	r6, r6, #31
 800907e:	d0fa      	beq.n	8009076 <__gethex+0x3fe>
 8009080:	4453      	add	r3, sl
 8009082:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009086:	f7fd fd53 	bl	8006b30 <__hi0bits>
 800908a:	f1c6 0620 	rsb	r6, r6, #32
 800908e:	42b0      	cmp	r0, r6
 8009090:	dbe7      	blt.n	8009062 <__gethex+0x3ea>
 8009092:	e7f0      	b.n	8009076 <__gethex+0x3fe>
 8009094:	08009db9 	.word	0x08009db9

08009098 <L_shift>:
 8009098:	f1c2 0208 	rsb	r2, r2, #8
 800909c:	0092      	lsls	r2, r2, #2
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	f1c2 0620 	rsb	r6, r2, #32
 80090a4:	6843      	ldr	r3, [r0, #4]
 80090a6:	6804      	ldr	r4, [r0, #0]
 80090a8:	fa03 f506 	lsl.w	r5, r3, r6
 80090ac:	432c      	orrs	r4, r5
 80090ae:	40d3      	lsrs	r3, r2
 80090b0:	6004      	str	r4, [r0, #0]
 80090b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090b6:	4288      	cmp	r0, r1
 80090b8:	d3f4      	bcc.n	80090a4 <L_shift+0xc>
 80090ba:	bd70      	pop	{r4, r5, r6, pc}

080090bc <__match>:
 80090bc:	b530      	push	{r4, r5, lr}
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c6:	b914      	cbnz	r4, 80090ce <__match+0x12>
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	2001      	movs	r0, #1
 80090cc:	bd30      	pop	{r4, r5, pc}
 80090ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80090d6:	2d19      	cmp	r5, #25
 80090d8:	bf98      	it	ls
 80090da:	3220      	addls	r2, #32
 80090dc:	42a2      	cmp	r2, r4
 80090de:	d0f0      	beq.n	80090c2 <__match+0x6>
 80090e0:	2000      	movs	r0, #0
 80090e2:	e7f3      	b.n	80090cc <__match+0x10>

080090e4 <__hexnan>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	2500      	movs	r5, #0
 80090ea:	680b      	ldr	r3, [r1, #0]
 80090ec:	4682      	mov	sl, r0
 80090ee:	115e      	asrs	r6, r3, #5
 80090f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090f4:	f013 031f 	ands.w	r3, r3, #31
 80090f8:	bf18      	it	ne
 80090fa:	3604      	addne	r6, #4
 80090fc:	1f37      	subs	r7, r6, #4
 80090fe:	4690      	mov	r8, r2
 8009100:	46b9      	mov	r9, r7
 8009102:	463c      	mov	r4, r7
 8009104:	46ab      	mov	fp, r5
 8009106:	b087      	sub	sp, #28
 8009108:	6801      	ldr	r1, [r0, #0]
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009110:	9502      	str	r5, [sp, #8]
 8009112:	784a      	ldrb	r2, [r1, #1]
 8009114:	1c4b      	adds	r3, r1, #1
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	b342      	cbz	r2, 800916c <__hexnan+0x88>
 800911a:	4610      	mov	r0, r2
 800911c:	9105      	str	r1, [sp, #20]
 800911e:	9204      	str	r2, [sp, #16]
 8009120:	f7ff fd95 	bl	8008c4e <__hexdig_fun>
 8009124:	2800      	cmp	r0, #0
 8009126:	d151      	bne.n	80091cc <__hexnan+0xe8>
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	9905      	ldr	r1, [sp, #20]
 800912c:	2a20      	cmp	r2, #32
 800912e:	d818      	bhi.n	8009162 <__hexnan+0x7e>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	459b      	cmp	fp, r3
 8009134:	dd13      	ble.n	800915e <__hexnan+0x7a>
 8009136:	454c      	cmp	r4, r9
 8009138:	d206      	bcs.n	8009148 <__hexnan+0x64>
 800913a:	2d07      	cmp	r5, #7
 800913c:	dc04      	bgt.n	8009148 <__hexnan+0x64>
 800913e:	462a      	mov	r2, r5
 8009140:	4649      	mov	r1, r9
 8009142:	4620      	mov	r0, r4
 8009144:	f7ff ffa8 	bl	8009098 <L_shift>
 8009148:	4544      	cmp	r4, r8
 800914a:	d952      	bls.n	80091f2 <__hexnan+0x10e>
 800914c:	2300      	movs	r3, #0
 800914e:	f1a4 0904 	sub.w	r9, r4, #4
 8009152:	f844 3c04 	str.w	r3, [r4, #-4]
 8009156:	461d      	mov	r5, r3
 8009158:	464c      	mov	r4, r9
 800915a:	f8cd b008 	str.w	fp, [sp, #8]
 800915e:	9903      	ldr	r1, [sp, #12]
 8009160:	e7d7      	b.n	8009112 <__hexnan+0x2e>
 8009162:	2a29      	cmp	r2, #41	@ 0x29
 8009164:	d157      	bne.n	8009216 <__hexnan+0x132>
 8009166:	3102      	adds	r1, #2
 8009168:	f8ca 1000 	str.w	r1, [sl]
 800916c:	f1bb 0f00 	cmp.w	fp, #0
 8009170:	d051      	beq.n	8009216 <__hexnan+0x132>
 8009172:	454c      	cmp	r4, r9
 8009174:	d206      	bcs.n	8009184 <__hexnan+0xa0>
 8009176:	2d07      	cmp	r5, #7
 8009178:	dc04      	bgt.n	8009184 <__hexnan+0xa0>
 800917a:	462a      	mov	r2, r5
 800917c:	4649      	mov	r1, r9
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff ff8a 	bl	8009098 <L_shift>
 8009184:	4544      	cmp	r4, r8
 8009186:	d936      	bls.n	80091f6 <__hexnan+0x112>
 8009188:	4623      	mov	r3, r4
 800918a:	f1a8 0204 	sub.w	r2, r8, #4
 800918e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009192:	429f      	cmp	r7, r3
 8009194:	f842 1f04 	str.w	r1, [r2, #4]!
 8009198:	d2f9      	bcs.n	800918e <__hexnan+0xaa>
 800919a:	1b3b      	subs	r3, r7, r4
 800919c:	f023 0303 	bic.w	r3, r3, #3
 80091a0:	3304      	adds	r3, #4
 80091a2:	3401      	adds	r4, #1
 80091a4:	3e03      	subs	r6, #3
 80091a6:	42b4      	cmp	r4, r6
 80091a8:	bf88      	it	hi
 80091aa:	2304      	movhi	r3, #4
 80091ac:	2200      	movs	r2, #0
 80091ae:	4443      	add	r3, r8
 80091b0:	f843 2b04 	str.w	r2, [r3], #4
 80091b4:	429f      	cmp	r7, r3
 80091b6:	d2fb      	bcs.n	80091b0 <__hexnan+0xcc>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	b91b      	cbnz	r3, 80091c4 <__hexnan+0xe0>
 80091bc:	4547      	cmp	r7, r8
 80091be:	d128      	bne.n	8009212 <__hexnan+0x12e>
 80091c0:	2301      	movs	r3, #1
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	2005      	movs	r0, #5
 80091c6:	b007      	add	sp, #28
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	3501      	adds	r5, #1
 80091ce:	2d08      	cmp	r5, #8
 80091d0:	f10b 0b01 	add.w	fp, fp, #1
 80091d4:	dd06      	ble.n	80091e4 <__hexnan+0x100>
 80091d6:	4544      	cmp	r4, r8
 80091d8:	d9c1      	bls.n	800915e <__hexnan+0x7a>
 80091da:	2300      	movs	r3, #0
 80091dc:	2501      	movs	r5, #1
 80091de:	f844 3c04 	str.w	r3, [r4, #-4]
 80091e2:	3c04      	subs	r4, #4
 80091e4:	6822      	ldr	r2, [r4, #0]
 80091e6:	f000 000f 	and.w	r0, r0, #15
 80091ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80091ee:	6020      	str	r0, [r4, #0]
 80091f0:	e7b5      	b.n	800915e <__hexnan+0x7a>
 80091f2:	2508      	movs	r5, #8
 80091f4:	e7b3      	b.n	800915e <__hexnan+0x7a>
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0dd      	beq.n	80091b8 <__hexnan+0xd4>
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	f1c3 0320 	rsb	r3, r3, #32
 8009204:	40da      	lsrs	r2, r3
 8009206:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800920a:	4013      	ands	r3, r2
 800920c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009210:	e7d2      	b.n	80091b8 <__hexnan+0xd4>
 8009212:	3f04      	subs	r7, #4
 8009214:	e7d0      	b.n	80091b8 <__hexnan+0xd4>
 8009216:	2004      	movs	r0, #4
 8009218:	e7d5      	b.n	80091c6 <__hexnan+0xe2>

0800921a <__ascii_mbtowc>:
 800921a:	b082      	sub	sp, #8
 800921c:	b901      	cbnz	r1, 8009220 <__ascii_mbtowc+0x6>
 800921e:	a901      	add	r1, sp, #4
 8009220:	b142      	cbz	r2, 8009234 <__ascii_mbtowc+0x1a>
 8009222:	b14b      	cbz	r3, 8009238 <__ascii_mbtowc+0x1e>
 8009224:	7813      	ldrb	r3, [r2, #0]
 8009226:	600b      	str	r3, [r1, #0]
 8009228:	7812      	ldrb	r2, [r2, #0]
 800922a:	1e10      	subs	r0, r2, #0
 800922c:	bf18      	it	ne
 800922e:	2001      	movne	r0, #1
 8009230:	b002      	add	sp, #8
 8009232:	4770      	bx	lr
 8009234:	4610      	mov	r0, r2
 8009236:	e7fb      	b.n	8009230 <__ascii_mbtowc+0x16>
 8009238:	f06f 0001 	mvn.w	r0, #1
 800923c:	e7f8      	b.n	8009230 <__ascii_mbtowc+0x16>

0800923e <_realloc_r>:
 800923e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	4680      	mov	r8, r0
 8009244:	4615      	mov	r5, r2
 8009246:	460c      	mov	r4, r1
 8009248:	b921      	cbnz	r1, 8009254 <_realloc_r+0x16>
 800924a:	4611      	mov	r1, r2
 800924c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009250:	f7fd baf0 	b.w	8006834 <_malloc_r>
 8009254:	b92a      	cbnz	r2, 8009262 <_realloc_r+0x24>
 8009256:	f7fd fa7b 	bl	8006750 <_free_r>
 800925a:	2400      	movs	r4, #0
 800925c:	4620      	mov	r0, r4
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009262:	f000 f8b2 	bl	80093ca <_malloc_usable_size_r>
 8009266:	4285      	cmp	r5, r0
 8009268:	4606      	mov	r6, r0
 800926a:	d802      	bhi.n	8009272 <_realloc_r+0x34>
 800926c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009270:	d8f4      	bhi.n	800925c <_realloc_r+0x1e>
 8009272:	4629      	mov	r1, r5
 8009274:	4640      	mov	r0, r8
 8009276:	f7fd fadd 	bl	8006834 <_malloc_r>
 800927a:	4607      	mov	r7, r0
 800927c:	2800      	cmp	r0, #0
 800927e:	d0ec      	beq.n	800925a <_realloc_r+0x1c>
 8009280:	42b5      	cmp	r5, r6
 8009282:	462a      	mov	r2, r5
 8009284:	4621      	mov	r1, r4
 8009286:	bf28      	it	cs
 8009288:	4632      	movcs	r2, r6
 800928a:	f7ff fc47 	bl	8008b1c <memcpy>
 800928e:	4621      	mov	r1, r4
 8009290:	4640      	mov	r0, r8
 8009292:	f7fd fa5d 	bl	8006750 <_free_r>
 8009296:	463c      	mov	r4, r7
 8009298:	e7e0      	b.n	800925c <_realloc_r+0x1e>
	...

0800929c <_strtoul_l.constprop.0>:
 800929c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4686      	mov	lr, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	4e33      	ldr	r6, [pc, #204]	@ (8009374 <_strtoul_l.constprop.0+0xd8>)
 80092a6:	4628      	mov	r0, r5
 80092a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ac:	5d37      	ldrb	r7, [r6, r4]
 80092ae:	f017 0708 	ands.w	r7, r7, #8
 80092b2:	d1f8      	bne.n	80092a6 <_strtoul_l.constprop.0+0xa>
 80092b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80092b6:	d12f      	bne.n	8009318 <_strtoul_l.constprop.0+0x7c>
 80092b8:	2701      	movs	r7, #1
 80092ba:	782c      	ldrb	r4, [r5, #0]
 80092bc:	1c85      	adds	r5, r0, #2
 80092be:	f033 0010 	bics.w	r0, r3, #16
 80092c2:	d109      	bne.n	80092d8 <_strtoul_l.constprop.0+0x3c>
 80092c4:	2c30      	cmp	r4, #48	@ 0x30
 80092c6:	d12c      	bne.n	8009322 <_strtoul_l.constprop.0+0x86>
 80092c8:	7828      	ldrb	r0, [r5, #0]
 80092ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80092ce:	2858      	cmp	r0, #88	@ 0x58
 80092d0:	d127      	bne.n	8009322 <_strtoul_l.constprop.0+0x86>
 80092d2:	2310      	movs	r3, #16
 80092d4:	786c      	ldrb	r4, [r5, #1]
 80092d6:	3502      	adds	r5, #2
 80092d8:	f04f 38ff 	mov.w	r8, #4294967295
 80092dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80092e0:	2600      	movs	r6, #0
 80092e2:	fb03 f908 	mul.w	r9, r3, r8
 80092e6:	4630      	mov	r0, r6
 80092e8:	ea6f 0909 	mvn.w	r9, r9
 80092ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80092f0:	f1bc 0f09 	cmp.w	ip, #9
 80092f4:	d81c      	bhi.n	8009330 <_strtoul_l.constprop.0+0x94>
 80092f6:	4664      	mov	r4, ip
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	dd2a      	ble.n	8009352 <_strtoul_l.constprop.0+0xb6>
 80092fc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009300:	d007      	beq.n	8009312 <_strtoul_l.constprop.0+0x76>
 8009302:	4580      	cmp	r8, r0
 8009304:	d322      	bcc.n	800934c <_strtoul_l.constprop.0+0xb0>
 8009306:	d101      	bne.n	800930c <_strtoul_l.constprop.0+0x70>
 8009308:	45a1      	cmp	r9, r4
 800930a:	db1f      	blt.n	800934c <_strtoul_l.constprop.0+0xb0>
 800930c:	2601      	movs	r6, #1
 800930e:	fb00 4003 	mla	r0, r0, r3, r4
 8009312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009316:	e7e9      	b.n	80092ec <_strtoul_l.constprop.0+0x50>
 8009318:	2c2b      	cmp	r4, #43	@ 0x2b
 800931a:	bf04      	itt	eq
 800931c:	782c      	ldrbeq	r4, [r5, #0]
 800931e:	1c85      	addeq	r5, r0, #2
 8009320:	e7cd      	b.n	80092be <_strtoul_l.constprop.0+0x22>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1d8      	bne.n	80092d8 <_strtoul_l.constprop.0+0x3c>
 8009326:	2c30      	cmp	r4, #48	@ 0x30
 8009328:	bf0c      	ite	eq
 800932a:	2308      	moveq	r3, #8
 800932c:	230a      	movne	r3, #10
 800932e:	e7d3      	b.n	80092d8 <_strtoul_l.constprop.0+0x3c>
 8009330:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009334:	f1bc 0f19 	cmp.w	ip, #25
 8009338:	d801      	bhi.n	800933e <_strtoul_l.constprop.0+0xa2>
 800933a:	3c37      	subs	r4, #55	@ 0x37
 800933c:	e7dc      	b.n	80092f8 <_strtoul_l.constprop.0+0x5c>
 800933e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009342:	f1bc 0f19 	cmp.w	ip, #25
 8009346:	d804      	bhi.n	8009352 <_strtoul_l.constprop.0+0xb6>
 8009348:	3c57      	subs	r4, #87	@ 0x57
 800934a:	e7d5      	b.n	80092f8 <_strtoul_l.constprop.0+0x5c>
 800934c:	f04f 36ff 	mov.w	r6, #4294967295
 8009350:	e7df      	b.n	8009312 <_strtoul_l.constprop.0+0x76>
 8009352:	1c73      	adds	r3, r6, #1
 8009354:	d106      	bne.n	8009364 <_strtoul_l.constprop.0+0xc8>
 8009356:	2322      	movs	r3, #34	@ 0x22
 8009358:	4630      	mov	r0, r6
 800935a:	f8ce 3000 	str.w	r3, [lr]
 800935e:	b932      	cbnz	r2, 800936e <_strtoul_l.constprop.0+0xd2>
 8009360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009364:	b107      	cbz	r7, 8009368 <_strtoul_l.constprop.0+0xcc>
 8009366:	4240      	negs	r0, r0
 8009368:	2a00      	cmp	r2, #0
 800936a:	d0f9      	beq.n	8009360 <_strtoul_l.constprop.0+0xc4>
 800936c:	b106      	cbz	r6, 8009370 <_strtoul_l.constprop.0+0xd4>
 800936e:	1e69      	subs	r1, r5, #1
 8009370:	6011      	str	r1, [r2, #0]
 8009372:	e7f5      	b.n	8009360 <_strtoul_l.constprop.0+0xc4>
 8009374:	08009f79 	.word	0x08009f79

08009378 <_strtoul_r>:
 8009378:	f7ff bf90 	b.w	800929c <_strtoul_l.constprop.0>

0800937c <__ascii_wctomb>:
 800937c:	4603      	mov	r3, r0
 800937e:	4608      	mov	r0, r1
 8009380:	b141      	cbz	r1, 8009394 <__ascii_wctomb+0x18>
 8009382:	2aff      	cmp	r2, #255	@ 0xff
 8009384:	d904      	bls.n	8009390 <__ascii_wctomb+0x14>
 8009386:	228a      	movs	r2, #138	@ 0x8a
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	4770      	bx	lr
 8009390:	2001      	movs	r0, #1
 8009392:	700a      	strb	r2, [r1, #0]
 8009394:	4770      	bx	lr
	...

08009398 <fiprintf>:
 8009398:	b40e      	push	{r1, r2, r3}
 800939a:	b503      	push	{r0, r1, lr}
 800939c:	4601      	mov	r1, r0
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	4805      	ldr	r0, [pc, #20]	@ (80093b8 <fiprintf+0x20>)
 80093a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	f000 f83d 	bl	8009428 <_vfiprintf_r>
 80093ae:	b002      	add	sp, #8
 80093b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b4:	b003      	add	sp, #12
 80093b6:	4770      	bx	lr
 80093b8:	20000038 	.word	0x20000038

080093bc <abort>:
 80093bc:	2006      	movs	r0, #6
 80093be:	b508      	push	{r3, lr}
 80093c0:	f000 fa06 	bl	80097d0 <raise>
 80093c4:	2001      	movs	r0, #1
 80093c6:	f7f8 fd94 	bl	8001ef2 <_exit>

080093ca <_malloc_usable_size_r>:
 80093ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ce:	1f18      	subs	r0, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bfbc      	itt	lt
 80093d4:	580b      	ldrlt	r3, [r1, r0]
 80093d6:	18c0      	addlt	r0, r0, r3
 80093d8:	4770      	bx	lr

080093da <__sfputc_r>:
 80093da:	6893      	ldr	r3, [r2, #8]
 80093dc:	b410      	push	{r4}
 80093de:	3b01      	subs	r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	6093      	str	r3, [r2, #8]
 80093e4:	da07      	bge.n	80093f6 <__sfputc_r+0x1c>
 80093e6:	6994      	ldr	r4, [r2, #24]
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	db01      	blt.n	80093f0 <__sfputc_r+0x16>
 80093ec:	290a      	cmp	r1, #10
 80093ee:	d102      	bne.n	80093f6 <__sfputc_r+0x1c>
 80093f0:	bc10      	pop	{r4}
 80093f2:	f000 b931 	b.w	8009658 <__swbuf_r>
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	1c58      	adds	r0, r3, #1
 80093fa:	6010      	str	r0, [r2, #0]
 80093fc:	7019      	strb	r1, [r3, #0]
 80093fe:	4608      	mov	r0, r1
 8009400:	bc10      	pop	{r4}
 8009402:	4770      	bx	lr

08009404 <__sfputs_r>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	4606      	mov	r6, r0
 8009408:	460f      	mov	r7, r1
 800940a:	4614      	mov	r4, r2
 800940c:	18d5      	adds	r5, r2, r3
 800940e:	42ac      	cmp	r4, r5
 8009410:	d101      	bne.n	8009416 <__sfputs_r+0x12>
 8009412:	2000      	movs	r0, #0
 8009414:	e007      	b.n	8009426 <__sfputs_r+0x22>
 8009416:	463a      	mov	r2, r7
 8009418:	4630      	mov	r0, r6
 800941a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800941e:	f7ff ffdc 	bl	80093da <__sfputc_r>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d1f3      	bne.n	800940e <__sfputs_r+0xa>
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009428 <_vfiprintf_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	460d      	mov	r5, r1
 800942e:	4614      	mov	r4, r2
 8009430:	4698      	mov	r8, r3
 8009432:	4606      	mov	r6, r0
 8009434:	b09d      	sub	sp, #116	@ 0x74
 8009436:	b118      	cbz	r0, 8009440 <_vfiprintf_r+0x18>
 8009438:	6a03      	ldr	r3, [r0, #32]
 800943a:	b90b      	cbnz	r3, 8009440 <_vfiprintf_r+0x18>
 800943c:	f7fc f9ac 	bl	8005798 <__sinit>
 8009440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d405      	bmi.n	8009452 <_vfiprintf_r+0x2a>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d402      	bmi.n	8009452 <_vfiprintf_r+0x2a>
 800944c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800944e:	f7fc fb1a 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	071b      	lsls	r3, r3, #28
 8009456:	d501      	bpl.n	800945c <_vfiprintf_r+0x34>
 8009458:	692b      	ldr	r3, [r5, #16]
 800945a:	b99b      	cbnz	r3, 8009484 <_vfiprintf_r+0x5c>
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f000 f938 	bl	80096d4 <__swsetup_r>
 8009464:	b170      	cbz	r0, 8009484 <_vfiprintf_r+0x5c>
 8009466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009468:	07dc      	lsls	r4, r3, #31
 800946a:	d504      	bpl.n	8009476 <_vfiprintf_r+0x4e>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	b01d      	add	sp, #116	@ 0x74
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	0598      	lsls	r0, r3, #22
 800947a:	d4f7      	bmi.n	800946c <_vfiprintf_r+0x44>
 800947c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800947e:	f7fc fb03 	bl	8005a88 <__retarget_lock_release_recursive>
 8009482:	e7f3      	b.n	800946c <_vfiprintf_r+0x44>
 8009484:	2300      	movs	r3, #0
 8009486:	9309      	str	r3, [sp, #36]	@ 0x24
 8009488:	2320      	movs	r3, #32
 800948a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800948e:	2330      	movs	r3, #48	@ 0x30
 8009490:	f04f 0901 	mov.w	r9, #1
 8009494:	f8cd 800c 	str.w	r8, [sp, #12]
 8009498:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009644 <_vfiprintf_r+0x21c>
 800949c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094a0:	4623      	mov	r3, r4
 80094a2:	469a      	mov	sl, r3
 80094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a8:	b10a      	cbz	r2, 80094ae <_vfiprintf_r+0x86>
 80094aa:	2a25      	cmp	r2, #37	@ 0x25
 80094ac:	d1f9      	bne.n	80094a2 <_vfiprintf_r+0x7a>
 80094ae:	ebba 0b04 	subs.w	fp, sl, r4
 80094b2:	d00b      	beq.n	80094cc <_vfiprintf_r+0xa4>
 80094b4:	465b      	mov	r3, fp
 80094b6:	4622      	mov	r2, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffa2 	bl	8009404 <__sfputs_r>
 80094c0:	3001      	adds	r0, #1
 80094c2:	f000 80a7 	beq.w	8009614 <_vfiprintf_r+0x1ec>
 80094c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c8:	445a      	add	r2, fp
 80094ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80094cc:	f89a 3000 	ldrb.w	r3, [sl]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 809f 	beq.w	8009614 <_vfiprintf_r+0x1ec>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e0:	f10a 0a01 	add.w	sl, sl, #1
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	9307      	str	r3, [sp, #28]
 80094e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80094ee:	4654      	mov	r4, sl
 80094f0:	2205      	movs	r2, #5
 80094f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f6:	4853      	ldr	r0, [pc, #332]	@ (8009644 <_vfiprintf_r+0x21c>)
 80094f8:	f7fc fac7 	bl	8005a8a <memchr>
 80094fc:	9a04      	ldr	r2, [sp, #16]
 80094fe:	b9d8      	cbnz	r0, 8009538 <_vfiprintf_r+0x110>
 8009500:	06d1      	lsls	r1, r2, #27
 8009502:	bf44      	itt	mi
 8009504:	2320      	movmi	r3, #32
 8009506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800950a:	0713      	lsls	r3, r2, #28
 800950c:	bf44      	itt	mi
 800950e:	232b      	movmi	r3, #43	@ 0x2b
 8009510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009514:	f89a 3000 	ldrb.w	r3, [sl]
 8009518:	2b2a      	cmp	r3, #42	@ 0x2a
 800951a:	d015      	beq.n	8009548 <_vfiprintf_r+0x120>
 800951c:	4654      	mov	r4, sl
 800951e:	2000      	movs	r0, #0
 8009520:	f04f 0c0a 	mov.w	ip, #10
 8009524:	9a07      	ldr	r2, [sp, #28]
 8009526:	4621      	mov	r1, r4
 8009528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800952c:	3b30      	subs	r3, #48	@ 0x30
 800952e:	2b09      	cmp	r3, #9
 8009530:	d94b      	bls.n	80095ca <_vfiprintf_r+0x1a2>
 8009532:	b1b0      	cbz	r0, 8009562 <_vfiprintf_r+0x13a>
 8009534:	9207      	str	r2, [sp, #28]
 8009536:	e014      	b.n	8009562 <_vfiprintf_r+0x13a>
 8009538:	eba0 0308 	sub.w	r3, r0, r8
 800953c:	fa09 f303 	lsl.w	r3, r9, r3
 8009540:	4313      	orrs	r3, r2
 8009542:	46a2      	mov	sl, r4
 8009544:	9304      	str	r3, [sp, #16]
 8009546:	e7d2      	b.n	80094ee <_vfiprintf_r+0xc6>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d19      	adds	r1, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9103      	str	r1, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfbb      	ittet	lt
 8009554:	425b      	neglt	r3, r3
 8009556:	f042 0202 	orrlt.w	r2, r2, #2
 800955a:	9307      	strge	r3, [sp, #28]
 800955c:	9307      	strlt	r3, [sp, #28]
 800955e:	bfb8      	it	lt
 8009560:	9204      	strlt	r2, [sp, #16]
 8009562:	7823      	ldrb	r3, [r4, #0]
 8009564:	2b2e      	cmp	r3, #46	@ 0x2e
 8009566:	d10a      	bne.n	800957e <_vfiprintf_r+0x156>
 8009568:	7863      	ldrb	r3, [r4, #1]
 800956a:	2b2a      	cmp	r3, #42	@ 0x2a
 800956c:	d132      	bne.n	80095d4 <_vfiprintf_r+0x1ac>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	3402      	adds	r4, #2
 8009572:	1d1a      	adds	r2, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9203      	str	r2, [sp, #12]
 8009578:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009648 <_vfiprintf_r+0x220>
 8009582:	2203      	movs	r2, #3
 8009584:	4650      	mov	r0, sl
 8009586:	7821      	ldrb	r1, [r4, #0]
 8009588:	f7fc fa7f 	bl	8005a8a <memchr>
 800958c:	b138      	cbz	r0, 800959e <_vfiprintf_r+0x176>
 800958e:	2240      	movs	r2, #64	@ 0x40
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	eba0 000a 	sub.w	r0, r0, sl
 8009596:	4082      	lsls	r2, r0
 8009598:	4313      	orrs	r3, r2
 800959a:	3401      	adds	r4, #1
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a2:	2206      	movs	r2, #6
 80095a4:	4829      	ldr	r0, [pc, #164]	@ (800964c <_vfiprintf_r+0x224>)
 80095a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095aa:	f7fc fa6e 	bl	8005a8a <memchr>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d03f      	beq.n	8009632 <_vfiprintf_r+0x20a>
 80095b2:	4b27      	ldr	r3, [pc, #156]	@ (8009650 <_vfiprintf_r+0x228>)
 80095b4:	bb1b      	cbnz	r3, 80095fe <_vfiprintf_r+0x1d6>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	3307      	adds	r3, #7
 80095ba:	f023 0307 	bic.w	r3, r3, #7
 80095be:	3308      	adds	r3, #8
 80095c0:	9303      	str	r3, [sp, #12]
 80095c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c4:	443b      	add	r3, r7
 80095c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c8:	e76a      	b.n	80094a0 <_vfiprintf_r+0x78>
 80095ca:	460c      	mov	r4, r1
 80095cc:	2001      	movs	r0, #1
 80095ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d2:	e7a8      	b.n	8009526 <_vfiprintf_r+0xfe>
 80095d4:	2300      	movs	r3, #0
 80095d6:	f04f 0c0a 	mov.w	ip, #10
 80095da:	4619      	mov	r1, r3
 80095dc:	3401      	adds	r4, #1
 80095de:	9305      	str	r3, [sp, #20]
 80095e0:	4620      	mov	r0, r4
 80095e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e6:	3a30      	subs	r2, #48	@ 0x30
 80095e8:	2a09      	cmp	r2, #9
 80095ea:	d903      	bls.n	80095f4 <_vfiprintf_r+0x1cc>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0c6      	beq.n	800957e <_vfiprintf_r+0x156>
 80095f0:	9105      	str	r1, [sp, #20]
 80095f2:	e7c4      	b.n	800957e <_vfiprintf_r+0x156>
 80095f4:	4604      	mov	r4, r0
 80095f6:	2301      	movs	r3, #1
 80095f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fc:	e7f0      	b.n	80095e0 <_vfiprintf_r+0x1b8>
 80095fe:	ab03      	add	r3, sp, #12
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	462a      	mov	r2, r5
 8009604:	4630      	mov	r0, r6
 8009606:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <_vfiprintf_r+0x22c>)
 8009608:	a904      	add	r1, sp, #16
 800960a:	f7fb fa6b 	bl	8004ae4 <_printf_float>
 800960e:	4607      	mov	r7, r0
 8009610:	1c78      	adds	r0, r7, #1
 8009612:	d1d6      	bne.n	80095c2 <_vfiprintf_r+0x19a>
 8009614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009616:	07d9      	lsls	r1, r3, #31
 8009618:	d405      	bmi.n	8009626 <_vfiprintf_r+0x1fe>
 800961a:	89ab      	ldrh	r3, [r5, #12]
 800961c:	059a      	lsls	r2, r3, #22
 800961e:	d402      	bmi.n	8009626 <_vfiprintf_r+0x1fe>
 8009620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009622:	f7fc fa31 	bl	8005a88 <__retarget_lock_release_recursive>
 8009626:	89ab      	ldrh	r3, [r5, #12]
 8009628:	065b      	lsls	r3, r3, #25
 800962a:	f53f af1f 	bmi.w	800946c <_vfiprintf_r+0x44>
 800962e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009630:	e71e      	b.n	8009470 <_vfiprintf_r+0x48>
 8009632:	ab03      	add	r3, sp, #12
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	462a      	mov	r2, r5
 8009638:	4630      	mov	r0, r6
 800963a:	4b06      	ldr	r3, [pc, #24]	@ (8009654 <_vfiprintf_r+0x22c>)
 800963c:	a904      	add	r1, sp, #16
 800963e:	f7fb fcef 	bl	8005020 <_printf_i>
 8009642:	e7e4      	b.n	800960e <_vfiprintf_r+0x1e6>
 8009644:	0800a079 	.word	0x0800a079
 8009648:	0800a07f 	.word	0x0800a07f
 800964c:	0800a083 	.word	0x0800a083
 8009650:	08004ae5 	.word	0x08004ae5
 8009654:	08009405 	.word	0x08009405

08009658 <__swbuf_r>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	460e      	mov	r6, r1
 800965c:	4614      	mov	r4, r2
 800965e:	4605      	mov	r5, r0
 8009660:	b118      	cbz	r0, 800966a <__swbuf_r+0x12>
 8009662:	6a03      	ldr	r3, [r0, #32]
 8009664:	b90b      	cbnz	r3, 800966a <__swbuf_r+0x12>
 8009666:	f7fc f897 	bl	8005798 <__sinit>
 800966a:	69a3      	ldr	r3, [r4, #24]
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	071a      	lsls	r2, r3, #28
 8009672:	d501      	bpl.n	8009678 <__swbuf_r+0x20>
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	b943      	cbnz	r3, 800968a <__swbuf_r+0x32>
 8009678:	4621      	mov	r1, r4
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f82a 	bl	80096d4 <__swsetup_r>
 8009680:	b118      	cbz	r0, 800968a <__swbuf_r+0x32>
 8009682:	f04f 37ff 	mov.w	r7, #4294967295
 8009686:	4638      	mov	r0, r7
 8009688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	6922      	ldr	r2, [r4, #16]
 800968e:	b2f6      	uxtb	r6, r6
 8009690:	1a98      	subs	r0, r3, r2
 8009692:	6963      	ldr	r3, [r4, #20]
 8009694:	4637      	mov	r7, r6
 8009696:	4283      	cmp	r3, r0
 8009698:	dc05      	bgt.n	80096a6 <__swbuf_r+0x4e>
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff f967 	bl	8008970 <_fflush_r>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1ed      	bne.n	8009682 <__swbuf_r+0x2a>
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	60a3      	str	r3, [r4, #8]
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	6022      	str	r2, [r4, #0]
 80096b2:	701e      	strb	r6, [r3, #0]
 80096b4:	6962      	ldr	r2, [r4, #20]
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d004      	beq.n	80096c6 <__swbuf_r+0x6e>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	07db      	lsls	r3, r3, #31
 80096c0:	d5e1      	bpl.n	8009686 <__swbuf_r+0x2e>
 80096c2:	2e0a      	cmp	r6, #10
 80096c4:	d1df      	bne.n	8009686 <__swbuf_r+0x2e>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4628      	mov	r0, r5
 80096ca:	f7ff f951 	bl	8008970 <_fflush_r>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0d9      	beq.n	8009686 <__swbuf_r+0x2e>
 80096d2:	e7d6      	b.n	8009682 <__swbuf_r+0x2a>

080096d4 <__swsetup_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4b29      	ldr	r3, [pc, #164]	@ (800977c <__swsetup_r+0xa8>)
 80096d8:	4605      	mov	r5, r0
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	460c      	mov	r4, r1
 80096de:	b118      	cbz	r0, 80096e8 <__swsetup_r+0x14>
 80096e0:	6a03      	ldr	r3, [r0, #32]
 80096e2:	b90b      	cbnz	r3, 80096e8 <__swsetup_r+0x14>
 80096e4:	f7fc f858 	bl	8005798 <__sinit>
 80096e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ec:	0719      	lsls	r1, r3, #28
 80096ee:	d422      	bmi.n	8009736 <__swsetup_r+0x62>
 80096f0:	06da      	lsls	r2, r3, #27
 80096f2:	d407      	bmi.n	8009704 <__swsetup_r+0x30>
 80096f4:	2209      	movs	r2, #9
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	e033      	b.n	800976c <__swsetup_r+0x98>
 8009704:	0758      	lsls	r0, r3, #29
 8009706:	d512      	bpl.n	800972e <__swsetup_r+0x5a>
 8009708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800970a:	b141      	cbz	r1, 800971e <__swsetup_r+0x4a>
 800970c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009710:	4299      	cmp	r1, r3
 8009712:	d002      	beq.n	800971a <__swsetup_r+0x46>
 8009714:	4628      	mov	r0, r5
 8009716:	f7fd f81b 	bl	8006750 <_free_r>
 800971a:	2300      	movs	r3, #0
 800971c:	6363      	str	r3, [r4, #52]	@ 0x34
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	2300      	movs	r3, #0
 8009728:	6063      	str	r3, [r4, #4]
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	f043 0308 	orr.w	r3, r3, #8
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	b94b      	cbnz	r3, 800974e <__swsetup_r+0x7a>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009744:	d003      	beq.n	800974e <__swsetup_r+0x7a>
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f000 f882 	bl	8009852 <__smakebuf_r>
 800974e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009752:	f013 0201 	ands.w	r2, r3, #1
 8009756:	d00a      	beq.n	800976e <__swsetup_r+0x9a>
 8009758:	2200      	movs	r2, #0
 800975a:	60a2      	str	r2, [r4, #8]
 800975c:	6962      	ldr	r2, [r4, #20]
 800975e:	4252      	negs	r2, r2
 8009760:	61a2      	str	r2, [r4, #24]
 8009762:	6922      	ldr	r2, [r4, #16]
 8009764:	b942      	cbnz	r2, 8009778 <__swsetup_r+0xa4>
 8009766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800976a:	d1c5      	bne.n	80096f8 <__swsetup_r+0x24>
 800976c:	bd38      	pop	{r3, r4, r5, pc}
 800976e:	0799      	lsls	r1, r3, #30
 8009770:	bf58      	it	pl
 8009772:	6962      	ldrpl	r2, [r4, #20]
 8009774:	60a2      	str	r2, [r4, #8]
 8009776:	e7f4      	b.n	8009762 <__swsetup_r+0x8e>
 8009778:	2000      	movs	r0, #0
 800977a:	e7f7      	b.n	800976c <__swsetup_r+0x98>
 800977c:	20000038 	.word	0x20000038

08009780 <_raise_r>:
 8009780:	291f      	cmp	r1, #31
 8009782:	b538      	push	{r3, r4, r5, lr}
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	d904      	bls.n	8009794 <_raise_r+0x14>
 800978a:	2316      	movs	r3, #22
 800978c:	6003      	str	r3, [r0, #0]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009796:	b112      	cbz	r2, 800979e <_raise_r+0x1e>
 8009798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800979c:	b94b      	cbnz	r3, 80097b2 <_raise_r+0x32>
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f830 	bl	8009804 <_getpid_r>
 80097a4:	4622      	mov	r2, r4
 80097a6:	4601      	mov	r1, r0
 80097a8:	4628      	mov	r0, r5
 80097aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ae:	f000 b817 	b.w	80097e0 <_kill_r>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d00a      	beq.n	80097cc <_raise_r+0x4c>
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	d103      	bne.n	80097c2 <_raise_r+0x42>
 80097ba:	2316      	movs	r3, #22
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	2001      	movs	r0, #1
 80097c0:	e7e7      	b.n	8009792 <_raise_r+0x12>
 80097c2:	2100      	movs	r1, #0
 80097c4:	4620      	mov	r0, r4
 80097c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097ca:	4798      	blx	r3
 80097cc:	2000      	movs	r0, #0
 80097ce:	e7e0      	b.n	8009792 <_raise_r+0x12>

080097d0 <raise>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	@ (80097dc <raise+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7ff bfd3 	b.w	8009780 <_raise_r>
 80097da:	bf00      	nop
 80097dc:	20000038 	.word	0x20000038

080097e0 <_kill_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	2300      	movs	r3, #0
 80097e4:	4d06      	ldr	r5, [pc, #24]	@ (8009800 <_kill_r+0x20>)
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	602b      	str	r3, [r5, #0]
 80097ee:	f7f8 fb70 	bl	8001ed2 <_kill>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d102      	bne.n	80097fc <_kill_r+0x1c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b103      	cbz	r3, 80097fc <_kill_r+0x1c>
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	20000410 	.word	0x20000410

08009804 <_getpid_r>:
 8009804:	f7f8 bb5e 	b.w	8001ec4 <_getpid>

08009808 <__swhatbuf_r>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	460c      	mov	r4, r1
 800980c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009810:	4615      	mov	r5, r2
 8009812:	2900      	cmp	r1, #0
 8009814:	461e      	mov	r6, r3
 8009816:	b096      	sub	sp, #88	@ 0x58
 8009818:	da0c      	bge.n	8009834 <__swhatbuf_r+0x2c>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	2100      	movs	r1, #0
 800981e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009822:	bf14      	ite	ne
 8009824:	2340      	movne	r3, #64	@ 0x40
 8009826:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800982a:	2000      	movs	r0, #0
 800982c:	6031      	str	r1, [r6, #0]
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	b016      	add	sp, #88	@ 0x58
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	466a      	mov	r2, sp
 8009836:	f000 f849 	bl	80098cc <_fstat_r>
 800983a:	2800      	cmp	r0, #0
 800983c:	dbed      	blt.n	800981a <__swhatbuf_r+0x12>
 800983e:	9901      	ldr	r1, [sp, #4]
 8009840:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009844:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009848:	4259      	negs	r1, r3
 800984a:	4159      	adcs	r1, r3
 800984c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009850:	e7eb      	b.n	800982a <__swhatbuf_r+0x22>

08009852 <__smakebuf_r>:
 8009852:	898b      	ldrh	r3, [r1, #12]
 8009854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009856:	079d      	lsls	r5, r3, #30
 8009858:	4606      	mov	r6, r0
 800985a:	460c      	mov	r4, r1
 800985c:	d507      	bpl.n	800986e <__smakebuf_r+0x1c>
 800985e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	2301      	movs	r3, #1
 8009868:	6163      	str	r3, [r4, #20]
 800986a:	b003      	add	sp, #12
 800986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986e:	466a      	mov	r2, sp
 8009870:	ab01      	add	r3, sp, #4
 8009872:	f7ff ffc9 	bl	8009808 <__swhatbuf_r>
 8009876:	9f00      	ldr	r7, [sp, #0]
 8009878:	4605      	mov	r5, r0
 800987a:	4639      	mov	r1, r7
 800987c:	4630      	mov	r0, r6
 800987e:	f7fc ffd9 	bl	8006834 <_malloc_r>
 8009882:	b948      	cbnz	r0, 8009898 <__smakebuf_r+0x46>
 8009884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009888:	059a      	lsls	r2, r3, #22
 800988a:	d4ee      	bmi.n	800986a <__smakebuf_r+0x18>
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	f043 0302 	orr.w	r3, r3, #2
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	e7e2      	b.n	800985e <__smakebuf_r+0xc>
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800989e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	6020      	str	r0, [r4, #0]
 80098a8:	b15b      	cbz	r3, 80098c2 <__smakebuf_r+0x70>
 80098aa:	4630      	mov	r0, r6
 80098ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b0:	f000 f81e 	bl	80098f0 <_isatty_r>
 80098b4:	b128      	cbz	r0, 80098c2 <__smakebuf_r+0x70>
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f023 0303 	bic.w	r3, r3, #3
 80098bc:	f043 0301 	orr.w	r3, r3, #1
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	431d      	orrs	r5, r3
 80098c6:	81a5      	strh	r5, [r4, #12]
 80098c8:	e7cf      	b.n	800986a <__smakebuf_r+0x18>
	...

080098cc <_fstat_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	2300      	movs	r3, #0
 80098d0:	4d06      	ldr	r5, [pc, #24]	@ (80098ec <_fstat_r+0x20>)
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	4611      	mov	r1, r2
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	f7f8 fb59 	bl	8001f90 <_fstat>
 80098de:	1c43      	adds	r3, r0, #1
 80098e0:	d102      	bne.n	80098e8 <_fstat_r+0x1c>
 80098e2:	682b      	ldr	r3, [r5, #0]
 80098e4:	b103      	cbz	r3, 80098e8 <_fstat_r+0x1c>
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	bd38      	pop	{r3, r4, r5, pc}
 80098ea:	bf00      	nop
 80098ec:	20000410 	.word	0x20000410

080098f0 <_isatty_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	2300      	movs	r3, #0
 80098f4:	4d05      	ldr	r5, [pc, #20]	@ (800990c <_isatty_r+0x1c>)
 80098f6:	4604      	mov	r4, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	602b      	str	r3, [r5, #0]
 80098fc:	f7f8 fb57 	bl	8001fae <_isatty>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_isatty_r+0x1a>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_isatty_r+0x1a>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20000410 	.word	0x20000410

08009910 <fmaxf>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4604      	mov	r4, r0
 8009914:	460d      	mov	r5, r1
 8009916:	f000 f825 	bl	8009964 <__fpclassifyf>
 800991a:	b910      	cbnz	r0, 8009922 <fmaxf+0x12>
 800991c:	462c      	mov	r4, r5
 800991e:	4620      	mov	r0, r4
 8009920:	bd38      	pop	{r3, r4, r5, pc}
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f81e 	bl	8009964 <__fpclassifyf>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0f8      	beq.n	800991e <fmaxf+0xe>
 800992c:	4629      	mov	r1, r5
 800992e:	4620      	mov	r0, r4
 8009930:	f7f7 fbee 	bl	8001110 <__aeabi_fcmpgt>
 8009934:	2800      	cmp	r0, #0
 8009936:	d0f1      	beq.n	800991c <fmaxf+0xc>
 8009938:	e7f1      	b.n	800991e <fmaxf+0xe>

0800993a <fminf>:
 800993a:	b538      	push	{r3, r4, r5, lr}
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	f000 f810 	bl	8009964 <__fpclassifyf>
 8009944:	b910      	cbnz	r0, 800994c <fminf+0x12>
 8009946:	462c      	mov	r4, r5
 8009948:	4620      	mov	r0, r4
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f809 	bl	8009964 <__fpclassifyf>
 8009952:	2800      	cmp	r0, #0
 8009954:	d0f8      	beq.n	8009948 <fminf+0xe>
 8009956:	4629      	mov	r1, r5
 8009958:	4620      	mov	r0, r4
 800995a:	f7f7 fbbb 	bl	80010d4 <__aeabi_fcmplt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0f1      	beq.n	8009946 <fminf+0xc>
 8009962:	e7f1      	b.n	8009948 <fminf+0xe>

08009964 <__fpclassifyf>:
 8009964:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8009968:	d00d      	beq.n	8009986 <__fpclassifyf+0x22>
 800996a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800996e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8009972:	d30a      	bcc.n	800998a <__fpclassifyf+0x26>
 8009974:	4b07      	ldr	r3, [pc, #28]	@ (8009994 <__fpclassifyf+0x30>)
 8009976:	1e42      	subs	r2, r0, #1
 8009978:	429a      	cmp	r2, r3
 800997a:	d908      	bls.n	800998e <__fpclassifyf+0x2a>
 800997c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8009980:	4258      	negs	r0, r3
 8009982:	4158      	adcs	r0, r3
 8009984:	4770      	bx	lr
 8009986:	2002      	movs	r0, #2
 8009988:	4770      	bx	lr
 800998a:	2004      	movs	r0, #4
 800998c:	4770      	bx	lr
 800998e:	2003      	movs	r0, #3
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	007ffffe 	.word	0x007ffffe

08009998 <_init>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr

080099a4 <_fini>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr
